<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub搜索技巧：快速找到你想要的代码</title>
    <url>/xiaolangwiki/2024/07/23/50/</url>
    <content><![CDATA[<h2 id="GitHub搜索技巧🚀：快速找到你想要的代码"><a href="#GitHub搜索技巧🚀：快速找到你想要的代码" class="headerlink" title="GitHub搜索技巧🚀：快速找到你想要的代码"></a>GitHub搜索技巧🚀：快速找到你想要的代码</h2><p>原文：<a href="https://juejin.cn/post/7386299931399110706">https://juejin.cn/post/7386299931399110706</a></p>
<p>嘿，开发者朋友们！ 👋</p>
<p>你是否曾迷失在GitHub的浩瀚代码海洋中，苦苦寻找那份珍贵的代码片段或项目？ 😩 别担心，今天我将传授你GitHub搜索的Jedi秘诀，让你像一位搜索大师一样，轻松找到你想要的任何东西！ ✨</p>
<p><strong>基础功：关键词和过滤器</strong></p>
<p>首先，掌握基础语法就像学习魔法咒语一样重要。 🪄</p>
<ul>
<li><strong>关键词:</strong> 直接输入你想找的内容，例如 “python”、”machine learning”。</li>
<li><strong>文件类型:</strong> 想找Python文件？加个 <code>extension:py</code> 就行啦！</li>
<li><strong>路径:</strong> 只想知道”docs”文件夹里的文件？用 <code>path:docs</code> 就能精准定位！</li>
<li><strong>用户/组织:</strong> 想看看某个大牛的项目？用 <code>user:username</code> 或 <code>org:organization</code> 就能找到！</li>
</ul>
<p><strong>进阶技巧：运算符和特殊字符</strong></p>
<p>想要更精准地搜索？ 🎯 那就来点高级技巧吧！</p>
<ul>
<li><strong>AND:</strong> 用 <code>+</code> 或空格连接关键词，例如 <code>&quot;machine learning&quot; +python</code>，表示必须同时包含这两个关键词。</li>
<li><strong>OR:</strong> 用 <code>|</code> 连接关键词，例如 <code>&quot;machine learning&quot; |&quot;deep learning&quot;</code>，表示只要包含其中一个关键词即可。</li>
<li><strong>NOT:</strong> 用 <code>-</code> 排除关键词，例如 <code>&quot;machine learning&quot; -python</code>，表示不包含 “python” 的结果。</li>
<li><strong>括号:</strong> 用括号分组关键词，例如 <code>(machine learning) +python</code>，可以更精确地控制搜索范围。</li>
<li><strong>通配符:</strong> 用 <code>*</code> 匹配任意字符，例如 <code>machine*</code> 可以匹配 “machine learning”、”machine vision” 等。</li>
<li><strong>正则表达式:</strong> 如果你是一位正则表达式高手，可以使用 <code>/regex/</code> 来进行更复杂的匹配。</li>
</ul>
<p><strong>终极秘籍：高级选项</strong></p>
<p>想要像搜索大师一样，掌握更多秘密武器？ ⚔️</p>
<ul>
<li><strong>stars:</strong><code>stars:&gt;number</code> 可以找到星标数量大于指定数字的仓库，例如 <code>stars:&gt;1000</code>。</li>
<li><strong>forks:</strong><code>forks:&gt;number</code> 可以找到 Forks 数量大于指定数字的仓库，例如 <code>forks:&gt;100</code>。</li>
<li><strong>language:</strong><code>language:language</code> 可以找到指定语言编写的代码，例如 <code>language:python</code>。</li>
<li><strong>created/pushed/size:</strong> 还可以根据创建日期、最后更新日期和仓库大小进行筛选。</li>
</ul>
<p><strong>案例分析：</strong></p>
<p>假设你想寻找一个使用 Python 编写的，关于机器学习的开源项目，并且希望它拥有超过 1000 个星标，你可以使用以下搜索语句：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">language:python machine learning stars:&gt;1000</span></span><br></pre></td></tr></table></figure>
<p>是不是很简单？ 🤩</p>
<p><strong>小贴士：</strong></p>
<ul>
<li>GitHub 搜索帮助文档是你的好朋友，里面有更多高级选项和语法： <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Fen%2Fsearch-github" title="https://docs.github.com/en/search-github">docs.github.com/en/search-g…</a></li>
<li>善用代码搜索功能，可以更精准地查找代码片段。</li>
<li>Issue 和 Pull Request 搜索功能也能帮助你找到问题的讨论和代码修改请求。</li>
<li>不要害怕尝试不同的搜索语句，不断练习才能成为搜索大师！</li>
</ul>
<p>GitHub搜索Jedi秘诀，速来学习！ 🚀 这份笔记记录了我的一些心得体会，希望能对大家有所帮助。</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>代码搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>从使用到自己实现简单Vue Router看这个就行</title>
    <url>/xiaolangwiki/2021/07/24/17/</url>
    <content><![CDATA[<h2 id="从使用到自己实现简单Vue-Router看这个就行了"><a href="#从使用到自己实现简单Vue-Router看这个就行了" class="headerlink" title="从使用到自己实现简单Vue Router看这个就行了"></a>从使用到自己实现简单Vue Router看这个就行了</h2><p>原文：<a href="https://juejin.cn/post/6988316779818778631">https://juejin.cn/post/6988316779818778631</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>这是小浪在学习<strong>Vue Router</strong> 总结的笔记，有的地方写的不是很好，请大家多多指教</p>
<ul>
<li>这里带你了解 <strong>Vue Router</strong> 的基本使用</li>
<li>手写一个基础的 <strong>Vue Router</strong> 感受下基础的实现</li>
<li>有了之前的基础，那么按照官方的源码 再写个 <strong>Vue Router</strong> 吧</li>
</ul>
<p>在两个手写<strong>Vue Router</strong>地方我都有写详细的注释</p>
<p>希望这篇文章对您有所帮助，建议自己手动去敲下</p>
<p>最后：小浪在线<strong>求赞</strong></p>
</blockquote>
<h1 id="Vue-Router-基础"><a href="#Vue-Router-基础" class="headerlink" title="Vue Router 基础"></a>Vue Router 基础</h1><p>让我们先来了解下<code>Vue Router</code>的简单使用吧，先了解怎么使用，之后再去想办法怎么去实现</p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>路由：本质上是一种对应关系</p>
<p>分类分为<strong>前端路由</strong>和<strong>后端路由</strong></p>
<blockquote>
<p>后端路由</p>
</blockquote>
<p>比如node.js 的路由是 <strong>URL</strong>的请求地址和服务器上面的<strong>资源</strong>对应，根据不同的请求地址返回不同的资源</p>
<blockquote>
<p>前端路由</p>
</blockquote>
<p>在<strong>SPA</strong>（单页应用）中根据用户所触发的事件改变了<strong>URL</strong> 在无需刷新的前提下 显示不同的页面内容，比如等下就要讲的<strong>Vue Router</strong></p>
<h2 id="2-Vue-Router最基础的使用步骤"><a href="#2-Vue-Router最基础的使用步骤" class="headerlink" title="2.Vue-Router最基础的使用步骤"></a>2.Vue-Router最基础的使用步骤</h2><h3 id="1-引入Vue-Router文件"><a href="#1-引入Vue-Router文件" class="headerlink" title="1.引入Vue-Router文件"></a>1.引入Vue-Router文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-在页面上添加-router-link-和-router-view"><a href="#2-在页面上添加-router-link-和-router-view" class="headerlink" title="2.在页面上添加 router-link 和 router-view"></a>2.在页面上添加 router-link 和 router-view</h3> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-创建路由组件"><a href="#3-创建路由组件" class="headerlink" title="3.创建路由组件"></a>3.创建路由组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> home = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> login = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt;欢迎来到登录页&lt;/div&gt;</span></span><br><span class="line"><span class="string">	`</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-配置路由规则"><a href="#4-配置路由规则" class="headerlink" title="4.配置路由规则"></a>4.配置路由规则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: \[</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: home,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: login,</span><br><span class="line">        &#125;,</span><br><span class="line">    \],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="5-挂载路由"><a href="#5-挂载路由" class="headerlink" title="5.挂载路由"></a>5.挂载路由</h3> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">        router,</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76bdf2efd0d14eecb50e7dfc199e36f3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="2"></p>
<h2 id="3-嵌套路由"><a href="#3-嵌套路由" class="headerlink" title="3.嵌套路由"></a>3.嵌套路由</h2><blockquote>
<p>这里的嵌套路由是基于上面的例子继续写的</p>
</blockquote>
<h3 id="1-在路由里面添加-子路由链接和-占位符"><a href="#1-在路由里面添加-子路由链接和-占位符" class="headerlink" title="1.在路由里面添加 子路由链接和 占位符"></a>1.在路由里面添加 子路由链接和 占位符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> home = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    欢迎来到首页</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;!\-\- 子路由链接 --&gt;</span></span><br><span class="line"><span class="string">    &lt;router-link to=&quot;/tab1&quot;&gt;Tab1&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;router-link to=&quot;/tab2&quot;&gt;Tab2&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!\-\- 子路由展示 --&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-添加路由组件"><a href="#2-添加路由组件" class="headerlink" title="2.添加路由组件"></a>2.添加路由组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tab1 = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    子路由1</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tab2 = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    子路由2</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-配置路由规则"><a href="#3-配置路由规则" class="headerlink" title="3.配置路由规则"></a>3.配置路由规则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: \[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: home,</span><br><span class="line"></span><br><span class="line">            <span class="attr">children</span>: \[</span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;/tab1&#x27;</span>, <span class="attr">component</span>: tab1 &#125;,</span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;/tab2&#x27;</span>, <span class="attr">component</span>: tab2 &#125;,</span><br><span class="line">            \],</span><br><span class="line">        &#125;,</span><br><span class="line">    \],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c79adc65ba146ba89240855603e262c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="3"></p>
<h2 id="4-动态路由"><a href="#4-动态路由" class="headerlink" title="4.动态路由"></a>4.动态路由</h2><blockquote>
<p><code>path</code>属性加上<code>/:id</code> 使用<code>route</code>对象的<code>params.id</code>获取动态参数</p>
</blockquote>
<p>比如现在有这么多个路由，如果自己也配置多个路由，岂不是有点。。。多余</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods/1&quot;</span>&gt;</span>goods1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods/2&quot;</span>&gt;</span>goods2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods/3&quot;</span>&gt;</span>goods3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods/4&quot;</span>&gt;</span>goods4<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后这里就可以使用 动态路由来解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> goods = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;欢迎来到商品 &#123;&#123;$route.params.id&#125;&#125;页&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        <span class="attr">routes</span>: \[</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/goods/:id&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: goods,</span><br><span class="line">            &#125;,</span><br><span class="line">        \],</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">        router,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ccc5241e7f94107b59e39225390b0e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="4"></p>
<blockquote>
<p>最后提一下还可以用<strong>query</strong>进行传参.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 比如</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods?id=1&quot;</span>&gt;</span>goods<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后使用<code>this.$route.query.id</code>就可以在路由组件中获取到<strong>id</strong></p>
<blockquote>
<p>添加动态路由</p>
</blockquote>
<p>使用 <code>this.$router.addRoutes(\[\])</code> 可以<strong>添加动态路由</strong>,里面传递是一个数组 和 <strong>routes</strong>里面一样</p>
<h2 id="5-路由传参"><a href="#5-路由传参" class="headerlink" title="5.路由传参"></a>5.路由传参</h2><blockquote>
<p>我们可以使用 props 进行传值</p>
<p>为啥要用 props 进行传值，route不香了吗，确实route 不够灵活</p>
<p>props 值有三种情况</p>
</blockquote>
<h3 id="1-布尔值类型"><a href="#1-布尔值类型" class="headerlink" title="1.布尔值类型"></a>1.布尔值类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> goods = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">props</span>: \[<span class="string">&#x27;id&#x27;</span>\],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;欢迎来到商品 &#123;&#123;id&#125;&#125;页&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: \[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/goods/:id&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: goods,</span><br><span class="line"></span><br><span class="line">            <span class="attr">props</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    \],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="2-对象类型"><a href="#2-对象类型" class="headerlink" title="2.对象类型"></a>2.对象类型</h3><p>但是这里就获取不到 <code>id</code> 了，会<strong>报错</strong></p>
<p>这里的id 需要 <code>$route.params.id</code> 获取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> goods = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">props</span>: \[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;id&#x27;</span>\],</span><br><span class="line"></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;&#123;&#123;info&#125;&#125;来到&#123;&#123;name&#125;&#125; &#123;&#123;id&#125;&#125;页&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: \[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/goods/:id&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: goods,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="attr">props</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;商品&#x27;</span>,</span><br><span class="line">                <span class="attr">info</span>: <span class="string">&#x27;欢迎&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    \],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> goods = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">props</span>: \[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;id&#x27;</span>\],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;&#123;&#123;info&#125;&#125;来到&#123;&#123;name&#125;&#125; &#123;&#123;id&#125;&#125;页&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: \[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/goods/:id&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: goods,</span><br><span class="line"></span><br><span class="line">            <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;商品&#x27;</span>,</span><br><span class="line">                    <span class="attr">info</span>: <span class="string">&#x27;欢迎&#x27;</span>,</span><br><span class="line">                    <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    \],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="6-route-和-router"><a href="#6-route-和-router" class="headerlink" title="6.route 和 router"></a>6.route 和 router</h2><blockquote>
<p>在上面提到了<strong>route</strong> 那么和 <strong>router</strong>有什么区别呢</p>
</blockquote>
<ul>
<li><strong>route</strong>为<strong>当前router跳转对象</strong>里面可以获取<strong>path</strong>，<strong>params</strong>，<strong>hash</strong>，<strong>query</strong>，<strong>fullPath</strong>，<strong>matched</strong>，<strong>name</strong></li>
<li><strong>router</strong>为<strong>VueRouter实例</strong>用 <strong>new VueRouter</strong>创建的实例，想要导航到不同<strong>URL</strong>，则使用<code>router.push</code>方法</li>
<li><strong>routes</strong>是<strong>router</strong>路由实例用来配置路由对象（顺带提一下）</li>
</ul>
<h2 id="7-命名路由"><a href="#7-命名路由" class="headerlink" title="7.命名路由"></a>7.命名路由</h2><p>路由组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> goods = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">props</span>: \[<span class="string">&#x27;id&#x27;</span>\],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;商品&#123;&#123;id&#125;&#125;页&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: \[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/goods/:id&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;goods&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: goods,</span><br><span class="line">        &#125;,</span><br><span class="line">    \],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>绑定 <code>:to</code> 通过<code>name</code>找到定义的路由 还可以使用 <code>params</code> 传递参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;goods&#x27;, params: &#123; id: 1 &#125; &#125;&quot;</span>&gt;</span>goods1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-编程式导航"><a href="#8-编程式导航" class="headerlink" title="8.编程式导航"></a>8.编程式导航</h2><h3 id="1-声明式导航"><a href="#1-声明式导航" class="headerlink" title="1.声明式导航"></a>1.声明式导航</h3><blockquote>
<p>既然提到了编程式导航，那么先简单说下声明式导航</p>
</blockquote>
<p>上面所展示的都是<strong>声明是导航</strong> 比如<strong>router-link</strong></p>
<p><code>&lt;router-link to=&quot;/goods/1&quot;&gt;goods1&lt;/router-link&gt;</code></p>
<p>还有<strong>a</strong>标签</p>
<p><code>&lt;a href=&quot;#/goods/1&quot;&gt;goods1&lt;/a&gt;</code></p>
<h3 id="2-编程式导航"><a href="#2-编程式导航" class="headerlink" title="2.编程式导航"></a>2.编程式导航</h3><blockquote>
<p>使用<strong>javaScript</strong>来控制<strong>路由跳转</strong></p>
</blockquote>
<p>在普通的网页中使用 <code>loaction.href``window.open</code> 等等进行跳转</p>
<p>现在我要介绍的是<strong>Vue Router</strong>中的编程式导航</p>
<p>我们平时都是用<strong>router.push()</strong> **router.go(n)**方法进行跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$ruter</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/goods&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;goods&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="9-路由守卫"><a href="#9-路由守卫" class="headerlink" title="9.路由守卫"></a>9.路由守卫</h2><h3 id="1-全局守卫"><a href="#1-全局守卫" class="headerlink" title="1.全局守卫"></a>1.全局守卫</h3><p><strong>router.beforeEach</strong> 全局守卫 对所有的路由都起作用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/error&#x27;</span>, <span class="attr">replace</span>: <span class="literal">true</span>, <span class="attr">query</span>: &#123; <span class="attr">back</span>: <span class="literal">false</span> &#125;&#125;</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全局的守卫的三个参数</p>
</blockquote>
<p><code>to</code>: 即将要进入的目标 路由对象</p>
<p><code>from</code>: 当前导航正要离开 路由对象</p>
<p><code>next</code>: 参数不同做的事也不同</p>
<blockquote>
<ul>
<li><strong>next()</strong> 直接进入下一个钩子</li>
<li><strong>next(false)</strong> 停止当前导航</li>
<li><strong>next(‘/路径’)</strong> 跳转到<strong>path</strong>路由地址 当然这里面也可以写成对象形式 <strong>next({path : ‘/路径’})</strong></li>
<li><strong>next(error)</strong>: 如果传入参数是一个 <strong>Error</strong> 实例，则导航会被终止且该错误会被传递给 <code>router.onError()</code></li>
</ul>
</blockquote>
<h3 id="2-路由独享的守卫"><a href="#2-路由独享的守卫" class="headerlink" title="2.路由独享的守卫"></a>2.路由独享的守卫</h3><p><strong>beforeEnter</strong> 路由对象独享的守卫写在<strong>routes</strong>里面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: goods,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  \]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="3-组件内的守卫-了解"><a href="#3-组件内的守卫-了解" class="headerlink" title="3.组件内的守卫(了解)"></a>3.组件内的守卫(了解)</h3><p>组件内的守卫 写在组件内部 下面是官方介绍</p>
<ul>
<li><strong>beforeRouteEnter</strong> 进入路由前,组件还没有被实例化所以这里无法获取到this</li>
<li><strong>beforeRouteUpdate (2.2)</strong> 这个阶段可以获取this,在路由复用同一个组件时触发</li>
<li><strong>beforeRouteLeave</strong> 这个阶段可以获取this,当离开组件对应的路由时,此时可以用来保存数据,或数据初始化,或关闭定时器等等</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> goods = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;goods&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-组件缓存-keep-alive"><a href="#10-组件缓存-keep-alive" class="headerlink" title="10.组件缓存 keep-alive"></a>10.组件缓存 <strong>keep-alive</strong></h2><p>页面重新加载会重新渲染页面比如回退的时候等等，我们有的组件它不是一个活动的(数据不变)不希望它被重新渲染，所以这里就可以使用 <strong><code>&lt;keep-alive&gt; &lt;/keep-alive&gt;</code></strong> 包裹起来，这样就不会触发<code>created</code>钩子</p>
<p>应用场景：获取一个商品的详情然后回退在前进的时候就使用缓存，提高性能</p>
<h3 id="1-不使用-keep-alive例子"><a href="#1-不使用-keep-alive例子" class="headerlink" title="1.不使用 keep-alive例子"></a>1.不使用 keep-alive例子</h3><blockquote>
<p>这里home 组件在<strong>created</strong>进行打印当前的时间</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">const</span> login = &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;Login&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> home = &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;Home&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        <span class="attr">routes</span>: \[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: home,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: login,</span><br><span class="line">          &#125;,</span><br><span class="line">        \],</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">        router,</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12d49c936f34449798635c804731805c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="5"></p>
<p>如上，每切换<code>home</code> 的路由 组件就会<strong>重新渲染</strong>，打印当前的时间</p>
<p>如果使用 <strong>keep-alive</strong> 会有什么效果呢</p>
<h3 id="2-使用keep-alive"><a href="#2-使用keep-alive" class="headerlink" title="2.使用keep-alive"></a>2.使用keep-alive</h3><blockquote>
<p>这里只需简单的包裹起来就行了</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d9d1e2bdad646d88b3d9823980fbef8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="6"></p>
<p>可以看到的是只打印一次，说明切换了路由它并<strong>没有重新渲染组件</strong></p>
<blockquote>
<p>当然可以在 组件内取个<strong>name</strong>名字 <code>keep-alive</code> 标签里面添加 <strong>include</strong> 属性就可以对相应的组件进行缓存</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> login = &#123;</span><br><span class="line">    <span class="attr">name</span>: login,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;Login&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> home = &#123;</span><br><span class="line">    <span class="attr">name</span>: home,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;Home&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;login,home&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-activated-和-deactivated"><a href="#3-activated-和-deactivated" class="headerlink" title="3.activated 和 deactivated"></a>3.activated 和 deactivated</h3><blockquote>
<p>keep-alive 生命周期执行顺序</p>
</blockquote>
<p>第一次访问路由时：</p>
<ul>
<li><code>created</code>—&gt;<code>mounted</code> —&gt;<code>activated</code></li>
<li><code>deactivated</code>在退出后触发</li>
</ul>
<p><strong>以后进入只会触发</strong><code>activated</code></p>
<h2 id="11-hash-和-history-模式"><a href="#11-hash-和-history-模式" class="headerlink" title="11.hash 和 history 模式"></a>11.hash 和 history 模式</h2><h3 id="1-hash模式"><a href="#1-hash模式" class="headerlink" title="1.hash模式"></a>1.hash模式</h3><p>在vue-router中<strong>默认使用</strong>的是 <strong>hash</strong> 模式</p>
<p><code>hash</code>是url中的锚点就是<strong><code>#</code></strong>,通过锚点作为路由地址,我们通常改变的是改变<strong><code>#</code></strong>后面部分,实现浏览器渲染指定的组件.,锚点发生改变会触发 <strong>onhashchange</strong> 事件</p>
<h3 id="2-history模式"><a href="#2-history模式" class="headerlink" title="2.history模式"></a>2.history模式</h3><p>history 模式就是平时正常的地址，使用方面需要服务器支持</p>
<p>如果访问的路径资源没有 直接就是 <code>404</code></p>
<p>在<strong>HTML5</strong>后新增了两个API</p>
<p><strong>pushState()</strong>: IE10后支持</p>
<p><strong>replaceState()</strong></p>
<p>在<code>vue-router</code>中如果要使用 <code>history</code> 模式<strong>需要指定</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="实现一个基础-Vue-Router"><a href="#实现一个基础-Vue-Router" class="headerlink" title="实现一个基础 Vue Router"></a>实现一个基础 Vue Router</h1><blockquote>
<p>复习上面的路由的基础那么我们不如来写个Vue Router吧</p>
</blockquote>
<p>实现的这个 Vue Router是基于 history模式</p>
<p>所有的步骤都放到代码的注释中，每一行都写个注释</p>
<p>这个简单的没有按照Vue Router源码来写主要是一些基础功能的实现</p>
<p>为后面的按照源码写打基础</p>
<h2 id="1-注册全局Vue-Router"><a href="#1-注册全局Vue-Router" class="headerlink" title="1.注册全局Vue Router"></a>1.注册全局Vue Router</h2><blockquote>
<p>首先就是先注册自己的 Vue Router</p>
<p>判断是否注册了组件</p>
<p>在Vue实例创建完成进行注册</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">MyVueRouter</span>.<span class="property">install</span>.<span class="property">installed</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">MyVueRouter</span>.<span class="property">install</span>.<span class="property">installed</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    _Vue = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line">    _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line"></span><br><span class="line">          _Vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-实现-构造方法"><a href="#2-实现-构造方法" class="headerlink" title="2.实现 构造方法"></a>2.实现 构造方法</h2><blockquote>
<p><strong>optoins</strong> 保存传入的规则</p>
<p><strong>routerMap</strong> 确定地址和组件的关系</p>
<p><strong>current</strong> 表示当前的地址是响应式的之后渲染组件和它相关</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">optoins</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">optoins</span> = optoins</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routerMap</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = _Vue.<span class="title function_">observable</span>(&#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">current</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-解析路由规则"><a href="#3-解析路由规则" class="headerlink" title="3.解析路由规则"></a>3.解析路由规则</h2><blockquote>
<p>传入的路由规则拿到一个对象里 地址 和 组件一一匹配</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createRouterMap</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">optoins</span>.<span class="property">routes</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">routerMap</span>\[item.<span class="property">path</span>\] = item.<span class="property">component</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-实现-router-link-组件"><a href="#4-实现-router-link-组件" class="headerlink" title="4.实现 router-link 组件"></a>4.实现 router-link 组件</h2><blockquote>
<p>router-link就是页面上所展示的路由链接</p>
<p>因为一般使用的基本都是运行版的Vue 所以自己把组件转为 虚拟DOM</p>
<p>还有就是链接会刷新的问题</p>
<p>自己写个函数进行跳转阻止默认事件</p>
<p>还得注意对应的路由所要渲染的组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initComponents</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">to</span>: <span class="title class_">String</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">          <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">            <span class="attr">attrs</span>: &#123;</span><br><span class="line">              <span class="attr">href</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">on</span>: &#123;</span><br><span class="line"></span><br><span class="line">              <span class="attr">click</span>: <span class="variable language_">this</span>.<span class="property">myClick</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          \[<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>\]</span><br><span class="line">        )</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">myClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          history.<span class="title function_">pushState</span>(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="variable language_">this</span>.<span class="property">to</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">data</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">to</span></span><br><span class="line"></span><br><span class="line">          e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="5-实现-router-view-组件"><a href="#5-实现-router-view-组件" class="headerlink" title="5.实现 router-view 组件"></a>5.实现 router-view 组件</h2><blockquote>
<p>这里从之前解析的规则里面拿到当前的对应的组件进行转为虚拟DOM</p>
<p>最后<code>router-view</code>占位渲染到页面上</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initComponents</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">routerMap</span>\[<span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">data</span>.<span class="property">current</span>\]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(component)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-前进和后退"><a href="#6-前进和后退" class="headerlink" title="6.前进和后退"></a>6.前进和后退</h2><blockquote>
<p>在完成之前的编写还是不够的，因为在浏览器点后退和前进虽然改变了浏览器的地址，但是组件却没有刷新，下面就来解决这个问题</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">current</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-在router挂载后进行初始化"><a href="#7-在router挂载后进行初始化" class="headerlink" title="7.在router挂载后进行初始化"></a>7.在router挂载后进行初始化</h2><blockquote>
<p>最后写个函数进行初始化</p>
<p>在router注册到Vue之后进行 初始化</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createRouterMap</span>()</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initComponents</span>(_Vue)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initEvent</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">MyVueRouter</span>.<span class="property">install</span>.<span class="property">installed</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="title class_">MyVueRouter</span>.<span class="property">install</span>.<span class="property">installed</span> = <span class="literal">true</span></span><br><span class="line">    _Vue = <span class="title class_">Vue</span></span><br><span class="line">    _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">      <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line">          _Vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span></span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>.<span class="title function_">init</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-放上完整的-index-js"><a href="#8-放上完整的-index-js" class="headerlink" title="8.放上完整的 index.js"></a>8.放上完整的 index.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyVueRouter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">MyVueRouter</span>.<span class="property">install</span>.<span class="property">installed</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">MyVueRouter</span>.<span class="property">install</span>.<span class="property">installed</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    _Vue = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line">    _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line"></span><br><span class="line">          _Vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span></span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>.<span class="title function_">init</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">optoins</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">optoins</span> = optoins</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routerMap</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = _Vue.<span class="title function_">observable</span>(&#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">current</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createRouterMap</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">optoins</span>.<span class="property">routes</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">routerMap</span>\[item.<span class="property">path</span>\] = item.<span class="property">component</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initComponents</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">to</span>: <span class="title class_">String</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">          <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">            <span class="attr">attrs</span>: &#123;</span><br><span class="line">              <span class="attr">href</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">on</span>: &#123;</span><br><span class="line"></span><br><span class="line">              <span class="attr">click</span>: <span class="variable language_">this</span>.<span class="property">myClick</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          \[<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>\]</span><br><span class="line">        )</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">myClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          history.<span class="title function_">pushState</span>(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="variable language_">this</span>.<span class="property">to</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">data</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">to</span></span><br><span class="line"></span><br><span class="line">          e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> component = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">routerMap</span>\[<span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">data</span>.<span class="property">current</span>\]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(component)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">current</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createRouterMap</span>()</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initComponents</span>(_Vue)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initEvent</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到了这里基础的实现功能差不多了，上面的例子是为了下面打基础，所有的功能实现基本都是在一个文件下很不严谨，下面就严格按照<strong>Vue Router</strong> 源码来实现自己 <strong>Vue Router</strong></p>
<h1 id="Vue-Router实现"><a href="#Vue-Router实现" class="headerlink" title="Vue Router实现"></a>Vue Router实现</h1><blockquote>
<p>经过上面简单的实现，现在我们按照Vue Router源码的方式进行编写</p>
</blockquote>
<h2 id="1-首先是Vue-Router-构造"><a href="#1-首先是Vue-Router-构造" class="headerlink" title="1.首先是Vue Router 构造"></a>1.首先是Vue Router 构造</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_options</span> = options.<span class="property">routes</span> || \[\]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">Vue</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-注册组件-install"><a href="#2-注册组件-install" class="headerlink" title="2.注册组件 install"></a>2.注册组件 install</h2><blockquote>
<p>在 <strong>install.js</strong> 对自己写的<strong>Vue-Router</strong>进行全局的注册</p>
<p>之后还会在这里创建 <strong> $r o u t e r <em> </em> <em> </em>$) route</strong></p>
<p>还有注册 <strong>router-link**</strong>router-view**</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line">  _Vue = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line">  _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.\_routerRoot = (<span class="variable language_">this</span>.<span class="property">$parent</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$parent</span>.\_routerRoot) || <span class="variable language_">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 <code>index.js</code>中导入<strong>install</strong> 进行为构造添加 <strong>install</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> install <span class="keyword">from</span> <span class="string">&#x27;./install&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = install</span><br></pre></td></tr></table></figure>
<h2 id="3-编写-create-route-map-js"><a href="#3-编写-create-route-map-js" class="headerlink" title="3.编写 create-route-map.js"></a>3.编写 create-route-map.js</h2><blockquote>
<p>这个主要的作用就是用来解析传递过来的路由 需要导出然后在 <code>create-matcher.js</code>进行使用</p>
<p>具体的细节都写了注释</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\*</span><br><span class="line"> \* @param &#123;*&#125; routes 路由规则</span><br><span class="line"> \* @param &#123;*&#125; oldPathList 路由列表</span><br><span class="line"> \* @param &#123;*&#125; oldPathMap 路由和组件的对应关系</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createRouteMap</span>(<span class="params">routes, oldPathList, oldPathMap</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pathList = oldPathList || \[\]</span><br><span class="line">  <span class="keyword">const</span> pathMap = oldPathMap || \[\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  routes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addRouteRecord</span>(route, pathList, pathMap)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pathList,</span><br><span class="line">    pathMap,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;*&#125; route 路由规则</span><br><span class="line"> \* @param &#123;*&#125; pathList 路由列表</span><br><span class="line"> \* @param &#123;*&#125; pathMap 路由和组件之间的对应关系</span><br><span class="line"> \* @param &#123;*&#125; parentRecord  父路由</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addRouteRecord</span>(<span class="params">route, pathList, pathMap, parentRecord</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> path = parentRecord ? <span class="string">`<span class="subst">$&#123;parentRecord.path&#125;</span>/<span class="subst">$&#123;route.path&#125;</span>`</span> : route.<span class="property">path</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> record = &#123;</span><br><span class="line">    path,</span><br><span class="line">    <span class="attr">component</span>: route.<span class="property">component</span>,</span><br><span class="line">    <span class="attr">parent</span>: parentRecord,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pathList\[path\]) &#123;</span><br><span class="line"></span><br><span class="line">    pathList.<span class="title function_">push</span>(path)</span><br><span class="line"></span><br><span class="line">    pathMap\[path\] = record</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (route.<span class="property">children</span>) &#123;</span><br><span class="line">    route.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">childRoute</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">addRouteRecord</span>(childRoute, pathList, pathMap, record)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-编写-create-matcher-js"><a href="#4-编写-create-matcher-js" class="headerlink" title="4.编写 create-matcher.js"></a>4.编写 create-matcher.js</h2><blockquote>
<p>这个模块的意义也是解析路由不过这个是个指挥家，上面实现的是具体解析操作</p>
<p>在这个模块里进行调用上面的具体解析路由的方法就行了</p>
<p>有了上面面具体的路由解析，这个<strong>create-matcher.js</strong>就容易实现了，只需要简单的调用它即可</p>
<p>这个模块返回了两个方法</p>
<ul>
<li><strong>match</strong> : 根据路由路径创建路由规则对象，之后就可以通过 规则对象获取到所有的路由信息然后拿到所有的组件进行创建</li>
<li><strong>addRoutes</strong> : 添加动态路由</li>
</ul>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRouteMap <span class="keyword">from</span> <span class="string">&#x27;./create-route-map&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createMatcher</span>(<span class="params">router</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap &#125; = <span class="title function_">createRouteMap</span>(router)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">match</span>(<span class="params">path</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addRoutes</span>(<span class="params">router</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createRouteMap</span>(router, pathList, pathMap)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    match,</span><br><span class="line">    addRoutes,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后在<strong>index.js</strong>也就是<strong>Vue Router</strong>的构造中使用 <strong>createMatcher.</strong> 使用<strong>this.matcher</strong>接收</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> install <span class="keyword">from</span> <span class="string">&#x27;./install&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> createMatcher <span class="keyword">from</span> <span class="string">&#x27;./create-matcher&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_routes</span> = options.<span class="property">routes</span> || \[\]</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">matcher</span> = <span class="title function_">createMatcher</span>(<span class="variable language_">this</span>.<span class="property">_routes</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">Vue</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = install</span><br></pre></td></tr></table></figure>
<h2 id="5-编写-createMatcher"><a href="#5-编写-createMatcher" class="headerlink" title="5.编写 createMatcher"></a>5.编写 createMatcher</h2><blockquote>
<p>看见上面在 <strong>createMatcher</strong>中定义了 一个<strong>match</strong>了吗，</p>
<p><strong>match</strong>是 从<strong>pathMap</strong> 根据<strong>path</strong>获取 相应的路由记录</p>
<p>上面还没有去实现，现在来实现它</p>
<p>需要实现它的话还需要编写个 <strong>createRoute</strong> 方法，我这里写在 <strong>uitl/route.js</strong>模块里</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\*</span><br><span class="line"> \* @param &#123;*&#125; record 传过来的记录</span><br><span class="line"> \* @param &#123;*&#125; path 路由地址</span><br><span class="line"> \* @returns</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createRoute</span>(<span class="params">record, path</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> matched = \[\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (record) &#123;</span><br><span class="line"></span><br><span class="line">    matched.<span class="title function_">unshift</span>(record)</span><br><span class="line"></span><br><span class="line">    record = record.<span class="property">parent</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    path,</span><br><span class="line">    matched,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面编写了 <strong>createRoute</strong>方法我们就可以在 <strong>create-mathcer.js</strong> 调用 来获取到记录了</p>
<p>然后再 <strong>create-mathcer.js</strong>中继续 完善 <strong>match</strong>方法</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRouteMap <span class="keyword">from</span> <span class="string">&#x27;./create-route-map&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> createRoute <span class="keyword">from</span> <span class="string">&#x27;./util/route&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createMatcher</span>(<span class="params">router</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap &#125; = <span class="title function_">createRouteMap</span>(router)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">match</span>(<span class="params">path</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> record = pathMap\[path\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (record) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createRoute</span>(record, path)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createRoute</span>(<span class="literal">null</span>, path)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addRoutes</span>(<span class="params">router</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createRouteMap</span>(router, pathList, pathMap)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    match,</span><br><span class="line">    addRoutes,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-历史记录的处理-History"><a href="#6-历史记录的处理-History" class="headerlink" title="6.历史记录的处理 History"></a>6.历史记录的处理 History</h2><blockquote>
<p>在 <strong>history</strong>目录下新建一个 <strong>base</strong>模块用来编写 父类</p>
<p>这个父类有 <strong>hash</strong> 模式 和 <strong>history</strong>(html5) 模式共同的方法</p>
<p>这里就主要演示下 <strong>hash</strong> 模式的代码</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRoute <span class="keyword">from</span> <span class="string">&#x27;../util/route&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">History</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">router</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span> = router</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="title function_">createRoute</span>(<span class="literal">null</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">transitionTo</span>(<span class="params">path, onComplete</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">matcher</span>.<span class="title function_">match</span>(path)</span><br><span class="line"></span><br><span class="line">    onComplete &amp;&amp; <span class="title function_">onComplete</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编写 <strong>HashHistory</strong> 模式 继承 <strong>History</strong></p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">History</span> <span class="keyword">from</span> <span class="string">&#x27;./base&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HashHistory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">History</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(router)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ensuerSlash</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setUpListener</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">transitionTo</span>(<span class="variable language_">this</span>.<span class="title function_">getCurrentLocation</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getCurrentLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> href = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line">    <span class="keyword">const</span> index = href.<span class="title function_">indexOf</span>(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    href = href.<span class="title function_">slice</span>(index + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> href</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ensuerSlash</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于 <strong>html5</strong>模式 这里 就没写了</p>
<p>然后回到 <strong>index.js</strong> 就是自己写的 <strong>Vue Router</strong>中继续编写模式判断</p>
<p>最后就是 初始化 init方法</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> install <span class="keyword">from</span> <span class="string">&#x27;./install&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> createMatcher <span class="keyword">from</span> <span class="string">&#x27;./create-matcher&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HashHistory</span> <span class="keyword">from</span> <span class="string">&#x27;./history/hash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HTML5History</span> <span class="keyword">from</span> <span class="string">&#x27;./history/html5&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_routes</span> = options.<span class="property">routes</span> || \[\]</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">matcher</span> = <span class="title function_">createMatcher</span>(<span class="variable language_">this</span>.<span class="property">_routes</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mode</span> = options.<span class="property">mode</span> || <span class="string">&#x27;hash&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">mode</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;history&#x27;</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span> = <span class="keyword">new</span> <span class="title class_">HTML5History</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;hash&#x27;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span> = <span class="keyword">new</span> <span class="title class_">HashHistory</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;该模式不存在&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">history</span></span><br><span class="line"></span><br><span class="line">    history.<span class="title function_">transitionTo</span>(history.<span class="property">getCurrentLocation</span>, <span class="function">() =&gt;</span></span><br><span class="line"></span><br><span class="line">      history.<span class="title function_">setUpListener</span>()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = install</span><br></pre></td></tr></table></figure>
<h2 id="7-定义一个响应值-route"><a href="#7-定义一个响应值-route" class="headerlink" title="7.定义一个响应值 _route"></a>7.定义一个响应值 _route</h2><blockquote>
<p>渲染不同路由页面有个前提的就是需要一个表示 当前路由 响应式的属性</p>
<p>所以我们来到 <strong>install.js</strong> 添加一个响应式的 属性<strong>_route</strong></p>
<p>和这个无关的代码 <code>...</code>省略</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  _Vue = <span class="title class_">Vue</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property">util</span>.<span class="title function_">defineReactive</span>(<span class="variable language_">this</span>, <span class="string">&#x27;\_route&#x27;</span>, <span class="variable language_">this</span>.\_router.<span class="property">history</span>.<span class="property">current</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后得回到 <strong>history</strong>下面的 <strong>base</strong> 添加一个修改响应式 <strong>_route</strong>的值的回调 <strong>this.cb</strong></p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRoute <span class="keyword">from</span> <span class="string">&#x27;../util/route&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">History</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">transitionTo</span>(<span class="params">path, onComplete</span>) &#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">current</span>)</span><br><span class="line">	...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后在 <strong>index.js</strong> 的 <strong>init</strong> 调用 listen 方法 传入回调修改 响应式值<strong>_route</strong></p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">init</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    history.<span class="title function_">listen</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">_route</span> = route</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="8-添加-router-和-route"><a href="#8-添加-router-和-route" class="headerlink" title="8.添加 $router 和 $route"></a>8.添加 <code>$router</code> 和 <code>$route</code></h2><blockquote>
<p>我们知道在 <strong>Vue Router</strong> 提供了 <strong><code>$router</code></strong> (这个是路由对象是<strong><code>Vue Router</code></strong>的实例) 还有 <strong>$route</strong>(路由规则对象)</p>
<p>我们自己可以来到 <code>install.js</code> 中进行 添加这两个属性</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;$router&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.\_routerRoot.\_router</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;$route&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.\_routerRoot.\_route</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-router-link"><a href="#9-router-link" class="headerlink" title="9.router-link"></a>9.router-link</h2><blockquote>
<p>基本的介绍就不多说了，之前也是有介绍的。然后现在重新来实现下</p>
<p>在 <strong>components</strong> 文件下新建 <strong>link.js</strong></p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">to</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line"></span><br><span class="line">      <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">domProps</span>: &#123;</span><br><span class="line">          <span class="attr">href</span>: <span class="string">&#x27;#&#x27;</span> + <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      \[<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>\]</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-router-view"><a href="#10-router-view" class="headerlink" title="10.router-view"></a>10.router-view</h2><blockquote>
<p>在 <strong>components</strong> 文件下新建 <strong>view.js</strong> 具体步骤干了什么都写在注释里了</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> route = <span class="variable language_">this</span>.<span class="property">$route</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routerView</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (parent) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (parent.<span class="property">routerView</span>) &#123;</span><br><span class="line">        depth++</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      parent = parent.<span class="property">$parent</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> record = route.<span class="property">matched</span>\[depth\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!record) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> component = record.<span class="property">component</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(component)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>好了到了这里 <strong>Vue Router</strong>的第二次编写就完成了，虽然和官方的差距很大。。额，因为这里是简化写的</p>
</blockquote>
<h2 id="11-文件目录"><a href="#11-文件目录" class="headerlink" title="11.文件目录"></a>11.文件目录</h2><blockquote>
<p>忘了最后贴上文件的目录</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3271178c386347b49ab772f2c088bf67~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210723215447677"></p>
<blockquote>
<p>这个模拟<strong>Vue Router</strong>的<strong>demo</strong> 放在了 <strong>github</strong>,有需要的可以这里 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FLianTianNo1%2Fmy_vue_router" title="https://github.com/LianTianNo1/my_vue_router">MyVueRouter</a></p>
<p>到了这里也只是仅仅实现了 <strong>VueRouter</strong>的一小部分功能</p>
<p>但是大体上的功能都差不多实现了，嵌套路由 添加动态路由也实现了</p>
<p>其实我觉得到这里了也可以了,不过还是得继续加油学习</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue Router</tag>
      </tags>
  </entry>
  <entry>
    <title>React 无缝滚动跑马灯组件</title>
    <url>/xiaolangwiki/2022/02/16/14/</url>
    <content><![CDATA[<h2 id="React-无缝滚动跑马灯组件"><a href="#React-无缝滚动跑马灯组件" class="headerlink" title="React 无缝滚动跑马灯组件"></a>React 无缝滚动跑马灯组件</h2><p>最近在做一个电商平台的项目，其中一个需求是在首页顶部展示一些重要的通知公告，比如物流赔付信息、促销活动预告等。为了吸引用户的注意力，UI决定采用跑马灯的形式来展示这些信息，并且要实现无缝滚动，避免出现停顿或跳跃的视觉效果。</p>
<p>由于公司老项目限制，我们没有采用现成的轮播图组件，于是决定自己动手开发一个 React 无缝滚动跑马灯组件。</p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>我们的跑马灯组件需要满足以下几个需求：</p>
<ol>
<li><strong>无缝滚动</strong>: 文案滚动流畅，首尾衔接自然，没有明显的停顿或跳跃。</li>
<li><strong>可配置</strong>: 可以自定义滚动速度、文案内容、字体颜色等样式。</li>
<li><strong>易用</strong>: 使用简单，只需要传入文案数组即可。</li>
</ol>
<h3 id="组件设计与实现"><a href="#组件设计与实现" class="headerlink" title="组件设计与实现"></a>组件设计与实现</h3><h4 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h4><p>实现无缝滚动的关键在于复制第一条文案到最后一条，形成一个循环。当滚动到最后一条文案时，瞬间回到第一条文案，由于视觉上第一条文案已经在最后一条文案后面，所以看起来像是继续滚动，从而达到无缝衔接的效果。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>首先，我们定义了组件的 Props 和 State：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeProps</span> &#123;</span><br><span class="line">    <span class="attr">texts</span>: <span class="built_in">string</span>[]; <span class="comment">// 轮播文案</span></span><br><span class="line">    interval?: <span class="built_in">number</span>; <span class="comment">// 轮播间隔，单位毫秒，默认1000毫秒（每秒滚动一组文案）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeState</span> &#123;</span><br><span class="line">    <span class="attr">translateY</span>: <span class="built_in">number</span>; <span class="comment">// 滚动距离</span></span><br><span class="line">    <span class="attr">currentTextIndex</span>: <span class="built_in">number</span>; <span class="comment">// 当前显示的文案索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在组件的 <code>componentDidMount</code> 生命周期方法中启动定时器，开始滚动：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span> () &#123;</span><br><span class="line">    <span class="comment">// 开始滚动</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">startMarquee</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>startMarquee</code> 方法中，我们使用 <code>setInterval</code> 定时调用 <code>rollAnimation</code> 方法，实现滚动动画：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">rollAnimation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ... 动画逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startMarquee = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; interval = <span class="number">1000</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">marqueeInterval</span> = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">rollAnimation</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), interval);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>rollAnimation</code> 方法中，我们首先复制第一条文案到最后一条，然后计算下一个文案索引和滚动距离，最后更新组件的 State，触发重新渲染：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">rollAnimation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ... 复制文案、计算索引和滚动距离</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">translateY</span>: nextTranslateY,</span><br><span class="line">        <span class="attr">currentTextIndex</span>: nextTextIndex,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在 <code>render</code> 方法中，我们使用 <code>ul</code> 元素来包裹文案列表，并通过 <code>transform: translateY</code> 来实现滚动效果：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;ul</span><br><span class="line">    className=<span class="string">&quot;marquee-content&quot;</span></span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">        <span class="attr">transform</span>: <span class="string">`translateY(<span class="subst">$&#123;translateY&#125;</span>px)`</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    &#123;textsWithFirst.<span class="title function_">map</span>(<span class="function">(<span class="params">text, index</span>) =&gt;</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;marquee-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;text&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    ))&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>为了让滚动效果更加自然，我们还添加了一个渐变遮罩，遮挡住文案列表的上下边缘：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.marquee-mask &#123;</span><br><span class="line">    background-image: linear-gradient(to bottom, #fff 0%, transparent 50%, transparent 50%, #fff 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h3><p>使用起来非常简单，只需要传入文案数组即可：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">SeamlessMarquee</span> texts=&#123;warningArr&#125; interval=&#123;<span class="number">3000</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="源码全览"><a href="#源码全览" class="headerlink" title="源码全览"></a>源码全览</h3><p><strong>SeamlessMarquee.tsx:</strong></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeProps</span> &#123;</span><br><span class="line">    <span class="attr">texts</span>: <span class="built_in">string</span>[]; <span class="comment">// 轮播文案</span></span><br><span class="line">    interval?: <span class="built_in">number</span>; <span class="comment">// 轮播间隔，单位毫秒，默认1000毫秒（每秒滚动一组文案）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeState</span> &#123;</span><br><span class="line">    <span class="attr">translateY</span>: <span class="built_in">number</span>; <span class="comment">// 滚动距离</span></span><br><span class="line">    <span class="attr">currentTextIndex</span>: <span class="built_in">number</span>; <span class="comment">// 当前显示的文案索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeamlessMarquee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;</span><br><span class="line">    <span class="title class_">SeamlessMarqueeProps</span>,</span><br><span class="line">    <span class="title class_">SeamlessMarqueeState</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">    <span class="comment">// 滚动容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">setMarqueeContentRef</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">marqueeInterval</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params"><span class="attr">props</span>: <span class="title class_">SeamlessMarqueeProps</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">translateY</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">currentTextIndex</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span> () &#123;</span><br><span class="line">        <span class="comment">// 开始滚动</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">startMarquee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentWillUnmount</span> () &#123;</span><br><span class="line">        <span class="comment">// 停止滚动</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">marqueeInterval</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * desc 动画逻辑抽离</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> <span class="variable">Lang</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2024-06-04 16:24:17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    rollAnimation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; texts &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制第一个文案到最后一个，实现无缝衔接</span></span><br><span class="line">        <span class="keyword">const</span> textsWithFirst = [...texts, texts[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; currentTextIndex &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="comment">// 计算下一个文案索引</span></span><br><span class="line">        <span class="keyword">const</span> nextTextIndex = (currentTextIndex + <span class="number">1</span>) % textsWithFirst.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算滚动距离</span></span><br><span class="line">        <span class="keyword">const</span> nextTranslateY = nextTextIndex * -<span class="number">36</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果滚动到最后一个文案，需要瞬间回到第一个文案</span></span><br><span class="line">        <span class="keyword">if</span> (currentTextIndex === textsWithFirst.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 瞬间回到第一个文案 - 关闭过渡动画</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">setMarqueeContentRef</span>.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">setMarqueeContentRef</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateY(0)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待回到第一个文案后，再开启过渡动画</span></span><br><span class="line">            <span class="comment">// window.setTimeout 的作用是确保在 translateY 设置为 0 之后，再开启过渡动画，避免视觉上“回拉”的感觉</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 第一个文案在最后一个文案的后面，所以在视觉上已经是第二个文案了</span></span><br><span class="line">                <span class="comment">// 设置第二个文案为当前文案，用于过渡动画</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                    <span class="attr">translateY</span>: -<span class="number">36</span>,</span><br><span class="line">                    <span class="attr">currentTextIndex</span>: <span class="number">1</span>,</span><br><span class="line">                &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">setMarqueeContentRef</span>.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;transform 0.5s&#x27;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">translateY</span>: nextTranslateY,</span><br><span class="line">            <span class="attr">currentTextIndex</span>: nextTextIndex,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始滚动</span></span><br><span class="line">    startMarquee = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; interval = <span class="number">1000</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">marqueeInterval</span> = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">rollAnimation</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), interval);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span> () &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; texts &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123; translateY &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制第一个文案到最后一个，实现无缝衔接</span></span><br><span class="line">        <span class="keyword">const</span> textsWithFirst = [...texts, texts[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;seamless-marquee&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;marquee-mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">className</span>=<span class="string">&quot;marquee-content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">ref</span>=<span class="string">&#123;ref</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                        this.setMarqueeContentRef = ref;</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                    style=&#123;&#123;</span></span><br><span class="line"><span class="language-xml">                        transform: `translateY($&#123;translateY&#125;px)`</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                &gt;</span></span><br><span class="line"><span class="language-xml">                    &#123;textsWithFirst.map((text, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;marquee-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            &#123;text&#125;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    ))&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SeamlessMarquee</span>;</span><br></pre></td></tr></table></figure>
<p><strong>SeamlessMarquee.scss:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.seamless-marquee &#123;</span><br><span class="line">    width: 380px;</span><br><span class="line">    height: 36px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: relative;</span><br><span class="line">    font-size: 12px;</span><br><span class="line"></span><br><span class="line">    .marquee-mask &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        content: &#x27;&#x27;;</span><br><span class="line">        display: block;</span><br><span class="line">        background-image: linear-gradient(to bottom, #fff 0%, transparent 50%, transparent 50%, #fff 100%);</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        z-index: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .marquee-content &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: auto;</span><br><span class="line">        transition: transform .5s;</span><br><span class="line"></span><br><span class="line">        .marquee-item &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            height: 36px;</span><br><span class="line">            line-height: 36px;</span><br><span class="line">            color: #FF4D4A;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，我们成功开发了一个 React 无缝滚动跑马灯组件，满足了项目的需求，并且代码简洁易懂，方便维护。在实际项目中，我们可以根据具体需求，对组件进行进一步的扩展和优化，比如添加自定义样式、暂停/继续滚动等功能。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>跑马灯</tag>
      </tags>
  </entry>
  <entry>
    <title>husky的原理是什么</title>
    <url>/xiaolangwiki/2022/01/09/04/</url>
    <content><![CDATA[<p>一个简化的代码示例,展示 husky 的基本实现原理。这个例子会展示 husky 如何拦截 Git hooks 并执行自定义脚本。请注意,这只是一个概念性的示例,真实的 husky 实现要复杂得多。</p>
<p>以下是一个简化的 JavaScript 代码示例,展示了 husky 的核心原理:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; execSync &#125; = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleHusky</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooksDir</span> = path.<span class="title function_">join</span>(<span class="string">&quot;.git&quot;</span>, <span class="string">&quot;hooks&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = <span class="variable language_">this</span>.<span class="title function_">loadConfig</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载husky配置</span></span><br><span class="line">  <span class="title function_">loadConfig</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> packageJson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> packageJson.<span class="property">husky</span> || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 安装Git hooks</span></span><br><span class="line">  <span class="title function_">install</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(<span class="variable language_">this</span>.<span class="property">hooksDir</span>)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(<span class="variable language_">this</span>.<span class="property">hooksDir</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">hooks</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">hookName</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> hookPath = path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">hooksDir</span>, hookName);</span><br><span class="line">      <span class="keyword">const</span> hookContent = <span class="variable language_">this</span>.<span class="title function_">generateHookScript</span>(hookName);</span><br><span class="line">      fs.<span class="title function_">writeFileSync</span>(hookPath, hookContent, &#123; <span class="attr">mode</span>: <span class="number">0o755</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Husky hooks installed successfully!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成hook脚本</span></span><br><span class="line">  <span class="title function_">generateHookScript</span>(<span class="params">hookName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`#!/bin/sh</span></span><br><span class="line"><span class="string"># Husky</span></span><br><span class="line"><span class="string"># 运行配置的脚本</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;<span class="variable language_">this</span>.config.hooks[hookName]&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 运行hook</span></span><br><span class="line">  <span class="title function_">runHook</span>(<span class="params">hookName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">hooks</span>[hookName];</span><br><span class="line">    <span class="keyword">if</span> (script) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Running <span class="subst">$&#123;hookName&#125;</span> hook...`</span>);</span><br><span class="line">        <span class="title function_">execSync</span>(script, &#123; <span class="attr">stdio</span>: <span class="string">&quot;inherit&quot;</span> &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;hookName&#125;</span> hook completed successfully.`</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;hookName&#125;</span> hook failed. Git operation aborted.`</span>);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> husky = <span class="keyword">new</span> <span class="title class_">SimpleHusky</span>();</span><br><span class="line">husky.<span class="title function_">install</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟触发pre-commit hook</span></span><br><span class="line">husky.<span class="title function_">runHook</span>(<span class="string">&quot;pre-commit&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这个简化的实现展示了 husky 的几个核心概念:</p>
<ol>
<li>配置加载: 从 package.json 文件中读取 husky 配置。</li>
<li>Hook 安装: 在.git/hooks 目录中创建对应的 hook 脚本文件。</li>
<li>Hook 脚本生成: 生成可执行的 shell 脚本,其中包含用户配置的命令。</li>
<li>Hook 执行: 当 Git 操作触发 hook 时,执行相应的脚本。</li>
<li>错误处理: 如果脚本执行失败,则阻止 Git 操作继续进行。</li>
</ol>
<p>使用这个简化版的 husky,你可以在 package.json 中添加类似这样的配置:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint &amp;&amp; npm test&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pre-push&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后,当你尝试提交代码时,它会先运行 lint 和测试,只有在这些检查都通过后,提交才会成功。</p>
<p>请注意,实际的 husky 实现要复杂得多,包括更多的错误处理、跨平台兼容性、与不同版本的 Git 的兼容性等。这个示例仅用于说明基本原理。如果您需要在实际项目中使用,我强烈建议使用官方的 husky 包,因为它经过了充分的测试和优化。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>husky</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员效率大挑战：别让&quot;偶然复杂度&quot;坑了你！</title>
    <url>/xiaolangwiki/2022/02/18/11/</url>
    <content><![CDATA[<h1 id="程序员效率大挑战：别让”偶然复杂度”坑了你！"><a href="#程序员效率大挑战：别让”偶然复杂度”坑了你！" class="headerlink" title="程序员效率大挑战：别让”偶然复杂度”坑了你！"></a>程序员效率大挑战：别让”偶然复杂度”坑了你！</h1><p>嘿，大家好！我是一名22岁的大三计算机系学生，最近读到了一篇超级有意思的文章，讲的是程序员工作效率的问题。说实话，这篇文章真的让我有点震惊，也让我对未来的程序员生涯有了新的认识。我想跟大家分享一下我的想法，希望能给同样即将踏入IT圈的小伙伴们一些启发。</p>
<p>首先，这篇文章提到了一个叫”偶然复杂度”的概念。说白了，就是我们程序员经常忙得要死要活，结果解决的问题根本不是程序本身的问题，而是因为选错了工具或方法导致的额外麻烦。我当时就想，我靠，这不就是在搬起石头砸自己的脚吗？</p>
<p>想想看，我们每天加班加点，以为自己在攻克什么技术难关，结果可能只是在解决自己制造的问题。这就好比你本来要做一道简单的炒饭，结果非要用高压锅，搞得自己手忙脚乱，最后还把厨房炸了（别笑，我室友就干过这种事）。</p>
<p>文章里还说，业界其实有很多提高效率的最佳实践，但问题是这些实践之间没什么明显联系，搞得人很难全面掌握。我听了直呼太真实了！想想我们上课学的那些编程范式、设计模式、敏捷开发…老师讲的时候头头是道，到了实际项目里，我就傻眼了，根本不知道该怎么用。</p>
<p>不过，这篇文章的作者也不是光吐槽，人家给出了四个超实用的原则：以终为始、任务分解、沟通反馈、自动化。乍一看，这四个原则简单得像是小学生都懂的道理。但仔细想想，在实际工作中做到这些，还真不容易。</p>
<p>拿”以终为始”来说吧。我在做课程项目的时候，经常是看到题目就开始狂敲代码，结果写到一半发现理解错题目意思，白忙活一场。如果一开始就花点时间想清楚最终要达到什么效果，再倒推着设计每一步，肯定能少走不少弯路。</p>
<p>“任务分解”这个我倒是有点体会。我大一刚入学的时候，就被老师教导过，要把一个大项目分解成多个小任务，然后每个人负责一个任务。结果我当时就被教导得头头是道，觉得这可真是一件很有意思的事情。后来我参加过一个学校项目，光是看项目描述就觉得头大。但是项目负责人特别厉害，把整个项目分解成一个个小任务，分配给不同班级的学生。结果我们这群素未谋面的人，愣是合作得挺顺畅。</p>
<p>至于”沟通反馈”和”自动化”，老实说，在学校里接触得不多。但我暑假实习的时候，可算是见识到了它们的威力。经常沟通真的能避免很多不必要的返工，而自动化测试和部署，简直是懒人福音啊！要是早点学会这些，指不定我的期末项目能少掉几根头发呢。</p>
<p>不过，文章里也说了，这些原则看着简单，做起来可不容易。比如说，在项目一开始就花大力气做规划和自动化，总觉得是在浪费时间。但是经历过几次”补漏洞”的痛苦之后，我才明白，早做准备真的能省下后面的不少事。</p>
<p>作为一个马上就要进入职场的准程序员，这篇文章给了我一记当头棒喝。它让我意识到，成为一个牛逼的程序员，不只是要会写代码，更重要的是要学会高效工作。我们得学会避开那些自己给自己设的坑，把精力花在真正有价值的问题上。</p>
<p>所以，咱们以后写代码的时候，可得擦亮眼睛啊！别让那个什么”偶然复杂度”把咱们坑了。让我们一起努力，用聪明的方式工作，创造出真正牛逼的软件，改变这个世界！</p>
<p>好了，我的碎碎念就到这里。</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>读书</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>解密10x程序员的思考方式:一个大三学生的领悟</title>
    <url>/xiaolangwiki/2022/07/23/35/</url>
    <content><![CDATA[<h1 id="解密10x程序员的思考方式-一个大三学生的领悟"><a href="#解密10x程序员的思考方式-一个大三学生的领悟" class="headerlink" title="解密10x程序员的思考方式:一个大三学生的领悟"></a>解密10x程序员的思考方式:一个大三学生的领悟</h1><p>大家好,我是一名大三的计算机系学生。最近,我在实习中遇到了一位被同事们称为”10x程序员”的大神。这让我开始思考:到底什么是10x程序员?他们是如何思考的?经过一段时间的观察和学习,我有了一些新的认识,今天就和大家分享一下。</p>
<p>首先,我们得搞清楚什么是10x程序员。简单来说,就是能够创造10倍于普通程序员价值的超级开发者。但这并不意味着他们要比别人多写10倍的代码,而是他们的思考方式和解决问题的能力远超常人。</p>
<p>那么,这些10x程序员是如何思考的呢?</p>
<ol>
<li>系统化思考:降低偶然复杂度</li>
</ol>
<p>记得有一次,我们团队接到一个看似简单的需求:给APP添加一个新的功能按钮。大多数人二话不说就开始coding了,但是我们团队的10x大神却先停下来思考。他说:”等等,我们先来分析一下这个需求背后的真正目的。”</p>
<p>他提出了一个通用的思考框架:</p>
<ul>
<li>第一步:确定现状</li>
<li>第二步:明确目标</li>
<li>第三步:制定实现路径</li>
</ul>
<p>这个框架看似简单,但却能帮助我们快速理清思路,避免陷入不必要的复杂性中。</p>
<ol>
<li>明确真实目标</li>
</ol>
<p>大神并不满足于表面的需求描述。他开始追问产品经理:”这个新功能的真正目标是什么?我们要解决用户的什么痛点?有没有其他方式可以更好地达成这个目标?”</p>
<p>这些问题让我意识到,作为程序员,我们不应该只是一个代码搬运工。我们需要深入理解需求背后的真实目标,这样才能提供最优解决方案。</p>
<ol>
<li>任务分解</li>
</ol>
<p>确定了目标后,大神开始将整个任务分解成小块。他说:”把大象放进冰箱需要三步,我们也要把复杂的任务拆解成可管理的小任务。”</p>
<p>这种方法不仅让整个开发过程变得清晰可控,也方便了团队协作和进度跟踪。</p>
<ol>
<li>加强沟通反馈</li>
</ol>
<p>在开发过程中,大神特别强调沟通的重要性。他经常组织简短的站会,确保每个人都清楚自己的任务和整个项目的进展。</p>
<p>他说:”代码是写给人看的,顺便能在机器上运行。”这句话让我明白了,良好的沟通不仅能提高开发效率,还能降低代码的维护成本。</p>
<ol>
<li>实现自动化</li>
</ol>
<p>最让我惊讶的是,大神总能在短时间内完成看似不可能的任务。他的秘诀就是:自动化。</p>
<p>从代码部署到测试,他都尽可能地实现自动化。他说:”重复的工作交给机器,我们的大脑应该专注于创造性的思考。”</p>
<p>这让我想起了自己曾经熬夜手动部署代码的经历,顿时感觉自己还有很长的路要走。</p>
<ol>
<li>持续学习和反思</li>
</ol>
<p>大神总是在学习新东西。无论是新的编程语言,还是最新的技术趋势,他都保持着强烈的好奇心。</p>
<p>他经常说:”在这个行业,如果你觉得自己已经够厉害了,那就意味着你已经开始落后了。”</p>
<p>这句话深深地触动了我。作为一个即将毕业的学生,我更应该保持学习的热情,不断提升自己。</p>
<p>结语:</p>
<p>通过观察和学习10x程序员的思考方式,我意识到成为一个优秀的程序员不仅仅是技术问题,更重要的是思维方式的转变。</p>
<p>系统化思考、明确目标、任务分解、加强沟通、实现自动化、持续学习,这些原则不仅适用于编程,也适用于我们的学习和生活。</p>
<p>作为一个即将步入职场的准程序员,我决定从现在开始就培养这种思考方式。也许我现在还不是10x程序员,但我相信只要坚持这种思维模式,终有一天我也能成为别人眼中的”大神”。<br>最后,祝大家都能成为10x程序员!</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考方式</tag>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>一个基本的拦截器实现示例：Axios 拦截器</title>
    <url>/xiaolangwiki/2022/01/12/14/</url>
    <content><![CDATA[<h2 id="一个基本的拦截器实现示例："><a href="#一个基本的拦截器实现示例：" class="headerlink" title="一个基本的拦截器实现示例："></a>一个基本的拦截器实现示例：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterceptorManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fulfilled, rejected</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      fulfilled,</span><br><span class="line">      rejected</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eject</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>[id]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handlers</span>[id] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">      <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span><br><span class="line">      <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建 Promise 链</span></span><br><span class="line">    <span class="keyword">let</span> chain = [</span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sending Request:&#x27;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">undefined</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加请求拦截器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">interceptor</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (interceptor !== <span class="literal">null</span>) &#123;</span><br><span class="line">        chain.<span class="title function_">unshift</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加响应拦截器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">interceptor</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (interceptor !== <span class="literal">null</span>) &#123;</span><br><span class="line">        chain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行 Promise 链</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">      promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request Interceptor 1&#x27;</span>);</span><br><span class="line">    config.<span class="property">headers</span> = &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Response Interceptor 1&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">axios.<span class="title function_">request</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Final Response:&#x27;</span>, response))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>
<p>这个简化版本包含了以下关键部分：</p>
<ol>
<li><code>InterceptorManager</code> 类：管理拦截器的添加和移除。</li>
<li><code>Axios</code> 类：包含请求方法和拦截器管理。</li>
<li><code>request</code> 方法：<ul>
<li>创建一个包含实际请求处理函数的初始 Promise 链。</li>
<li>将请求拦截器添加到链的开头。</li>
<li>将响应拦截器添加到链的末尾。</li>
<li>使用 <code>while</code> 循环执行整个 Promise 链。</li>
</ul>
</li>
<li>使用示例：展示了如何添加拦截器和发送请求。</li>
</ol>
<p>这个实现展示了拦截器的基本工作原理：</p>
<ul>
<li>拦截器被存储在数组中。</li>
<li>请求时，创建一个 Promise 链，包含所有拦截器和实际的请求处理。</li>
<li>Promise 链按顺序执行，允许每个拦截器修改请求或响应。</li>
</ul>
<p>实际的 Axios 库更加复杂</p>
<h2 id="拦截器实现的核心"><a href="#拦截器实现的核心" class="headerlink" title="拦截器实现的核心"></a>拦截器实现的核心</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line"><span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">  promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码是拦截器实现的核心，它创建了一个 Promise 链来依次执行所有的拦截器和实际的请求。让我们逐步分析：</p>
<ol>
<li><code>let promise = Promise.resolve(config);</code><ul>
<li>这行创建了一个立即解决（resolve）的 Promise，初始值是 config 对象。</li>
<li>这个 Promise 将作为整个链的起点。</li>
</ul>
</li>
<li><code>while (chain.length) &#123; ... &#125;</code><ul>
<li>这个循环会一直执行，直到 chain 数组为空。</li>
<li>chain 数组包含了所有的拦截器函数和实际的请求处理函数。</li>
</ul>
</li>
<li><code>promise = promise.then(chain.shift(), chain.shift());</code><ul>
<li><code>chain.shift()</code> 移除并返回数组的第一个元素。</li>
<li>这里每次调用 <code>shift()</code> 两次，分别获取成功回调和失败回调。</li>
<li><code>promise.then()</code> 将这两个回调添加到当前 Promise 的后面，形成一个新的 Promise。</li>
<li>新的 Promise 被赋值回 <code>promise</code> 变量，准备下一次循环。</li>
</ul>
</li>
</ol>
<p>工作流程示例：</p>
<p>假设我们有以下拦截器和请求处理函数：</p>
<ul>
<li>请求拦截器 1: requestInterceptor1</li>
<li>请求拦截器 2: requestInterceptor2</li>
<li>实际请求处理: sendRequest</li>
<li>响应拦截器 1: responseInterceptor1</li>
<li>响应拦截器 2: responseInterceptor2</li>
</ul>
<p>初始的 chain 数组可能如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  requestInterceptor2, errorHandler2,</span><br><span class="line">  requestInterceptor1, errorHandler1,</span><br><span class="line">  sendRequest, <span class="literal">undefined</span>,</span><br><span class="line">  responseInterceptor1, errorHandler3,</span><br><span class="line">  responseInterceptor2, errorHandler4</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>循环执行过程：</p>
<ol>
<li>第一次循环：<code>promise.then(requestInterceptor2, errorHandler2)</code></li>
<li>第二次循环：<code>promise.then(requestInterceptor1, errorHandler1)</code></li>
<li>第三次循环：<code>promise.then(sendRequest, undefined)</code></li>
<li>第四次循环：<code>promise.then(responseInterceptor1, errorHandler3)</code></li>
<li>第五次循环：<code>promise.then(responseInterceptor2, errorHandler4)</code></li>
</ol>
<p>这样，通过不断地将拦截器和请求处理函数添加到 Promise 链中，我们创建了一个完整的执行序列，确保了所有操作按照正确的顺序执行。</p>
<p>这种实现方式的优点是：</p>
<ol>
<li>灵活性：可以轻松添加或移除拦截器。</li>
<li>异步支持：每个拦截器都可以是异步的。</li>
<li>错误处理：每个步骤都有相应的错误处理机制。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>从&quot;登录&quot;到&quot;人生&quot;:一个准程序员的&quot;以终为始&quot;领悟</title>
    <url>/xiaolangwiki/2022/09/21/22/</url>
    <content><![CDATA[<h1 id="从”登录”到”人生”-一个准程序员的”以终为始”领悟"><a href="#从”登录”到”人生”-一个准程序员的”以终为始”领悟" class="headerlink" title="从”登录”到”人生”:一个准程序员的”以终为始”领悟"></a>从”登录”到”人生”:一个准程序员的”以终为始”领悟</h1><p>大家好,我是小浪,一个即将毕业的软件工程专业学生。最近在做项目的时候,我突然对”以终为始”这个概念有了全新的认识,感觉整个人都升级了,忍不住想和大家分享一下。</p>
<p>还记得大二那会儿,我们上软件工程课时做过一个设计登录功能的小练习。那时候的我,满脑子都是炫酷的界面设计、花里胡哨的动画效果,甚至还想着加个人脸识别啥的。结果呢?老师看完我的设计后,只说了一句话:”你有考虑过用户真正需要的是什么吗?”</p>
<p>我懵了。是啊,我设计了半天,好像真的没想过用户到底需要什么。这个小小的挫折让我开始思考:我们做事情的时候,是不是应该先想想最终要达到什么效果,而不是一头扎进去就开始干?</p>
<p>后来在实习的时候,我遇到了一个特别厉害的mentor。有一次我们在讨论一个新功能,我又开始滔滔不绝地说起实现方案。他听了一会儿,打断我说:”小浪,先别急着谈怎么做。咱们先想想,如果这个功能做好了,会给用户带来什么样的体验?它会解决用户什么问题?”</p>
<p>这一刻,我仿佛被打开了新世界的大门。原来,真正高明的程序员,不是写代码最快的,而是最懂得思考目标和结果的。</p>
<p>从那以后,我开始尝试用”以终为始”的方式来做事。比如在做毕业设计的时候,我没有急着写代码,而是先花了两周时间去调研用户需求,设想产品上线后的场景。这个过程让我发现了很多之前忽视的细节,最后做出来的作品不仅得到了老师的肯定,还真的解决了一些同学的实际问题。</p>
<p>现在回想起来,我发现”以终为始”其实不只是一种工作方法,更是一种生活态度。它让我学会了在行动之前先思考目标,在忙碌之中不忘初心。</p>
<p>就拿找工作来说吧。很多同学一头扎进各种面试题海里,但我选择先想清楚自己理想的职业发展路径。结果是,虽然我可能刷题没他们多,但在面试的时候能够清晰地表达自己的职业规划,反而得到了面试官的青睐。</p>
<p>当然,实践”以终为始”并不总是容易的。有时候,我也会陷入日常琐事,忘记了最初的目标。但每当我感到迷茫或者压力山大的时候,我就会停下来问自己:”我最终想要达到什么样的结果?”这个简单的问题总能让我重新找到方向。</p>
<p>对于我们这些即将踏入职场的准程序员来说,”以终为始”的思维方式尤为重要。因为我们的工作本质上是在将想象变为现实,如果连自己想要的结果都不清楚,又怎么能写出好的代码呢?</p>
<p>所以,我想对所有和我一样的学弟学妹们说:不要急着埋头苦干,先抬头看看你要到达的方向。无论是学习、工作还是生活,都要先想清楚你想要的结果是什么,然后再规划你的行动。这样,你的每一分努力都不会白费,每一步都会离你的目标更近一些。</p>
<p>最后,我想用我们专业常说的一句话来结束这篇文章:”代码是怎么写的不重要,重要的是它能不能解决问题。”同样,生活也是如此,重要的不是你多么忙碌,而是你是否在朝着自己想要的方向前进。</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>思考</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack模块化原理解析 - 大一新生的前端工程化初探</title>
    <url>/xiaolangwiki/2019/10/19/22/</url>
    <content><![CDATA[<p>webpack模块化原理解析 - 大一新生的前端工程化初探</p>
<p>大家好!我是小浪,一名刚刚踏入大学校园的软件工程专业新生。虽然才大一,但我已经对前端开发产生了浓厚的兴趣。最近,我开始接触前端工程化,尤其是webpack这个强大的工具。说实话,一开始我完全被各种概念和术语搞晕了。不过,经过一段时间的学习和实践,我逐渐理解了webpack的核心思想。今天,我想以一个新手的视角,和大家分享我对webpack模块化原理的理解。</p>
<p>还记得我第一次听说webpack时的情景吗?那是在一次学校的前端技术分享会上。当时,学长们讨论的内容对我来说简直像天书一样。但是,我被他们描述的前端工程化的魅力深深吸引了。于是,我决定要一探究竟!</p>
<p>首先,让我们来理解webpack的核心 - 模块化。作为一个刚接触编程的新手,我很快就意识到,随着项目规模的增大,代码会变得越来越难以管理。这时,模块化就显得尤为重要了。它可以帮助我们更好地组织代码,提高可维护性和复用性。那么,webpack是如何实现模块化的呢?让我们从一个简单的例子开始:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是webpack打包后的简化版本</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">      (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">        <span class="built_in">eval</span>(code);</span><br><span class="line">      &#125;)(<span class="built_in">exports</span>, list[file]);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;index.js&quot;</span>);</span><br><span class="line">  &#125;)(&#123;</span><br><span class="line">    <span class="string">&quot;index.js&quot;</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      var add = require(&#x27;add.js&#x27;).default</span></span><br><span class="line"><span class="string">      console.log(add(1 , 2))</span></span><br><span class="line"><span class="string">          `</span>,</span><br><span class="line">    <span class="string">&quot;add.js&quot;</span>: <span class="string">`exports.default = function(a,b)&#123;return a + b&#125;`</span>,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>看到这段代码,我第一反应也是一脸懵逼。但是别担心,让我们一步步来解析:</p>
<ol>
<li>最外层是一个自执行函数,它接收一个参数<code>list</code>。这个<code>list</code>其实就是我们所有的模块代码。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">&quot;index.js&quot;</span>: <span class="string">`...`</span>,</span><br><span class="line">  <span class="string">&quot;add.js&quot;</span>: <span class="string">`...`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>在这个函数内部,定义了一个<code>require</code>函数。这个函数就是模块加载的核心:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">    <span class="built_in">eval</span>(code);</span><br><span class="line">  &#125;)(<span class="built_in">exports</span>, list[file]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>它创建了一个<code>exports</code>对象,用于存储模块导出的内容</li>
<li>然后用一个匿名函数包裹模块代码,并传入<code>exports</code>对象</li>
<li>使用<code>eval</code>执行模块代码</li>
<li>最后返回<code>exports</code>对象,这就是模块的导出内容</li>
</ul>
<ol>
<li>最后,通过<code>require(&quot;index.js&quot;)</code>启动整个应用。</li>
</ol>
<p>现在,让我们看看<code>index.js</code>和<code>add.js</code>的内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;add.js&#x27;</span>).<span class="property">default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span> , <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a + b&#125;</span><br></pre></td></tr></table></figure>
<p>你看,<code>index.js</code>通过<code>require</code>函数引入了<code>add.js</code>,并使用了它导出的<code>add</code>函数。而<code>add.js</code>则通过<code>exports.default</code>导出了一个函数。</p>
<p>这就是webpack模块化的基本原理!它把每个文件都变成了一个模块,通过<code>require</code>和<code>exports</code>实现了模块间的引用和导出。</p>
<p>当我理解了这个原理后,我感觉整个人都不一样了!突然间,那些看起来很高深的前端工程化概念变得清晰起来。我意识到,webpack不仅仅是一个打包工具,它更像是一个强大的模块管理系统。</p>
<p>作为一个大一新生,我开始在我的小项目中尝试使用webpack。虽然还很简单,但我发现,通过合理的模块划分,我的代码变得更加清晰,也更容易维护了。而且,当我需要添加新功能时,只需要编写新的模块,然后通过<code>require</code>引入,就可以轻松集成到现有项目中。</p>
<p>当然,我知道webpack的功能远不止于此。它还有代码分割、懒加载、热模块替换等高级特性。但是,理解了这个基本原理,我感觉自己已经迈出了理解前端工程化的第一步!</p>
<p>最后,我想对和我一样刚开始学习前端的同学们说:不要被那些看似复杂的技术吓到。每个技术背后都有其核心原理,只要我们肯下功夫去理解,就一定能够掌握。就像我从一个对webpack一无所知的小白,变成了能够理解其原理并在小项目中使用的新手。相信你们也一定可以!</p>
<p>学习是一个渐进的过程,保持好奇心和探索精神,我们就能在编程的道路上越走越远。虽然我们还是大一新生,但只要持续学习和实践,未来的路一定会越来越宽广!</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>模块化</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>从了解到深入虚拟dom和实现diff算法虚拟dom算法</title>
    <url>/xiaolangwiki/2021/07/30/13/</url>
    <content><![CDATA[<h2 id="从了解到深入虚拟DOM和实现diff算法虚拟DOM-和-diff-算法"><a href="#从了解到深入虚拟DOM和实现diff算法虚拟DOM-和-diff-算法" class="headerlink" title="从了解到深入虚拟DOM和实现diff算法虚拟DOM 和 diff 算法"></a>从了解到深入虚拟DOM和实现diff算法虚拟DOM 和 diff 算法</h2><p>原文：<a href="https://juejin.cn/post/6990582632270528525">https://juejin.cn/post/6990582632270528525</a></p>
<blockquote>
<p>前言</p>
</blockquote>
<p><code>虚拟DOM</code> 和 <code>diff</code> 算法 ，大家有的时候就会经常听到，那么它们是什么实现的呢，这是小浪我在学习的 <code>虚拟DOM</code> 和 <code>diff</code> 的时候总结，在这里就来带大家来深入了解 <code>virtual DOM</code> 和 <code>diff</code> 算法，从 <strong>snabbdom</strong> 的基础使用 ,到自己实现一个丐版 <strong>snabbdom</strong>，自己实现 <strong>h函数</strong>(创建虚拟DOM) <strong>patch</strong>函数(通过比较新旧虚拟DOM更新视图)，这里我也画了几个动图 来帮助大家理解 <strong>diff</strong> 的四种优化策略，文章有点长，希望大家耐心阅读，最后会贴出所有代码，大家可以动手试试喔</p>
<p>最后希望大家能给小浪一个 <strong>赞</strong></p>
<blockquote>
<p>往期精彩：</p>
<p><a href="https://juejin.cn/post/6989106100582744072" title="https://juejin.cn/post/6989106100582744072">手写一个简易vue响应式带你了解响应式原理</a></p>
<p><a href="https://juejin.cn/post/6988316779818778631" title="https://juejin.cn/post/6988316779818778631">从使用到自己实现简单Vue Router看这个就行了</a></p>
<p><a href="https://juejin.cn/post/6983934602196811789" title="https://juejin.cn/post/6983934602196811789">前端面试必不可少的基础知识，虽然少但是你不能不知道</a></p>
</blockquote>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><blockquote>
<p><strong>Virtual DOM</strong> 简单的介绍</p>
</blockquote>
<p>是<code>JavaScript</code>按照<code>DOM</code>的结构来创建的虚拟树型结构对象，是对<code>DOM</code>的抽象，比<code>DOM</code>更加轻量型</p>
<blockquote>
<p>为啥要使用<strong>Virtual DOM</strong></p>
</blockquote>
<ul>
<li>当然是前端优化方面，避免频繁操作<code>DOM</code>，频繁操作<code>DOM</code>会可能让浏览器回流和重绘，性能也会非常低，还有就是手动操作 <code>DOM</code> 还是比较麻烦的，要考虑浏览器兼容性问题，当前<code>jQuery</code>等库简化了 <code>DOM</code>操作，但是项目复杂了，<code>DOM</code>操作还是会变得复杂，数据操作也变得复杂</li>
<li>并不是所有情况使用虚拟<code>DOM</code> 都提高性能，是针对在复杂的的项目使用。如果简单的操作，使用虚拟<code>DOM</code>,要创建虚拟<code>DOM</code>对象等等一系列操作，还不如普通的<code>DOM</code> 操作</li>
<li>虚拟<code>DOM</code> 可以实现跨平台渲染，服务器渲染 、小程序、原生应用都使用了虚拟<code>DOM</code></li>
<li>使用虚拟<code>DOM</code>改变了当前的状态不需要立即的去更新<code>DOM</code> 而且更新的内容进行更新，对于没有改变的内容不做任何操作，通过前后两次差异进行比较</li>
<li>虚拟 DOM 可以维护程序的状态，跟踪上一次的状态</li>
</ul>
<h2 id="2-snabbdom-介绍"><a href="#2-snabbdom-介绍" class="headerlink" title="2.snabbdom 介绍"></a>2.snabbdom 介绍</h2><blockquote>
<p>首先来介绍下 snabbdom</p>
</blockquote>
<p>我们要了解虚拟DOM ，那么就先了解它的始祖，也就是 <strong>snabbdom</strong></p>
<p><strong>snabbdom</strong> 是一个开源的项目，<strong>Vue</strong> 里面的 虚拟<strong>DOM</strong> 当初是借鉴了 <strong>snabbdom</strong>,我们可以通过了解<strong>snabbdom</strong> 的虚拟<strong>DOM</strong> 来理解 <strong>Vue</strong> 的虚拟<strong>DOM</strong>,<strong>Vue</strong> 的源码太多，<strong>snabbdom</strong> 比较简洁，所以用它来展开 虚拟 <strong>DOM</strong> 的研究</p>
<p>通过npm 进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install snabbdom</span><br></pre></td></tr></table></figure>
<h3 id="1-snabbdom简单使用"><a href="#1-snabbdom简单使用" class="headerlink" title="1.snabbdom简单使用"></a>1.snabbdom简单使用</h3><blockquote>
<p>下面来写个简单的例子使用下 snabbdom</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>写个 test.js 进行使用</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, init, thunk &#125; <span class="keyword">from</span> <span class="string">&#x27;snabbdom&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patch = <span class="title function_">init</span>(\[\])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode = <span class="title function_">h</span>(<span class="string">&#x27;div#box&#x27;</span>, <span class="string">&#x27;测试&#x27;</span>, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;ul.list&#x27;</span>, \[</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">  \]),</span><br><span class="line">\])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldNode = <span class="title function_">patch</span>(app, vnode)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> vNode = <span class="title function_">h</span>(<span class="string">&#x27;div#box&#x27;</span>, <span class="string">&#x27;重新获取了数据&#x27;</span>, \[</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;ul.list&#x27;</span>, \[</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;通过path判断了差异性&#x27;</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, <span class="string">&#x27;更新了数据&#x27;</span>),</span><br><span class="line">    \]),</span><br><span class="line">  \])</span><br><span class="line"></span><br><span class="line">  <span class="title function_">patch</span>(oldNode, vNode)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93f5b5f17b44461485732581e68afd90~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210726224703891"></p>
<p>可以看见把 虚拟<strong>DOM</strong>更新到了 真实<strong>DOM</strong> ,直接 把之前的 <strong>div#app</strong> 给替换更新了</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33bb43d23ef649e58cca26cf4e6290a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="9"></p>
<p>过了3秒进行对比虚拟<strong>DOM</strong> 的 差异来添加到真实<strong>DOM</strong> ，这里改变了第二个和第三个 <strong>li</strong> 用h函数渲染成虚拟<strong>DOM</strong> 和<strong>oldNode</strong> 不一样所以进行了对比更新</p>
<h3 id="2-介绍下-snabbdom中的模块"><a href="#2-介绍下-snabbdom中的模块" class="headerlink" title="2.介绍下 snabbdom中的模块"></a>2.介绍下 snabbdom中的模块</h3><blockquote>
<p>几个模块 这里简单过一下</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>模块名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>attributes</strong></td>
<td>DOM 自定义属性，包括两个布尔值 <code>checked``selected</code>，通过<code>setAttribute()</code> 设置</td>
</tr>
<tr>
<td><strong>props</strong></td>
<td>是DOM 的 property属性，通过 <code>element\[attr\] = value</code> 设置</td>
</tr>
<tr>
<td><strong>dataset</strong></td>
<td>是 <code>data-</code> 开头的属性 data-src…</td>
</tr>
<tr>
<td><strong>style</strong></td>
<td>行内样式</td>
</tr>
<tr>
<td><strong>eventListeners</strong></td>
<td>用来注册和移除事件</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>有了上面的介绍，那我们就来简单的使用一下</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, init &#125; <span class="keyword">from</span> <span class="string">&#x27;snabbdom&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> attr <span class="keyword">from</span> <span class="string">&#x27;snabbdom/modules/attributes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;snabbdom/modules/style&#x27;</span></span><br><span class="line"><span class="keyword">import</span> eventListeners <span class="keyword">from</span> <span class="string">&#x27;snabbdom/modules/eventlisteners&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patch = <span class="title function_">init</span>(\[attr, style, eventListeners\])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode = <span class="title function_">h</span>(</span><br><span class="line">  <span class="string">&#x27;div#app&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">attrs</span>: &#123;</span><br><span class="line">      <span class="attr">myattr</span>: <span class="string">&#x27;我是自定义属性&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">style</span>: &#123;</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="string">&#x27;29px&#x27;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;skyblue&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">on</span>: &#123;</span><br><span class="line">      <span class="attr">click</span>: clickHandler,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;我是内容&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> elm = <span class="variable language_">this</span>.<span class="property">elm</span></span><br><span class="line">  elm.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  elm.<span class="property">textContent</span> = <span class="string">&#x27;我被点击了&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">patch</span>(app, vnode)</span><br></pre></td></tr></table></figure>
<p>然后再 <code>html</code> 中引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/module_test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>来看看效果</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1875f83c496e4ad282639c099b510ac9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="11"></p>
<p>可以看见的是 自定义属性 ，行内样式 ，点击事件都被 <strong>h()</strong> 渲染出来了</p>
<p>上面的使用都简单地过了一遍，那么我们就来看看 <strong>snabbdom</strong> 中的源码吧</p>
<h2 id="3-虚拟DOM-例子"><a href="#3-虚拟DOM-例子" class="headerlink" title="3.虚拟DOM 例子"></a>3.虚拟DOM 例子</h2><p>说了这么久的 <strong>h()</strong> 函数和 虚拟<strong>DOM</strong> 那么 渲染出来的 虚拟<strong>DOM</strong> 是什么样呢</p>
<blockquote>
<p>真实DOM 结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>转为为 虚拟DOM 之后的结构</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;sel&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;class&quot;</span>: &#123; <span class="string">&quot;container&quot;</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;elm&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;children&quot;</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;elm&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&quot;sel&quot;</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123; <span class="string">&quot;text&quot;</span>: <span class="string">&quot;哈哈&quot;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;elm&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&quot;sel&quot;</span>: <span class="string">&quot;ul&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;class&quot;</span>: &#123; <span class="string">&quot;list&quot;</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;children&quot;</span>: \[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;elm&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="string">&quot;sel&quot;</span>: <span class="string">&quot;li&quot;</span>,</span><br><span class="line">          <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;children&quot;</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;elm&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="string">&quot;sel&quot;</span>: <span class="string">&quot;li&quot;</span>,</span><br><span class="line">          <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;children&quot;</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">      \]</span><br><span class="line">    &#125;</span><br><span class="line">  \]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在之前提到的 <code>snabbdom</code> 中 <code>patch</code>方法</p>
<p>就是对 <strong>新的虚拟DOM</strong> 和 <strong>老的虚拟DOM</strong> 进行<strong>diff</strong>(精细化比较)，找出最小量更新 是在虚拟<strong>DOM</strong> 比较</p>
<p>不可能把所有的 <strong>DOM</strong> 都拆掉 然后全部重新渲染</p>
<h2 id="4-h-函数"><a href="#4-h-函数" class="headerlink" title="4.h 函数"></a>4.h 函数</h2><p>在上面我们体验了<strong>虚拟DOM</strong>的使用 ，那么我们现在来实现一个 丐版的 <strong>snabbdom</strong></p>
<blockquote>
<p>h 函数在介绍下</p>
</blockquote>
<p>在 <strong>snabbdom</strong> 我们也使用了多次的 <strong>h</strong> 函数，主要作用是创建 虚拟节点</p>
<p><strong>snabbdom</strong> 使用 <strong>TS</strong> 编写, 所以 <strong>h</strong> 函数中做了 <strong>方法重载</strong> 使用起来灵活</p>
<p>下面是 <strong>snabbdom</strong> 中 <strong>h</strong> 函数，可以看出 参数的有好几种方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> declare <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">sel: string</span>): <span class="title class_">VNode</span>;</span><br><span class="line"><span class="keyword">export</span> declare <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">sel: string, data: VNodeData</span>): <span class="title class_">VNode</span>;</span><br><span class="line"><span class="keyword">export</span> declare <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">sel: string, children: VNodeChildren</span>): <span class="title class_">VNode</span>;</span><br><span class="line"><span class="keyword">export</span> declare <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">sel: string, data: VNodeData, children: VNodeChildren</span>): <span class="title class_">VNode</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实现 vnode 函数</p>
</blockquote>
<p>在写 <strong>h</strong> 函数之前 先实现 <strong>vnode</strong> 函数，<strong>vnode</strong> 函数要在 <strong>h</strong> 中使用， 其实这个 <strong>vnode</strong> 函数实现功能非常简单 在 <strong>TS</strong> 里面规定了很多类型，不过我这里和之后都是 用 <strong>JS</strong> 去写</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\* 把传入的 参数 作为 对象返回</span><br><span class="line"> \* @param &#123;string&#125; sel 选择器</span><br><span class="line"> \* @param &#123;object&#125; data 数据</span><br><span class="line"> \* @param &#123;array&#125; children 子节点</span><br><span class="line"> \* @param &#123;string&#125; text 文本</span><br><span class="line"> \* @param &#123;dom&#125; elm <span class="variable constant_">DOM</span></span><br><span class="line"> \* @returns object</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">sel, data, children, text, elm</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; sel, data, children, text, elm &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实现简易 h 函数</p>
</blockquote>
<p>这里写的 h 函数 只实现主要功能，没有实现重载，直接实现 3个 参数的 h 函数</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vnode <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;string&#125; a sel</span><br><span class="line"> \* @param &#123;object&#125; b data</span><br><span class="line"> \* @param &#123;any&#125; c 是子节点 可以是文本，数组</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &lt; <span class="number">3</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请检查参数个数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> c === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> c === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(a, b, <span class="literal">undefined</span>, c, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(c)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = \[\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; c.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!(<span class="keyword">typeof</span> c\[i\] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; c\[i\].<span class="property">sel</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;第三个参数为数组时只能传递 h() 函数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      children.<span class="title function_">push</span>(c\[i\])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(a, b, children, <span class="literal">undefined</span>, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> c === <span class="string">&#x27;object&#x27;</span> &amp;&amp; c.<span class="property">sel</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = \[c\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(a, b, children, <span class="literal">undefined</span>, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是不是很简单呢，他说起来也不是递归，像是一种嵌套，不断地收集 <strong>{sel,data,children,text,elm}</strong></p>
<p><strong>chirldren</strong> 里面再套 <strong>{sel,data,children,text,elm}</strong></p>
<blockquote>
<p>举个例子</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">&#x27;./my-snabbdom/h&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode = <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;,</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">  ),</span><br><span class="line">\])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vnode)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/virtualdir/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/942b20c050664ddb82a4073c95198075~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210727204731661"></p>
<p><strong>OK</strong>，写的 <strong>h</strong> 函数没有问题，生成了虚拟<strong>DOM</strong> 树，生成了虚拟 DOM,我们之后 就会用的到</p>
<p>简单说下流程吧</p>
<p>大家都知道<code>js</code> 函数执行，当然是先执行最里面的 函数</p>
<ul>
<li><p>1.<code>h(&#39;li&#39;, &#123;&#125;, &#39;我是一个li&#39;)</code>第一个执行 返回的 <code>&#123;sel,data,children,text,elm&#125;</code> 连续三个 li 都是这个</p>
</li>
<li><p>2.接着就是 <code>h(&#39;ul&#39;, &#123;&#125;, \[\])</code> 进入到了第二个判断是否为数组，然后 把每一项 进行判断是否对象 和 有<strong>sel</strong> 属性，然后添加到 <strong>children</strong> 里面又返回了出去 <code>&#123;sel,data,children,text,elm&#125;</code></p>
</li>
<li><p>3.第三就是执行 <code>h(&#39;div&#39;, &#123;&#125;,h())</code> 了， 第三个参数 直接是 <code>h()</code>函数 = <code>&#123;sel,data,children,text,elm&#125;</code> ，他的 <strong>children</strong> 把他用 <strong>[ ]</strong> 包起来</p>
<p>再返回给 <strong>vnode</strong></p>
</li>
</ul>
<h2 id="5-patch-函数"><a href="#5-patch-函数" class="headerlink" title="5.patch 函数"></a>5.patch 函数</h2><blockquote>
<p>简介</p>
</blockquote>
<p>在 <strong>snabbdom</strong> 中我们 通过 <strong>init()</strong> 返回了一个 <strong>patch</strong> 函数，通过 <strong>patch</strong> 进行吧比较两个 虚拟 DOM 然后添加的 真实的 <strong>DOM</strong> 树上，中间比较就是我们等下要说的 <strong>diff</strong></p>
<p>先来了解下 <strong>patch</strong>里面做了什么</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58f567538c1d4cffa7264cf5467ed271~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210728172052418"></p>
<p>按照上面的流程我们来写个简单的 <strong>patch</strong></p>
<h3 id="1-patch"><a href="#1-patch" class="headerlink" title="1.patch"></a>1.patch</h3><blockquote>
<p>先写个sameVnode</p>
</blockquote>
<p>用来对比两个虚拟<strong>DOM</strong> 的 <strong>key</strong> 和 <strong>sel</strong></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\* 判断两个虚拟节点是否是同一节点</span><br><span class="line"> \* @param &#123;vnode&#125; vnode1 虚拟节点<span class="number">1</span></span><br><span class="line"> \* @param &#123;vnode&#125; vnode2 虚拟节点<span class="number">2</span></span><br><span class="line"> \* @returns boolean</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sameVnode</span>(<span class="params">vnode1, vnode2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (vnode1.<span class="property">data</span> ? vnode1.<span class="property">data</span>.<span class="property">key</span> : <span class="literal">undefined</span>) ===</span><br><span class="line">      (vnode2.<span class="property">data</span> ? vnode2.<span class="property">data</span>.<span class="property">key</span> : <span class="literal">undefined</span>) &amp;&amp; vnode1.<span class="property">sel</span> === vnode2.<span class="property">sel</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>写个基础的patch</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vnode <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;vnode/<span class="variable constant_">DOM</span>&#125; oldVnode</span><br><span class="line"> \* @param &#123;vnode&#125; newVnode</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">oldVnode, newVnode</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldVnode.<span class="property">sel</span>) &#123;</span><br><span class="line"></span><br><span class="line">    oldVnode = <span class="title function_">emptyNodeAt</span>(oldVnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldVnode, newVnode)) &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  newVnode.<span class="property">elm</span> = oldVnode.<span class="property">elm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newVnode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \* 转为 虚拟 <span class="variable constant_">DOM</span></span><br><span class="line"> \* @param &#123;<span class="variable constant_">DOM</span>&#125; elm <span class="variable constant_">DOM</span>节点</span><br><span class="line"> \* @returns &#123;object&#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">emptyNodeAt</span>(<span class="params">elm</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">vnode</span>(elm.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>(), <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, elm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在要处理是否是 同一个虚拟节点的问题</p>
<h3 id="2-createElm"><a href="#2-createElm" class="headerlink" title="2.createElm"></a>2.createElm</h3><blockquote>
<p>先来处理不是同一个虚拟节点</p>
</blockquote>
<p>处理这个我们得去写个 创建节点的方法 这里就放到 <strong>createElm.js</strong> 中完成</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\* 创建元素</span><br><span class="line"> \* @param &#123;vnode&#125; vnode 要创建的节点</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createElm</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">sel</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    vnode.<span class="property">text</span> !== <span class="string">&#x27;&#x27;</span> &amp;&amp;</span><br><span class="line">    (vnode.<span class="property">children</span> === <span class="literal">undefined</span> || vnode.<span class="property">children</span>.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line"></span><br><span class="line">    node.<span class="property">textContent</span> = vnode.<span class="property">text</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode.<span class="property">children</span>) &amp;&amp; vnode.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.<span class="property">children</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> ch = children\[i\]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> chDom = <span class="title function_">createElm</span>(ch)</span><br><span class="line"></span><br><span class="line">      node.<span class="title function_">appendChild</span>(chDom)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vnode.<span class="property">elm</span> = node</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的 <strong>createElm</strong> 就是使用了递归的方式去创建子节点 ，然后我们就去 patch 中 具体的调用这个 创建节点的方法</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vnode <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createElm <span class="keyword">from</span> <span class="string">&#x27;./createElm&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;vnode/<span class="variable constant_">DOM</span>&#125; oldVnode</span><br><span class="line"> \* @param &#123;vnode&#125; newVnode</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">oldVnode, newVnode</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldVnode.<span class="property">sel</span>) &#123;</span><br><span class="line"></span><br><span class="line">    oldVnode = <span class="title function_">emptyNodeAt</span>(oldVnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldVnode, newVnode)) &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="title function_">createElm</span>(newVnode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">elm</span>.<span class="property">parentNode</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> parentNode = oldVnode.<span class="property">elm</span>.<span class="property">parentNode</span></span><br><span class="line"></span><br><span class="line">      parentNode.<span class="title function_">insertBefore</span>(newNode, oldVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">      parentNode.<span class="title function_">removeChild</span>(oldVnode.<span class="property">elm</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  newVnode.<span class="property">elm</span> = oldVnode.<span class="property">elm</span></span><br><span class="line">  <span class="keyword">return</span> newVnode</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在递归添加子节点 到了最后我们在 <strong>patch</strong> 添加到 真实的 <strong>DOM</strong> 中，移除之前的老节点</p>
<p>写到这里了来试试 不同节点 是否真的添加</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">&#x27;./my-snabbdom/h&#x27;</span></span><br><span class="line"><span class="keyword">import</span> patch <span class="keyword">from</span> <span class="string">&#x27;./my-snabbdom/patch&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个p&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个p&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个p&#x27;</span>),</span><br><span class="line">  \]),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123;&#125;, <span class="string">&#x27;我是一个li&#x27;</span>),</span><br><span class="line">\])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldVnode = <span class="title function_">patch</span>(app, vnode)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hellow<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/virtualdir/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6be430ef040d448b8b2b059b4823dfc2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210728164308771"></p>
<p>把 <strong>div#app</strong> 给替换了，并且成功替换</p>
<h3 id="3-patchVnode"><a href="#3-patchVnode" class="headerlink" title="3.patchVnode"></a>3.patchVnode</h3><blockquote>
<p>我们现在来实现同一个虚拟 DOM 的处理</p>
</blockquote>
<p>在 patchVnode 中</p>
<p>步骤都是按照 之前那个流程图进行编写,我们把比较两个<strong>相同</strong>的 虚拟 DOM 代码写在 <strong>patchVnode.js</strong>中</p>
<p>在比较 两个相同的虚拟节点分支 有好几种情况</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createElm <span class="keyword">from</span> <span class="string">&#x27;./createElm&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;vnode&#125; oldVnode 老的虚拟节点</span><br><span class="line"> \* @param &#123;vnode&#125; newVnode 新的虚拟节点</span><br><span class="line"> \* @returns</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patchVnode</span>(<span class="params">oldVnode, newVnode</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同一个虚拟节点&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (oldVnode === newVnode) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newVnode.<span class="property">text</span> &amp;&amp; !newVnode.<span class="property">children</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">text</span> !== newVnode.<span class="property">text</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文字不相同&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      oldVnode.<span class="property">elm</span>.<span class="property">textContent</span> = newVnode.<span class="property">text</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">children</span>) &#123;</span><br><span class="line">      ...这里新旧节点都存在children 这里要使用 updateChildren 下面进行实现</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;old没有children，new有children&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      oldVnode.<span class="property">elm</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> newChildren = newVnode.<span class="property">children</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newChildren.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="title function_">createElm</span>(newChildren\[i\])</span><br><span class="line"></span><br><span class="line">        oldVnode.<span class="property">elm</span>.<span class="title function_">appendChild</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照流程图进行编码，现在要处理 <strong>newVnode</strong> 和 <strong>oldVnode</strong> 都存在 <strong>children</strong> 的情况了</p>
<p>在这里我们要进行精细化比较 也就是我们经常说的 <strong>diff</strong></p>
<h3 id="4-diff"><a href="#4-diff" class="headerlink" title="4.diff"></a>4.diff</h3><p>经常听到的 <strong>diff(精细化比较)</strong> ,那我们先来了解下</p>
<blockquote>
<p>diff四种优化策略</p>
</blockquote>
<p>在这里要使用 4 个指针,从1-4的顺序来开始命中优化策略，命中一个，指针进行移动<code>(新前和旧前向下移动，新后和旧后向上移动)</code>，没有命中，就使用<strong>下一个策略</strong>，如果四个策略都没有命中，只能靠循环来找</p>
<p>命中：两个节点 <strong>sel</strong> 和 <strong>key</strong> 一样</p>
<ol>
<li>新前与旧前</li>
<li>新后与旧后</li>
<li>新后与旧前</li>
<li>新前与旧后</li>
</ol>
<blockquote>
<p>先来说下新增的情况</p>
</blockquote>
<p>四种策略都是在 循环里面执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(旧前&lt;=旧后&amp;&amp;新前&lt;=新后)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5d39847b94f4a3ca1763eb939366ae0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="14"></p>
<p>可以看出 <strong>旧子节点</strong> 先循环完毕，那么说明了新的子节点有需要 新增的 子节点</p>
<p><strong>新前</strong> 和 <strong>新后</strong> 的 节点 就是需要新增的字节</p>
<blockquote>
<p>删除的情况1</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8727f03b28e4dd48d960c73e3b4be85~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="19"></p>
<p>这里新子节点 先循环完毕说明 旧子节点有需要删除的节点</p>
<blockquote>
<p>删除的情况2</p>
</blockquote>
<p>当我们删除多个，而且 4种策略都没有满足，我们得通过 <strong>while</strong> 循环 旧子节点 找到 新子节点需要寻找节点并标记为 <code>undefined</code> 虚拟节点是 <strong>undefined</strong>实际上在 <strong>DOM</strong>已经把它移动了 ,<strong>旧前</strong> 和 <strong>旧后</strong> 之间的节点就是需要删除的节点</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4bc4cbb7093444988b87830f036bba3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="18"></p>
<blockquote>
<p>复杂情况1</p>
</blockquote>
<p>当触发了 第四种 策略，这里就需要移动节点了，旧后指向的节点（在虚拟节点标为 <strong>undefined</strong>），实际把 <strong>新前</strong> 指向的节点 在<strong>DOM</strong> 中 移动到<strong>旧前之前</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99cc589cb22548528139cc46d6498234~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="20"></p>
<blockquote>
<p>复杂情况2</p>
</blockquote>
<p>当触发了 第三种 策略，这里也需要移动节点了，旧前 指向的节点（在虚拟节点标为 <strong>undefined</strong>），实际把 <strong>新后</strong> 指向的节点 在<strong>DOM</strong> 中 移动到<strong>旧后之后</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f9bbbb7afce48da85d76991d7367e80~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="21"></p>
<blockquote>
<p>注意几个点 :</p>
</blockquote>
<ul>
<li><code>h(&#39;li&#39;,&#123;key:&#39;A&#39;&#125; : &quot;A&quot;&#125;)</code> 比如这其中的 key 是这个节点的唯一的标识</li>
<li>它的存在是在告诉 <strong>diff</strong> ,在更改前后它们是同一个<strong>DOM</strong>节点。</li>
<li>只有是<strong>同一个虚拟节点，</strong>才进行精细化比较，否则就是<strong>暴力删除旧的</strong>、插入新的</li>
<li>同一虚拟节点 不仅要 key 相同而且要 选择器相同也就是上面的 <code>h()</code> 函数创建的 虚拟节点 对象里的 <code>sel</code></li>
<li>只进行同层比较，不会进行跨层比较</li>
</ul>
<h3 id="5-updateChildren"><a href="#5-updateChildren" class="headerlink" title="5.updateChildren"></a>5.updateChildren</h3><p>看了上面对于 <strong>diff</strong> 的介绍，不知道我画的图 演示清楚了没，然后我们接着继续来完成 <strong>patchVnode</strong></p>
<p>我们得写个 <strong>updateChildren</strong> 来进行精细化比较</p>
<p>这个文件就是 <strong>diff</strong> 算法的核心，我们用来比较 <strong>oldVnode</strong> 和 <strong>newVnode</strong> 都存在 <strong>children</strong> 的情况</p>
<p>这里有点绕，注释都写了，请耐心观看，流程就是按照 diff 的四种策略来写，还要处理没有命中的情况</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createElm <span class="keyword">from</span> <span class="string">&#x27;./createElm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> patchVnode <span class="keyword">from</span> <span class="string">&#x27;./patchVnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sameVnode <span class="keyword">from</span> <span class="string">&#x27;./sameVnode&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;dom&#125; parentElm 父节点</span><br><span class="line"> \* @param &#123;array&#125; oldCh 旧子节点</span><br><span class="line"> \* @param &#123;array&#125; newCh 新子节点</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">updateChildren</span>(<span class="params">parentElm, oldCh, newCh</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span>,</span><br><span class="line">    newStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh\[<span class="number">0</span>\]</span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh\[oldEndIdx\]</span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh\[<span class="number">0</span>\]</span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh\[newEndIdx\]</span><br><span class="line">  <span class="keyword">let</span> keyMap = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (newStartIdx &lt;= newEndIdx &amp;&amp; oldStartIdx &lt;= oldEndIdx) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---进入diff---&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldCh\[oldStartIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      oldStartVnode = oldCh\[++oldStartIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCh\[oldEndIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      oldEndVnode = oldCh\[--oldEndIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCh\[newStartIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCh\[newEndIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      newEndVnode = newCh\[--newEndIdx\]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newStartVnode)</span><br><span class="line"></span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">      oldStartVnode = oldCh\[++oldStartIdx\]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newEndVnode)</span><br><span class="line"></span><br><span class="line">      newEndVnode = newCh\[--newEndIdx\]</span><br><span class="line">      oldEndVnode = oldCh\[--oldEndIdx\]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newEndVnode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(oldStartVnode.<span class="property">elm</span>, oldEndVnode.<span class="property">elm</span>.<span class="property">nextSibling</span>)</span><br><span class="line"></span><br><span class="line">      newEndVnode = newCh\[--newEndIdx\]</span><br><span class="line">      oldStartVnode = oldCh\[++oldStartIdx\]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newStartVnode)</span><br><span class="line"></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(oldEndVnode.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">      oldEndVnode = oldCh\[--oldEndIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;diff四种优化策略都没命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!keyMap) &#123;</span><br><span class="line"></span><br><span class="line">        keyMap = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = oldStartIdx; i &lt; oldEndIdx; i++) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> key = oldCh\[i\].<span class="property">data</span>.<span class="property">key</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!key) keyMap\[key\] = i</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> idInOld = keyMap\[newStartIdx.<span class="property">data</span>\]</span><br><span class="line">        ? keyMap\[newStartIdx.<span class="property">data</span>.<span class="property">key</span>\]</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (idInOld) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> moveElm = oldCh\[idInOld\]</span><br><span class="line"></span><br><span class="line">        <span class="title function_">patchVnode</span>(moveElm, newStartVnode)</span><br><span class="line"></span><br><span class="line">        oldCh\[idInOld\] = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        parentElm.<span class="title function_">insertBefore</span>(moveElm.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;添加新节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElm</span>(newStartVnode), oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入添加剩余节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> beforeFlag = newCh\[newEndIdx + <span class="number">1</span>\] ? newCh\[newEndIdx + <span class="number">1</span>\] : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = newStartIdx; i &lt;= newEndIdx; i++) &#123;</span><br><span class="line"></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElm</span>(newCh\[i\]), beforeFlag)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartIdx &lt;= oldEndIdx) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入删除多余节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (oldCh\[i\].<span class="property">elm</span>) parentElm.<span class="title function_">removeChild</span>(oldCh\[i\].<span class="property">elm</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到了这里我们基本写都完成了， <strong>h</strong> 函数 创建 虚拟 <strong>DOM</strong> , <strong>patch</strong> 比较 虚拟<strong>DOM</strong> 进行更新视图</p>
<h2 id="6-我们来测试一下写的"><a href="#6-我们来测试一下写的" class="headerlink" title="6.我们来测试一下写的"></a>6.我们来测试一下写的</h2><p>其实在写代码的时候就在不断的调试。。。现在随便测试几个</p>
<h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h3><blockquote>
<p>html</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>策略3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>复杂<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>复杂<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>复杂<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    hellow</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/virtualdir/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>index.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">&#x27;./my-snabbdom/h&#x27;</span></span><br><span class="line"><span class="keyword">import</span> patch <span class="keyword">from</span> <span class="string">&#x27;./my-snabbdom/patch&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;A&#x27;</span> &#125;, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;B&#x27;</span> &#125;, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;D&#x27;</span> &#125;, <span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;E&#x27;</span> &#125;, <span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">\])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldVnode = <span class="title function_">patch</span>(app, vnode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode2 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;E&#x27;</span> &#125;, <span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;D&#x27;</span> &#125;, <span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;B&#x27;</span> &#125;, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;A&#x27;</span> &#125;, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">\])</span><br><span class="line"><span class="keyword">let</span> vnode3 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;E&#x27;</span> &#125;, <span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;D&#x27;</span> &#125;, <span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;A&#x27;</span> &#125;, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;B&#x27;</span> &#125;, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;K&#x27;</span> &#125;, <span class="string">&#x27;K&#x27;</span>),</span><br><span class="line">\])</span><br><span class="line"><span class="keyword">let</span> vnode4 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;A&#x27;</span> &#125;, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;B&#x27;</span> &#125;, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">\])</span><br><span class="line"><span class="keyword">let</span> vnode5 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;E&#x27;</span> &#125;, <span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;V&#x27;</span> &#125;, <span class="string">&#x27;V&#x27;</span>),</span><br><span class="line">\])</span><br><span class="line"><span class="keyword">let</span> vnode6 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;A&#x27;</span> &#125;, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;B&#x27;</span> &#125;, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;D&#x27;</span> &#125;, <span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(</span><br><span class="line">    <span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">key</span>: <span class="string">&#x27;E&#x27;</span> &#125;,</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>, &#123;&#125;, \[</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;A&#x27;</span> &#125;, <span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;B&#x27;</span> &#125;, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;D&#x27;</span> &#125;, <span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;E&#x27;</span> &#125;, <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">key</span>: <span class="string">&#x27;R&#x27;</span> &#125;, <span class="string">&#x27;R&#x27;</span>)),</span><br><span class="line">    \])</span><br><span class="line">  ),</span><br><span class="line">\])</span><br><span class="line"><span class="keyword">let</span> vnodeList = \[vnode2, vnode3, vnode4, vnode5, vnode6\]</span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.btn&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btn.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  btn\[i\].<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">patch</span>(vnode, vnodeList\[i\])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-演示"><a href="#2-演示" class="headerlink" title="2.演示"></a>2.演示</h3><blockquote>
<p>策略3</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f95d637265f4ea894fb0ee36e9c9bdb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="22"></p>
<blockquote>
<p>复杂</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5582ea0aa45e4b05b751e3c54a2b59c9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="23"></p>
<blockquote>
<p>删除</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/246cbf9a6c6749a494e27f0ef5fecbb1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="24"></p>
<blockquote>
<p>复杂</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b351a63e539467598b4e3ff1990bef9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="25"></p>
<blockquote>
<p>复杂（这里是简单 。。）</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff817315ac8c4cacac1dab0330a96e6e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="26"></p>
<h2 id="7-结语"><a href="#7-结语" class="headerlink" title="7.结语"></a>7.结语</h2><p>注释我都写了喔，大家可以对照 我上面画的图不清楚可以反复耐心的看哈</p>
<p>如果看的话没什么感觉，大家可以自己动手写写，下面我会贴出所有的代码</p>
<p>代码同样也放在 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FLianTianNo1%2FVirtual_DOM_demo%2Ftree%2Fmain%2Fsrc%2Fmy-snabbdom" title="https://github.com/LianTianNo1/Virtual_DOM_demo/tree/main/src/my-snabbdom"><strong>github</strong></a></p>
<p>完整代码：</p>
<blockquote>
<p>h.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vnode <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;string&#125; a sel</span><br><span class="line"> \* @param &#123;object&#125; b data</span><br><span class="line"> \* @param &#123;any&#125; c 是子节点 可以是文本，数组</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &lt; <span class="number">3</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请检查参数个数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> c === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> c === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(a, b, <span class="literal">undefined</span>, c, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(c)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = \[\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; c.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!(<span class="keyword">typeof</span> c\[i\] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; c\[i\].<span class="property">sel</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;第三个参数为数组时只能传递 h() 函数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      children.<span class="title function_">push</span>(c\[i\])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(a, b, children, <span class="literal">undefined</span>, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> c === <span class="string">&#x27;object&#x27;</span> &amp;&amp; c.<span class="property">sel</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = \[c\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(a, b, children, <span class="literal">undefined</span>, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>patch.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vnode <span class="keyword">from</span> <span class="string">&#x27;./vnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createElm <span class="keyword">from</span> <span class="string">&#x27;./createElm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> patchVnode <span class="keyword">from</span> <span class="string">&#x27;./patchVnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sameVnode <span class="keyword">from</span> <span class="string">&#x27;./sameVnode&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;vnode/<span class="variable constant_">DOM</span>&#125; oldVnode</span><br><span class="line"> \* @param &#123;vnode&#125; newVnode</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">oldVnode, newVnode</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldVnode.<span class="property">sel</span>) &#123;</span><br><span class="line"></span><br><span class="line">    oldVnode = <span class="title function_">emptyNodeAt</span>(oldVnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldVnode, newVnode)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">patchVnode</span>(oldVnode, newVnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="title function_">createElm</span>(newVnode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">elm</span>.<span class="property">parentNode</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> parentNode = oldVnode.<span class="property">elm</span>.<span class="property">parentNode</span></span><br><span class="line"></span><br><span class="line">      parentNode.<span class="title function_">insertBefore</span>(newNode, oldVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">      parentNode.<span class="title function_">removeChild</span>(oldVnode.<span class="property">elm</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  newVnode.<span class="property">elm</span> = oldVnode.<span class="property">elm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newVnode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \* 转为 虚拟 <span class="variable constant_">DOM</span></span><br><span class="line"> \* @param &#123;<span class="variable constant_">DOM</span>&#125; elm <span class="variable constant_">DOM</span>节点</span><br><span class="line"> \* @returns &#123;object&#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">emptyNodeAt</span>(<span class="params">elm</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">vnode</span>(elm.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>(), <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, elm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>createElm.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\* 创建元素</span><br><span class="line"> \* @param &#123;vnode&#125; vnode 要创建的节点</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createElm</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">sel</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    vnode.<span class="property">text</span> !== <span class="string">&#x27;&#x27;</span> &amp;&amp;</span><br><span class="line">    (vnode.<span class="property">children</span> === <span class="literal">undefined</span> || vnode.<span class="property">children</span>.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line"></span><br><span class="line">    node.<span class="property">textContent</span> = vnode.<span class="property">text</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode.<span class="property">children</span>) &amp;&amp; vnode.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.<span class="property">children</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> ch = children\[i\]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> chDom = <span class="title function_">createElm</span>(ch)</span><br><span class="line"></span><br><span class="line">      node.<span class="title function_">appendChild</span>(chDom)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vnode.<span class="property">elm</span> = node</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>vnode.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\* 把传入的 参数 作为 对象返回</span><br><span class="line"> \* @param &#123;string&#125; sel 选择器</span><br><span class="line"> \* @param &#123;object&#125; data 数据</span><br><span class="line"> \* @param &#123;array&#125; children 子节点</span><br><span class="line"> \* @param &#123;string&#125; text 文本</span><br><span class="line"> \* @param &#123;dom&#125; elm <span class="variable constant_">DOM</span></span><br><span class="line"> \* @returns</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">sel, data, children, text, elm</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; sel, data, children, text, elm &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>patchVnode.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createElm <span class="keyword">from</span> <span class="string">&#x27;./createElm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> updateChildren <span class="keyword">from</span> <span class="string">&#x27;./updateChildren&#x27;</span></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;vnode&#125; oldVnode 老的虚拟节点</span><br><span class="line"> \* @param &#123;vnode&#125; newVnode 新的虚拟节点</span><br><span class="line"> \* @returns</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patchVnode</span>(<span class="params">oldVnode, newVnode</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === newVnode) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newVnode.<span class="property">text</span> &amp;&amp; !newVnode.<span class="property">children</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">text</span> !== newVnode.<span class="property">text</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文字不相同&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      oldVnode.<span class="property">elm</span>.<span class="property">textContent</span> = newVnode.<span class="property">text</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">children</span>) &#123;</span><br><span class="line">      <span class="title function_">updateChildren</span>(oldVnode.<span class="property">elm</span>, oldVnode.<span class="property">children</span>, newVnode.<span class="property">children</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;old没有children，new有children&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      oldVnode.<span class="property">elm</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> newChildren = newVnode.<span class="property">children</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newChildren.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="title function_">createElm</span>(newChildren\[i\])</span><br><span class="line"></span><br><span class="line">        oldVnode.<span class="property">elm</span>.<span class="title function_">appendChild</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>sameVnode.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\* 判断两个虚拟节点是否是同一节点</span><br><span class="line"> \* @param &#123;vnode&#125; vnode1 虚拟节点<span class="number">1</span></span><br><span class="line"> \* @param &#123;vnode&#125; vnode2 虚拟节点<span class="number">2</span></span><br><span class="line"> \* @returns boolean</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sameVnode</span>(<span class="params">vnode1, vnode2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (vnode1.<span class="property">data</span> ? vnode1.<span class="property">data</span>.<span class="property">key</span> : <span class="literal">undefined</span>) ===</span><br><span class="line">      (vnode2.<span class="property">data</span> ? vnode2.<span class="property">data</span>.<span class="property">key</span> : <span class="literal">undefined</span>) &amp;&amp; vnode1.<span class="property">sel</span> === vnode2.<span class="property">sel</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>updateChildren.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createElm <span class="keyword">from</span> <span class="string">&#x27;./createElm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> patchVnode <span class="keyword">from</span> <span class="string">&#x27;./patchVnode&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sameVnode <span class="keyword">from</span> <span class="string">&#x27;./sameVnode&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \*</span><br><span class="line"> \* @param &#123;dom&#125; parentElm 父节点</span><br><span class="line"> \* @param &#123;array&#125; oldCh 旧子节点</span><br><span class="line"> \* @param &#123;array&#125; newCh 新子节点</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">updateChildren</span>(<span class="params">parentElm, oldCh, newCh</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span>,</span><br><span class="line">    newStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh\[<span class="number">0</span>\]</span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh\[oldEndIdx\]</span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh\[<span class="number">0</span>\]</span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh\[newEndIdx\]</span><br><span class="line">  <span class="keyword">let</span> keyMap = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (newStartIdx &lt;= newEndIdx &amp;&amp; oldStartIdx &lt;= oldEndIdx) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---进入diff---&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldCh\[oldStartIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      oldStartVnode = oldCh\[++oldStartIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldCh\[oldEndIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      oldEndVnode = oldCh\[--oldEndIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCh\[newStartIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newCh\[newEndIdx\] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      newEndVnode = newCh\[--newEndIdx\]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newStartVnode)</span><br><span class="line"></span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">      oldStartVnode = oldCh\[++oldStartIdx\]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newEndVnode)</span><br><span class="line"></span><br><span class="line">      newEndVnode = newCh\[--newEndIdx\]</span><br><span class="line">      oldEndVnode = oldCh\[--oldEndIdx\]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newEndVnode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(oldStartVnode.<span class="property">elm</span>, oldEndVnode.<span class="property">elm</span>.<span class="property">nextSibling</span>)</span><br><span class="line"></span><br><span class="line">      newEndVnode = newCh\[--newEndIdx\]</span><br><span class="line">      oldStartVnode = oldCh\[++oldStartIdx\]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newStartVnode)</span><br><span class="line"></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(oldEndVnode.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">      oldEndVnode = oldCh\[--oldEndIdx\]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;diff四种优化策略都没命中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!keyMap) &#123;</span><br><span class="line"></span><br><span class="line">        keyMap = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = oldStartIdx; i &lt; oldEndIdx; i++) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> key = oldCh\[i\].<span class="property">data</span>.<span class="property">key</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!key) keyMap\[key\] = i</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> idInOld = keyMap\[newStartIdx.<span class="property">data</span>\]</span><br><span class="line">        ? keyMap\[newStartIdx.<span class="property">data</span>.<span class="property">key</span>\]</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (idInOld) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> moveElm = oldCh\[idInOld\]</span><br><span class="line"></span><br><span class="line">        <span class="title function_">patchVnode</span>(moveElm, newStartVnode)</span><br><span class="line"></span><br><span class="line">        oldCh\[idInOld\] = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        parentElm.<span class="title function_">insertBefore</span>(moveElm.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;添加新节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElm</span>(newStartVnode), oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      newStartVnode = newCh\[++newStartIdx\]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入添加剩余节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> beforeFlag = newCh\[newEndIdx + <span class="number">1</span>\] ? newCh\[newEndIdx + <span class="number">1</span>\] : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = newStartIdx; i &lt;= newEndIdx; i++) &#123;</span><br><span class="line"></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElm</span>(newCh\[i\]), beforeFlag)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartIdx &lt;= oldEndIdx) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入删除多余节点&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (oldCh\[i\].<span class="property">elm</span>) parentElm.<span class="title function_">removeChild</span>(oldCh\[i\].<span class="property">elm</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
        <tag>虚拟DOM</tag>
        <tag>diff算法</tag>
      </tags>
  </entry>
  <entry>
    <title>小浪的C盘大作战：用软链接拯救濒临崩溃的电脑</title>
    <url>/xiaolangwiki/2019/11/06/12/</url>
    <content><![CDATA[<h2 id="小浪的C盘大作战：用软链接拯救濒临崩溃的电脑"><a href="#小浪的C盘大作战：用软链接拯救濒临崩溃的电脑" class="headerlink" title="小浪的C盘大作战：用软链接拯救濒临崩溃的电脑"></a>小浪的C盘大作战：用软链接拯救濒临崩溃的电脑</h2><p>大家好,我是小浪,一个23岁的软件工程专业大一学生。最近,我遇到了一个让我头疼不已的问题——我的笔记本电脑C盘快要爆炸了!作为一个喜欢尝试各种新软件的极客,我的C盘总是很快就被填满。今天,我要和大家分享我是如何用软链接这个神奇的工具来解救我的C盘的。</p>
<p>故事是这样的：前几天,我正准备下载一个新的游戏,突然收到了系统警告:C盘空间不足。我看了看,居然只剩下不到1GB的空间了!我慌了,因为马上就要开始一个重要的编程项目,电脑要是出问题就糟糕了。</p>
<p>我尝试了各种常规的清理方法:删除临时文件、卸载不用的软件、甚至把一些文件移动到D盘。但是效果不太理想,C盘空间还是很紧张。正当我一筹莫展时,我想起了操作系统课上老师曾经提到过的一个概念——软链接。</p>
<p>经过一番研究,我发现软链接简直就是为我这种情况量身定制的解决方案!它可以让我把一些占用大量空间的文件夹”转移”到其他盘,同时保持原来的路径不变,简直太棒了!</p>
<p>下面,我来一步步教大家如何使用软链接来拯救濒临崩溃的C盘:</p>
<p>步骤1：找出占用空间最大的文件夹<br>首先,我们需要找出C盘中占用空间最大的文件夹。在我的电脑上,我发现 <code>C:\Users\小浪\AppData\Local\Microsoft\Windows\WER</code> 这个文件夹占用了将近10GB的空间。这个文件夹存储的是Windows错误报告,可以安全地移动到其他盘。</p>
<p>步骤2：准备目标路径<br>我决定在D盘创建一个新的文件夹来存储这些文件。</p>
<ul>
<li>源路径：<code>C:\Users\小浪\AppData\Local\Microsoft\Windows\WER</code></li>
<li>目标路径：<code>D:\Backups\Windows\WER</code></li>
</ul>
<p>步骤3：移动文件<br>在进行下一步之前,我们需要先把文件移动到新位置。打开命令提示符(以管理员身份运行),输入以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir &quot;D:\Backups\Windows&quot;</span><br><span class="line">move &quot;C:\Users\小浪\AppData\Local\Microsoft\Windows\WER&quot; &quot;D:\Backups\Windows\WER&quot;</span><br></pre></td></tr></table></figure>
<p>这里的代码解释如下:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir &quot;新文件夹路径&quot;  # 创建新的文件夹</span><br><span class="line">move &quot;源路径&quot; &quot;目标路径&quot;  # 移动文件夹</span><br></pre></td></tr></table></figure></p>
<p>步骤4：创建软链接<br>现在,我们来创建软链接。在同一个命令提示符窗口中,输入以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mklink /D &quot;C:\Users\小浪\AppData\Local\Microsoft\Windows\WER&quot; &quot;D:\Backups\Windows\WER&quot;</span><br></pre></td></tr></table></figure>
<p>这里的代码解释如下:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mklink /D &quot;链接路径&quot; &quot;目标路径&quot;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>mklink</code>: Windows系统用于创建符号链接的命令</li>
<li><code>/D</code>: 表示我们要创建一个目录的符号链接</li>
<li><code>&quot;链接路径&quot;</code>: 原来的路径,也是我们要创建链接的地方</li>
<li><code>&quot;目标路径&quot;</code>: 我们实际存储文件的新路径</li>
</ul>
<p>步骤5：验证软链接是否创建成功<br>你可以在文件资源管理器中查看 <code>C:\Users\小浪\AppData\Local\Microsoft\Windows\</code> 目录,应该能看到一个箭头图标的WER文件夹,这就说明软链接创建成功了。</p>
<p>步骤6：测试<br>重启电脑,然后检查C盘空间是否增加了。你会惊喜地发现,C盘空间一下子就空出了10GB!</p>
<p>通过这个方法,我不仅解决了C盘空间不足的问题,还学会了一个非常实用的技能。之后,我又用同样的方法处理了其他一些大文件夹,最终为C盘释放了将近30GB的空间!</p>
<p>使用软链接时,要注意以下几点:</p>
<ol>
<li>总是使用管理员权限执行mklink命令。</li>
<li>在移动文件和创建链接之前,最好先备份重要数据。</li>
<li>不要随意删除或移动已经创建了软链接的文件夹,这可能会导致系统出错。</li>
<li>定期检查链接是否正常工作。</li>
</ol>
<p>软链接不仅可以用于节省C盘空间,还有很多其他有趣的应用。比如,你可以用它来组织你的项目文件,或者管理游戏存档。掌握了这个技能,你就多了一个强大的工具来管理你的文件系统。</p>
<p>希望我的经历和这个教程能对你有所帮助。记住,在遇到问题时不要慌张,仔细思考,总会有解决的方法。作为未来的软件工程师,我们要学会用技术的方法来解决生活中的各种问题。</p>
]]></content>
      <categories>
        <category>电脑</category>
      </categories>
      <tags>
        <tag>软链接</tag>
        <tag>C盘</tag>
        <tag>电脑</tag>
        <tag>清理C盘</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始 一步步学习微前端</title>
    <url>/xiaolangwiki/2023/02/27/54/</url>
    <content><![CDATA[<h2 id="从零开始，一步步学习微前端"><a href="#从零开始，一步步学习微前端" class="headerlink" title="从零开始，一步步学习微前端"></a>从零开始，一步步学习微前端</h2><p>原文：<a href="https://juejin.cn/post/7204723936914554937">https://juejin.cn/post/7204723936914554937</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在实习的这段时间接触了很多新东西，比如微前端就是其中之一，在这里小浪就来聊聊微前端中的 qiankun 框架</p>
</blockquote>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><h3 id="1-1-为什么需要微前端"><a href="#1-1-为什么需要微前端" class="headerlink" title="1.1 为什么需要微前端"></a>1.1 为什么需要微前端</h3><blockquote>
<p>当我们开发大型的前端应用时，通常需要将应用拆分成多个子应用进行开发和维护。这时候微前端就显得尤为重要。微前端是一种架构模式，它将前端应用程序拆分成多个更小的、相对独立的部分，每个部分都可以独立开发、测试、部署和扩展。在微前端架构中，每个子应用都是一个独立的应用程序，可以独立部署和运行。这样，我们就可以将前端应用程序的开发、测试、部署和维护工作分解成多个更小的任务，提高应用程序的可维护性和可扩展性。微前端的实现方式有多种，其中比较常见的方式是通过 iframe、Web Components 或者 JavaScript 模块加载器来实现子应用的隔离和独立运行。通过这些方式，不同的子应用之间可以互相独立、互相通信，从而实现一个完整的前端应用程序。</p>
</blockquote>
<h3 id="1-2-如何判断自己的项目需要使用微前端"><a href="#1-2-如何判断自己的项目需要使用微前端" class="headerlink" title="1.2 如何判断自己的项目需要使用微前端"></a>1.2 如何判断自己的项目需要使用微前端</h3><ol>
<li>项目功能逐渐增多，代码规模庞大，导致代码维护和开发效率低下；</li>
<li>项目需要集成多个不同技术栈的模块或服务；</li>
<li>团队成员分散，各自负责开发不同的模块或服务，需要实现独立开发和部署；</li>
<li>项目需要支持独立的生命周期管理和版本控制；</li>
<li>需要实现高可用性和弹性伸缩；</li>
<li>需要实现动态加载和卸载子应用等场景。</li>
</ol>
<blockquote>
<p>所以呢，小浪觉得如果项目具有上面这些特点，那么可以考虑使用微前端来优化项目架构和提升开发效率。</p>
</blockquote>
<h3 id="1-3-主应用和子应用"><a href="#1-3-主应用和子应用" class="headerlink" title="1.3 主应用和子应用"></a>1.3 主应用和子应用</h3><blockquote>
<p><code>qiankun</code> 官网地址是：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fqiankun.umijs.org%2F%25E3%2580%2582" title="https://qiankun.umijs.org/%E3%80%82">qiankun.umijs.org/</a></p>
<p>官网的例子和教程都很详细，更新速度也快，大家想具体使用的可以去官网查阅</p>
</blockquote>
<p><code>qiankun</code> 是一个基于 Single-SPA 的微前端解决方案，它提供了一种轻量级的前端架构，可以将多个子应用整合成一个整体应用。<code>qiankun</code> 的架构包含两个主要的角色：</p>
<ul>
<li>主应用（Master Application）：负责整个应用的框架搭建、路由分发和子应用的注册和协调管理。</li>
<li>子应用（Micro Application）：独立开发的前端应用程序，可以独立运行，也可以作为主应用的一个子模块运行。</li>
</ul>
<h3 id="1-4-qiankun-的特点"><a href="#1-4-qiankun-的特点" class="headerlink" title="1.4 qiankun 的特点"></a>1.4 qiankun 的特点</h3><p><code>qiankun</code> 的主要特点包括：</p>
<ul>
<li>完备的生命周期管理：<code>qiankun</code> 提供了完备的子应用生命周期管理方案，可以自动加载、启动、挂载、卸载和卸载子应用。</li>
<li>灵活的应用路由分发：<code>qiankun</code> 提供了灵活的路由分发方案，可以自定义路由匹配规则，可以通过主应用的路由来匹配子应用的路由。</li>
<li>独立的应用状态管理：<code>qiankun</code> 提供了独立的状态管理方案，每个子应用都可以独立管理自己的状态，主应用可以通过 props 方式传递数据给子应用，也可以通过事件总线的方式进行通信。</li>
</ul>
<h3 id="1-5-如何使用微前端"><a href="#1-5-如何使用微前端" class="headerlink" title="1.5 如何使用微前端"></a>1.5 如何使用微前端</h3><p>在使用 <code>qiankun</code> 构建微前端应用时，我们需要按照以下步骤进行：</p>
<ol>
<li>创建主应用：主应用负责整个应用的框架搭建、路由分发和子应用的注册和协调管理。可以使用任何前端框架进行开发，例如 React、Vue、Angular 等。</li>
<li>创建子应用：子应用是独立开发的前端应用程序，可以独立运行，也可以作为主应用的一个子模块运行。每个子应用都可以使用任何前端框架进行开发，例如 React、Vue、Angular 等。</li>
<li>注册子应用：主应用需要在启动时注册所有的子应用。注册时需要指定子应用的名称、访问地址、加载方式和路由配置等信息。</li>
<li>启动子应用：主应用在启动时会自动加载和启动所有的子应用，每个子应用会根据配置的访问地址自动加载。</li>
<li>协调子应用：主应用需要协调管理所有的子应用，包括子应用的加载、启动、挂载、卸载和卸载等操作。主应用可以通过 props 方式传递数据给子应用，也可以通过事件总线的方式进行通信。</li>
<li>卸载子应用：当子应用不再需要时，主应用可以卸载子应用并释放资源，以提高系统的性能和稳定性。</li>
</ol>
<p>除此之外，<code>qiankun</code> 还提供了多种高级特性，例如异步加载、公共依赖、样式隔离、缓存优化等，可以进一步提高应用程序的性能和可维护性。</p>
<h2 id="2-使用qiankun搭建例子："><a href="#2-使用qiankun搭建例子：" class="headerlink" title="2.使用qiankun搭建例子："></a>2.使用<code>qiankun</code>搭建例子：</h2><p>这里举一个 demo 例子，大家如果感兴趣可以按照小浪这样来进行搭建 一个简单的 <code>qiankun</code> 实例 demo</p>
<ul>
<li>主应用使用 React</li>
<li>子应用 1 使用 Vue 3</li>
<li>子应用 2 使用 React</li>
</ul>
<h3 id="2-1-创建主应用"><a href="#2-1-创建主应用" class="headerlink" title="2.1 创建主应用"></a>2.1 创建主应用</h3><p>首先需要创建主应用，我们使用 create-react-app 快速创建一个 React 应用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx create-react-app qiankun-example</span><br></pre></td></tr></table></figure>
<p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd qiankun-example</span><br><span class="line">npm install qiankun</span><br></pre></td></tr></table></figure>
<p>修改主应用入口文件 src/index.js，加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apps = \[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;vue3&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8081&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#subapp-viewport&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/vue3&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;react-app&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8082&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#subapp-viewport&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/react-app&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">\];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>(apps);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>
<p>在上面小浪首先定义了两个子应用，分别是 <code>Vue 3</code> 应用和 <code>React</code> 应用。然后通过 <code>registerMicroApps</code> 函数注册子应用，启动 <code>qiankun</code>。</p>
<h3 id="2-2-创建子应用-1：Vue-3"><a href="#2-2-创建子应用-1：Vue-3" class="headerlink" title="2.2 创建子应用 1：Vue 3"></a>2.2 创建子应用 1：Vue 3</h3><p>在主应用中我们定义了一个名为 <code>vue3</code> 的子应用，需要先创建子应用的代码。在 <code>vue-cli</code> 中创建一个 <code>Vue 3</code> 应用(大家也可以用<code>vite</code>搭建，这里我用<code>vue-cli</code>)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create subapp-vue3</span><br></pre></td></tr></table></figure>
<p>安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd subapp-vue3</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>修改 src/main.js，加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  instance = <span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  instance.$destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面小浪定义了子应用的渲染函数，用于在主应用中渲染子应用。在开发环境下直接渲染，而在生产环境下则通过导出 <code>bootstrap</code>、<code>mount</code> 和 <code>unmount</code> 函数，由 <code>qiankun</code> 调用。</p>
<h3 id="2-3-创建子应用-2：React-应用"><a href="#2-3-创建子应用-2：React-应用" class="headerlink" title="2.3 创建子应用 2：React 应用"></a>2.3 创建子应用 2：React 应用</h3><p>我们需要先创建 React 应用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx create-react-app subapp-react</span><br></pre></td></tr></table></figure>
<p>安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd subapp-react</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>修改 src/index.js，加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  instance.$destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里同样定义了子应用的渲染函数，用于在主应用中渲染子应用。在开发环境下直接渲染，而在生产环境下则通过导出 <code>bootstrap</code>、<code>mount</code> 和 <code>unmount</code> 函数，由 <code>qiankun</code> 调用。</p>
<h3 id="2-4-启动应用"><a href="#2-4-启动应用" class="headerlink" title="2.4 启动应用"></a>2.4 启动应用</h3><p>我们需要分别启动主应用和两个子应用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">启动主应用</span><br><span class="line">cd qiankun-example</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line">\# 启动 Vue 3 子应用</span><br><span class="line">cd subapp-vue3</span><br><span class="line">npm run serve -- --port 8081</span><br><span class="line"></span><br><span class="line">\# 启动 React 子应用</span><br><span class="line">cd subapp-react</span><br><span class="line">npm start -- --port 8082</span><br></pre></td></tr></table></figure>
<p>然后在浏览器中访问 <strong>[<a href="http://localhost:3000">http://localhost:3000</a></strong>，即可看到主应用的页面。在主应用中点击“Vue](<a href="https://link.juejin.cn/?target=http%3A%2F%2Flocalhost%3A3000**%25EF%25BC%258C%25E5%258D%25B3%25E5%258F%25AF%25E7%259C%258B%25E5%2588%25B0%25E4%25B8%25BB%25E5%25BA%2594%25E7%2594%25A8%25E7%259A%2584%25E9%25A1%25B5%25E9%259D%25A2%25E3%2580%2582%25E5%259C%25A8%25E4%25B8%25BB%25E5%25BA%2594%25E7%2594%25A8%25E4%25B8%25AD%25E7%2582%25B9%25E5%2587%25BB%25E2%2580%259CVue">https://link.juejin.cn/?target=http%3A%2F%2Flocalhost%3A3000**%25EF%25BC%258C%25E5%258D%25B3%25E5%258F%25AF%25E7%259C%258B%25E5%2588%25B0%25E4%25B8%25BB%25E5%25BA%2594%25E7%2594%25A8%25E7%259A%2584%25E9%25A1%25B5%25E9%259D%25A2%25E3%2580%2582%25E5%259C%25A8%25E4%25B8%25BB%25E5%25BA%2594%25E7%2594%25A8%25E4%25B8%25AD%25E7%2582%25B9%25E5%2587%25BB%25E2%2580%259CVue</a> “<a href="http://localhost:3000\*\*%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E4%B8%BB%E5%BA%94%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82%E5%9C%A8%E4%B8%BB%E5%BA%94%E7%94%A8%E4%B8%AD%E7%82%B9%E5%87%BB%E2%80%9CVue">http://localhost:3000\*\*%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E4%B8%BB%E5%BA%94%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82%E5%9C%A8%E4%B8%BB%E5%BA%94%E7%94%A8%E4%B8%AD%E7%82%B9%E5%87%BB%E2%80%9CVue</a>“) 3”或“React App”按钮，即可跳转到对应的子应用页面。在子应用页面中修改内容，可以看到主应用中的内容也随之变化。</p>
<h4 id="子应用中需要引入-qiankun："><a href="#子应用中需要引入-qiankun：" class="headerlink" title="子应用中需要引入 qiankun："></a>子应用中需要引入 <code>qiankun</code>：</h4><p>注意：在子应用中需要引入 <code>qiankun</code> 库，在 <code>Vue 3</code> 应用中需要安装 <code>qiankun</code>，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install qiankun</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>(\[...\]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>
<p>React 子应用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>(\[...\]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>
<p><code>registerMicroApps(\[...\])</code> 中的 […] 是一个数组，其中包含了注册的子应用的配置信息，每个配置项是一个对象，至少包含以下几个属性:</p>
<ul>
<li><code>name</code>：子应用的名称，需要保证唯一性。</li>
<li><code>entry</code>：子应用的入口 URL。</li>
<li><code>container</code>：子应用渲染的容器，通常是一个 DOM 元素或一个选择器。</li>
<li><code>activeRule</code>：子应用的激活规则，指定该子应用应该在哪些 URL 下被激活。</li>
</ul>
<p>例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">registerMicroApps</span>(\[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;vue3&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8081&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#vue3&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/vue3&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8082&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#react&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/react&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">\]);</span><br></pre></td></tr></table></figure>
<p>以上代码注册了两个子应用 一个是 Vue 3 应用，一个是 React 应用。</p>
<ol>
<li><code>name</code> 分别为 ‘vue3’ 和 ‘react’，</li>
<li><code>entry</code> 分别为 ‘//localhost:8081’ 和 ‘//localhost:8082’，</li>
<li><code>container</code> 分别为 ‘#vue3’ 和 ‘#react’，</li>
<li><code>activeRule</code> 分别为 ‘/vue3’ 和 ‘/react’。</li>
</ol>
<p>注意</p>
<p>1.<code>entry</code> 属性的值应该是子应用的访问 URL，可以是本地开发服务器的地址，也可以是部署到服务器上的地址。<code>container</code> 属性的值可以是一个 DOM 元素，也可以是一个选择器字符串。在子应用中，渲染组件时需要将组件挂载到该容器中。<code>activeRule</code> 属性的值是一个路径匹配规则，表示子应用应该在哪些 URL 下被激活，可以是字符串或正则表达式。如果当前 URL 匹配了该规则，则该子应用会被激活。</p>
<p>2.子应用中也需要写 <code>registerMicroApps(\[...\])</code> 来注册子应用。不同之处在于，子应用注册时需要指定一些配置项，以便于在主应用中正确加载和管理子应用。 在子应用中，通常会将 <code>registerMicroApps(\[...\])</code> 封装成一个函数，以便于主应用加载子应用时调用该函数注册子应用。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initApp</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">registerMicroApps</span>(\[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;vue3&#x27;</span>,</span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8081&#x27;</span>,</span><br><span class="line">      <span class="attr">container</span>: <span class="string">&#x27;#vue3&#x27;</span>,</span><br><span class="line">      <span class="attr">activeRule</span>: <span class="string">&#x27;/vue3&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  \]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">initApp</span>();</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">window</span>.\_\_POWERED\_BY\_QIANKUN\_\_) &#123;</span><br><span class="line">  <span class="title function_">bootstrap</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="title function_">bootstrap</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，register() 函数用来注册子应用，其中的配置项与主应用中的相同。bootstrap() 函数用来启动子应用，其中包含了初始化和渲染等过程。mount() 函数用来作为子应用加载时的入口，其中包含了注册、初始化、渲染等过程。unmount() 函数用来作为子应用卸载时的入口，其中包含了销毁子应用的过程。需要注意的是，如果子应用是独立运行的，即非通过主应用加载的，那么直接调用 bootstrap() 启动子应用即可。</p>
<h3 id="2-5-全局状态管理"><a href="#2-5-全局状态管理" class="headerlink" title="2.5 全局状态管理"></a>2.5 全局状态管理</h3><p>主应用可以通过 <code>setGlobalState</code> 方法来设置全局状态，子应用可以通过 <code>onGlobalStateChange</code> 方法来监听全局状态的变化。这样，当主应用修改了全局状态时，所有的子应用都可以得到通知并进行相应的处理。</p>
<blockquote>
<p>在主应用中设置全局状态：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setGlobalState &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setGlobalState</span>(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;lang&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在子应用中监听全局状态的变化：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onGlobalStateChange, setGlobalState &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">newState, prevousState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newState:&quot;</span>, newState);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;prevousState:&quot;</span>, prevousState);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setGlobalState</span>(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;xiaolang&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-6-子应用之间共享状态"><a href="#2-6-子应用之间共享状态" class="headerlink" title="2.6 子应用之间共享状态"></a>2.6 子应用之间共享状态</h3><p>子应用之间可以通过主应用作为中介来实现状态的共享。具体实现方式如下：</p>
<blockquote>
<p>在主应用中设置共享状态</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setGlobalState &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setGlobalState</span>(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;lang&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在主应用中将共享状态传递给子应用：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; start &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">start</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;vue3&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;//localhost:8081&quot;</span>,</span><br><span class="line">  <span class="attr">container</span>: <span class="string">&quot;#vue3&quot;</span>,</span><br><span class="line">  <span class="attr">activeRule</span>: <span class="string">&quot;/vue3&quot;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">shared</span>: &#123;</span><br><span class="line">      <span class="attr">getGlobalState</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(globalState),</span><br><span class="line">      <span class="attr">setGlobalState</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">setGlobalState</span>(state)),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在子应用中使用共享状态：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initGlobalState &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = <span class="title function_">initGlobalState</span>(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;lang1&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line">actions.<span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">newState, prevousState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newState:&quot;</span>, newState);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;prevousState:&quot;</span>, prevousState);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">actions.<span class="title function_">setGlobalState</span>(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;lang2&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>
<p>上面，主应用通过 <code>props</code> 将 <code>getGlobalState</code> 和 <code>setGlobalState</code> 传递给了子应用。子应用可以通过 <code>initGlobalState</code> 方法来初始化全局状态，并且可以监听全局状态的变化。在子应用中，如果需要修改全局状态，可以通过 <code>setGlobalState</code> 方法来实现。</p>
<h3 id="2-7-子应用如何调用其他子应用组件"><a href="#2-7-子应用如何调用其他子应用组件" class="headerlink" title="2.7 子应用如何调用其他子应用组件"></a>2.7 子应用如何调用其他子应用组件</h3><h4 id="Vue-子应用中调用-React-子应用的组件"><a href="#Vue-子应用中调用-React-子应用的组件" class="headerlink" title="Vue 子应用中调用 React 子应用的组件"></a>Vue 子应用中调用 React 子应用的组件</h4><p>可以先在主应用中通过 <code>registerMicroApps</code> 方法注册好所有的子应用，并在主应用中管理子应用之间的通信。然后，可以在需要使用其他子应用组件的子应用中通过 <code>loadMicroApp</code> 方法异步加载对应的子应用并获取到对应子应用的实例，从而使用其提供的组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loadMicroApp &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadReactApp</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">loadMicroApp</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;reactApp&quot;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;//localhost:8082&quot;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&quot;#react&quot;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&quot;/react&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VueApp</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;VueApp&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;react-component /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">loadReactApp</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">ReactComponent</span> = app.<span class="title function_">getComponent</span>(<span class="string">&quot;ReactComponent&quot;</span>);</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;react-component&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;&lt;ReactComponent /&gt;&lt;/div&gt;`</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 <code>VueApp</code> 的 <code>mounted</code> 生命周期中异步加载了 <code>ReactApp</code> 并获取到其实例，然后通过 <code>getComponent</code> 方法获取到了 <code>ReactApp</code> 中提供的 <code>ReactComponent</code> 组件，并将其转换为 Vue 组件供 <code>VueApp</code> 使用。</p>
</blockquote>
<h4 id="React-子应用中调用-Vue-子应用的组件"><a href="#React-子应用中调用-Vue-子应用的组件" class="headerlink" title="React 子应用中调用 Vue 子应用的组件"></a>React 子应用中调用 Vue 子应用的组件</h4><blockquote>
<p>React 子应用中，加载 Vue 子应用并获取其组件：</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loadMicroApp, getGlobalState &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> \[vueComponent, setVueComponent\] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> vueApp = <span class="title function_">loadMicroApp</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;vue3&#x27;</span>,</span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8081&#x27;</span>,</span><br><span class="line">      <span class="attr">container</span>: <span class="string">&#x27;#vue3&#x27;</span>,</span><br><span class="line">      <span class="attr">activeRule</span>: <span class="string">&#x27;/vue3&#x27;</span>,</span><br><span class="line">      <span class="attr">props</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;vue-app&#x27;</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    vueApp.<span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">state, prev</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\[React\] Vue global state changed: &#x27;</span>, state);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    vueApp</span><br><span class="line">      .<span class="property">loadPromise</span>.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> vueInstance = vueApp.<span class="title function_">bootstrap</span>();</span><br><span class="line">        <span class="title function_">setVueComponent</span>(vueInstance.<span class="property">$children</span>\[<span class="number">0</span>\]);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> vueApp.<span class="title function_">unmount</span>();</span><br><span class="line">  &#125;, \[\]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Vue App Component:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;vueComponent &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;vueComponent.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> vueComponent.handleClick()&#125;&gt;Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然得在 Vue 子应用中，暴露一个组件，上面的<code>vueInstance.$children\[0\]</code>就是这个组件：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;Hello from Vue!&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      console.log(&quot;Vue button clicked!&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><blockquote>
<p>在调用其他子应用的组件时，可以使用 <code>props</code> 传递参数，和在普通的 React 组件中传递 <code>props</code> 是类似的。具体来说，在调用时，可以将需要传递的参数放在 <code>props</code> 对象中，然后作为第二个参数传递给 <code>render</code> 方法，例如：</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render, hydrate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>(\[...\]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/\* 调用 Vue 子应用的组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;render(&#x27;vue3&#x27;, &#123; name: &#x27;Tom&#x27; &#125;, &#123; container: &#x27;#vue-container&#x27; &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">hydrate</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们向 Vue 子应用的组件中传递了一个名为 <code>name</code> 的参数，并且将其渲染到了 <code>#vue-container</code> 容器中。在 Vue 子应用中，可以通过 <code>props</code> 对象获取这个参数，例如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Vue Component&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;VueComponent&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>这样，在 Vue 子应用中就可以通过 <code>this.$props.name</code> 访问这个参数了</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>由于 Vue 和 React 使用了不同的渲染引擎，它们之间的组件并不完全兼容。我这个也是自己想尝试一下不同的语言他们互相调用，所以大家在实际开发中需要根据具体情况来选择使用哪种方式来实现组件之间的互相调用。一般的话还是 vue 调用 vue, react 调用 react 兼容比较好。</p>
<p>上面就是就是小浪介绍的一个简单的 <code>qiankun</code> 实例 demo，包括主应用使用 <code>React</code>，子应用 1 使用 <code>Vue 3</code>，子应用 2 使用 <code>React</code> 。</p>
<h2 id="3-我开发中遇到的坑点"><a href="#3-我开发中遇到的坑点" class="headerlink" title="3.我开发中遇到的坑点"></a>3.我开发中遇到的坑点</h2><blockquote>
<p>在平时的开发肯定也不是一帆风顺的，也会多多少少遇到一些问题，下面是我平时遇到的一些问题，也查阅一些解决措施，这里就不一一详细把解决措施写出来，哈哈哈，写不完。</p>
</blockquote>
<h3 id="3-1-路由问题："><a href="#3-1-路由问题：" class="headerlink" title="3.1 路由问题："></a>3.1 路由问题：</h3><p>由于主应用和子应用都需要进行路由处理，需要注意路由的定义、匹配和传递，确保各个子应用之间的路由能够正确地被处理。</p>
<p>措施：统一路由管理：尽量采用相同的路由管理方式，确保路由的定义和匹配方式相同，方便进行传递和处理。</p>
<h3 id="3-2-样式隔离问题："><a href="#3-2-样式隔离问题：" class="headerlink" title="3.2 样式隔离问题："></a>3.2 样式隔离问题：</h3><p>由于不同的子应用之间可能会有样式冲突的问题，需要考虑如何进行样式隔离，以确保各个子应用之间的样式不会互相干扰。</p>
<p>措施：可以采用 CSS Modules、BEM 等方式进行样式隔离，或者使用 Shadow DOM 等技术进行样式隔离。在公司里后面全部改用 CSS Modules。</p>
<h3 id="3-3-全局状态管理问题："><a href="#3-3-全局状态管理问题：" class="headerlink" title="3.3 全局状态管理问题："></a>3.3 全局状态管理问题：</h3><p>由于各个子应用之间需要共享一些全局状态，需要考虑如何进行全局状态管理，以便于各个子应用之间能够共享数据。</p>
<p>措施：可以采用 Redux、Mobx 等全局状态管理库进行状态管理，或者使用 qiankun 提供的 props、emit 等方式进行状态传递。</p>
<h3 id="3-4-生命周期问题："><a href="#3-4-生命周期问题：" class="headerlink" title="3.4 生命周期问题："></a>3.4 生命周期问题：</h3><p>由于 qiankun 微前端框架会对主应用和子应用进行生命周期管理，因此需要注意各个组件的生命周期方法的调用时机和顺序。</p>
<p>措施：可以在各个生命周期方法中进行必要的处理，或者使用 qiankun 提供的 emitLifeCycles 等方式进行生命周期管理。</p>
<h3 id="3-5-缓存问题："><a href="#3-5-缓存问题：" class="headerlink" title="3.5 缓存问题："></a>3.5 缓存问题：</h3><p>由于 qiankun 微前端框架会对各个子应用进行缓存，需要注意缓存的清理和更新，以确保各个子应用之间的数据能够及时地同步更新</p>
<p>措施：可以使用 qiankun 提供的 prefetch、sandbox 等方式进行缓存管理，或者手动清理和更新缓存。</p>
<h3 id="3-6-避免重复引入公共依赖："><a href="#3-6-避免重复引入公共依赖：" class="headerlink" title="3.6 避免重复引入公共依赖："></a>3.6 避免重复引入公共依赖：</h3><blockquote>
<p>在多个子应用之间共享组件时，应该避免重复引入公共依赖。一种解决方法是将公共依赖打包为一个单独的库，并将其发布到 npm 上，然后在子应用中通过 npm 依赖引入。另一种解决方法是将公共依赖打包为 umd 格式，并在<code>qiankun</code>的<code>global</code>对象上注册，使得其他子应用可以通过<code>global</code>对象来访问公共依赖。例如：</p>
</blockquote>
<p>在主应用中注册公共依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&quot;my-component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">MyComponent</span> = <span class="title class_">MyComponent</span>;</span><br></pre></td></tr></table></figure>
<p>在子应用中使用公共依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">MyComponent</span> &#125; = <span class="variable language_">window</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-7-确保应用能够正确注册"><a href="#3-7-确保应用能够正确注册" class="headerlink" title="3.7 确保应用能够正确注册"></a>3.7 确保应用能够正确注册</h3><p>这可能是我自己会遇到的问题，有时候因为自己拼错单词，导致没有注册成功…..应用注册是一个关键步骤，需要确保主应用和子应用都能够正确地注册到<code>qiankun</code>微前端框架中。在主应用中，应该正确地调用<code>registerMicroApps</code>函数，并确保子应用的<code>entry</code>和<code>container</code>属性都被正确地设置。在子应用中，应该正确地调用<code>start</code>函数，并确保子应用的<code>mount</code>函数能够正确地渲染子应用。</p>
<h2 id="4-结语："><a href="#4-结语：" class="headerlink" title="4.结语："></a>4.结语：</h2><p>​ 有的时候查找微前端相关的问题的时候，下面总有言论，不看好微前端</p>
<p>​ 确实，微前端需要解决许多复杂的问题，例如应用程序的拆分、应用程序之间的通信和数据共享等。这会增加开发和维护的复杂性，可能需要额外的学习成本和工具支持。微前端应用程序可能需要通过网络加载许多小块代码，这可能会影响应用程序的性能和用户体验。此外，微前端还需要在运行时处理一些额外的逻辑，例如路由和状态管理，微前端应用程序可能需要跨域通信和数据共享，这可能会引入一些安全风险。此外，微前端还需要确保应用程序的隔离和沙箱，以防止应用程序之间的影响和攻击。技术选型：微前端需要处理不同的技术栈和框架之间的兼容性和交互性。这可能需要额外的工作。等等问题。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>​ 虽然微前端存在一些挑战和限制，但随着技术的发展和社区的支持，这些问题将得到解决，微前端也将成为构建大型前端应用程序的一种有力选择。总之，qiankun 是一个非常优秀的微前端解决方案，它可以帮助我们更好地管理和维护前端应用程序，提高应用程序的可扩展性和可维护性。同时，qiankun 也是一个非常灵活和可扩展的框架，可以适用于各种前端应用程序的开发场景。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
        <tag>qiankun</tag>
      </tags>
  </entry>
  <entry>
    <title>快速上手 Vuex 到 手写简易 Vuex</title>
    <url>/xiaolangwiki/2021/08/09/14/</url>
    <content><![CDATA[<h2 id="快速上手-Vuex-到-手写简易-Vuex"><a href="#快速上手-Vuex-到-手写简易-Vuex" class="headerlink" title="快速上手 Vuex 到 手写简易 Vuex"></a>快速上手 Vuex 到 手写简易 Vuex</h2><p>原文：<a href="https://juejin.cn/post/6994337441314242590">https://juejin.cn/post/6994337441314242590</a></p>
<blockquote>
<p>前言</p>
</blockquote>
<p>首先感谢各位这段时间对小浪的支持，小浪会继续努力的</p>
<p>今天本篇文章是关于 <code>Vuex</code>，大家使用 <code>Vue</code> 不会陌生吧</p>
<p>今天我们先对 <code>Vuex</code> 进行了解，然后讲下基本的用法，然后我们自己实现一个简易的 <code>Vuex</code></p>
<p>最后希望大家能给小浪一个 <strong>赞</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59bed0b088244e09ac9f88194d1dd7d0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p>
<blockquote>
<p>往期精彩：</p>
<p><a href="https://juejin.cn/post/6990582632270528525" title="https://juejin.cn/post/6990582632270528525">从了解到深入虚拟 DOM 和实现 diff 算法</a></p>
<p><a href="https://juejin.cn/post/6989106100582744072" title="https://juejin.cn/post/6989106100582744072">手写一个简易 vue 响应式带你了解响应式原理</a></p>
<p><a href="https://juejin.cn/post/6988316779818778631" title="https://juejin.cn/post/6988316779818778631">从使用到自己实现简单 Vue Router 看这个就行了</a></p>
<p><a href="https://juejin.cn/post/6983934602196811789" title="https://juejin.cn/post/6983934602196811789">前端面试必不可少的基础知识，虽然少但是你不能不知道</a></p>
</blockquote>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><blockquote>
<p><strong>Vuex</strong> 状态管理插件</p>
</blockquote>
<p>在<code>Vue</code> 最重要就是 <strong>数据驱动</strong> 和 <strong>组件化</strong>，每个 组件都有自己 <code>data</code> ,<code>template</code> 和 <code>methods</code>, <code>data</code>是数据，我们也叫做状态，通过<code>methods</code>中方法改变 状态来更新视图，在单个组件中修改状态更新视图是很方便的，但是实际开发中是多个组件（还有多层组件嵌套）共享同一个状态时，这个时候传参就会很繁琐，我们这里就引进 <code>Vuex</code> 来进行状态管理，负责组件中的通信，方便维护代码</p>
<blockquote>
<p>Vuex 主要解决的问题</p>
</blockquote>
<ul>
<li>多个视图依赖同一个状态</li>
<li>来自不同视图的行为需要变更同一个状态</li>
</ul>
<blockquote>
<p>使用 Vuex 的好处</p>
</blockquote>
<ul>
<li>能够在 <code>vuex</code> 中集中管理共享的数据，易于开发和后期维护</li>
<li>能够高效地实现组件之间的数据共享，提高开发效率</li>
<li>在 <code>vuex</code> 中的数据都是响应式的</li>
</ul>
<h2 id="2-Vuex-基础使用"><a href="#2-Vuex-基础使用" class="headerlink" title="2.Vuex 基础使用"></a>2.Vuex 基础使用</h2><blockquote>
<p>首先在 Vue 中添加 Vuex 插件</p>
</blockquote>
<p>通过 <code>vue-cli</code> 添加了 <code>Vuex</code> 后，在项目的 <code>src</code> 目录下会多出一个 <code>store</code> 目录，目录下会有个 <code>index.js</code></p>
<p>当然也通过 <code>npm</code> 进行安装 <code>Vuex</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在开发环境开启严格模式 这样修改数据 就必须通过 mutation 来处理</p>
</blockquote>
<p>在 package.json 文件 scripts 中可以设置环境，当我们处于开发环境时，可以开启严格模式</p>
<p>开启严格模式的方式也是很简单的一行代码就可以</p>
<p><code>strict:products.env.NODE_ENV !== &#39;production&#39;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vuex from <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.Store(&#123;</span><br><span class="line"></span><br><span class="line"> strict:products.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line"></span><br><span class="line"> state: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> mutations: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> actions: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> modules: &#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要使用 store 就在把 store 挂载到 Vue 中</p>
</blockquote>
<p>把 store 挂载到 Vue 之后 ，所有的组件就可以直接从 store 中获取全局数据了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="1-state"><a href="#1-state" class="headerlink" title="1.state"></a>1.state</h3><blockquote>
<p>在 state 中添加数据</p>
</blockquote>
<p>我们需要共享的状态都放在写在 state 对象里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>组件中获取 state 中的数据</p>
</blockquote>
<p>获取到 <code>state</code> 有两种方式</p>
<h4 id="1-直接使用-this-store-state-属性-，（this-可以省略）"><a href="#1-直接使用-this-store-state-属性-，（this-可以省略）" class="headerlink" title="1.直接使用 this.$store.state\[属性\] ，（this 可以省略）"></a>1.直接使用 <code>this.$store.state\[属性\]</code> ，（<code>this</code> 可以省略）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; this.$store.state.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;&#123; this.$store.state.age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-使用-mapState"><a href="#2-使用-mapState" class="headerlink" title="2.使用 mapState"></a>2.使用 <code>mapState</code></h4><p>通过 <code>mapState</code>把 <code>store</code> 映射到 组件的计算属性，就相当于组件内部有了 <code>state</code> 里的属性</p>
<p>知道这里为啥要用 <code>...</code>展开吗，到时候实现 <code>mapState</code> 时就知道了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(\[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
</blockquote>
<p>当 store 中的值 和 当前组件有相同的状态，我们可以在 mapState 方法里传递一个对象 而不是一个数组，在对象中给状态起别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123; <span class="attr">name2</span>: <span class="string">&#x27;name&#x27;</span>, <span class="attr">age2</span>: <span class="string">&#x27;age&#x27;</span>&#125;\])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-Mutation"><a href="#2-Mutation" class="headerlink" title="2.Mutation"></a>2.Mutation</h3><p><code>Store</code> 中的状态不能直接对其进行操作，我们得使用 <code>Mutation</code> 来对 <code>Store</code> 中的状态进行修改，虽然看起来有些繁琐，但是方便集中监控数据的变化</p>
<p><code>state</code> 的更新必须是 <code>Mutation</code> 来处理</p>
<blockquote>
<p>我们现在 mutaions 里定义个方法</p>
</blockquote>
<p>如果想要定义的方法能够修改 <code>Store</code> 中的状态，需要参数就是 <code>state</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"> <span class="attr">state</span>: &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    \*</span><br><span class="line">    \* @param &#123;*&#125; state 第一个参数是 <span class="title class_">Store</span> 中的状态(必须传递)</span><br><span class="line">    \* @param &#123;*&#125; newName 传入的参数 后面是多个</span><br><span class="line">    */</span><br><span class="line">   <span class="title function_">changeName</span>(<span class="params">state, newName</span>) &#123;</span><br><span class="line"></span><br><span class="line">     state.<span class="property">name</span> = newName</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line"> <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在组件中使用 mutations 中的方法</p>
</blockquote>
<p>同样有两种方法在组件触发 <code>mutations</code> 中的方法</p>
<h4 id="1-this-store-commit-触发"><a href="#1-this-store-commit-触发" class="headerlink" title="1.this.$store.commit() 触发"></a>1.this.$store.commit() 触发</h4><p>在 <code>methods</code> 中定义一个方法，在这个方法里面进行触发 <code>mutations</code> 中的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>方式1 按钮使用 mutation 中方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(\[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeName&#x27;</span>, <span class="string">&#x27;小浪&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="2-使用-mapMutations"><a href="#2-使用-mapMutations" class="headerlink" title="2.使用 mapMutations"></a>2.使用 <code>mapMutations</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName(&#x27;小浪&#x27;)&quot;</span>&gt;</span>方式2 按钮使用 mutation 中方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(\[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapMutations</span>(\[<span class="string">&#x27;changeName&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="3-Action"><a href="#3-Action" class="headerlink" title="3.Action"></a>3.Action</h3><blockquote>
<p><code>Action</code> 和 <code>Mutation</code> 区别</p>
</blockquote>
<p><code>Action</code> 同样也是用来处理任务，不过它处理的是异步任务，异步任务必须要使用 <code>Action</code>，通过 <code>Action</code> 触发 <code>Mutation</code> 间接改变状态，不能直接使用 <code>Mutation</code> 直接对异步任务进行修改</p>
<blockquote>
<p>先在 <code>Action</code> 中定义一个异步方法来调用 <code>Mutation</code> 中的方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"> <span class="attr">state</span>: &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    \*</span><br><span class="line">    \* @param &#123;*&#125; state 第一个参数是 <span class="title class_">Store</span> 中的状态(必须传递)</span><br><span class="line">    \* @param &#123;*&#125; newName 传入的参数 后面是多个</span><br><span class="line">    */</span><br><span class="line">   <span class="title function_">changeName</span>(<span class="params">state, newName</span>) &#123;</span><br><span class="line"></span><br><span class="line">     state.<span class="property">name</span> = newName</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">    \*</span><br><span class="line">    \* @param &#123;*&#125; context 上下文默认传递的参数</span><br><span class="line">    \* @param &#123;*&#125; newName 自己传递的参数</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   <span class="title function_">changeNameAsync</span>(<span class="params">context, newName</span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">       context.<span class="title function_">commit</span>(<span class="string">&#x27;changeName&#x27;</span>, newName)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在组件中是 Action 中的异步方法也是有两种方式</p>
<h4 id="1-this-store-dispatch"><a href="#1-this-store-dispatch" class="headerlink" title="1.this.$store.dispatch()"></a>1.<code>this.$store.dispatch()</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName2(&#x27;小浪&#x27;)&quot;</span>&gt;</span>方式1 按钮使用 action 中方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(\[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">changeName2</span>(<span class="params">newName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;changeNameAsync&#x27;</span>, newName)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="2-使用-mapActions"><a href="#2-使用-mapActions" class="headerlink" title="2.使用 mapActions"></a>2.使用 <code>mapActions</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeNameAsync(&#x27;小浪&#x27;)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      方式2 按钮使用 action 中方法</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(\[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapActions</span>(\[<span class="string">&#x27;changeNameAsync&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="4-Getter"><a href="#4-Getter" class="headerlink" title="4.Getter"></a>4.Getter</h3><blockquote>
<p>简介</p>
</blockquote>
<p><code>Getter</code> 类似于计算属性，但是我们的数据来源是 <code>Vuex</code> 中的 <code>state</code> ,所以就使用 <code>Vuex</code> 中的 <code>Getter</code> 来完成</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>需要对 <code>state</code> 做一些包装简单性处理 展示到视图当中</p>
<blockquote>
<p>先来写个 Getter</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"> <span class="attr">state</span>: &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    \*</span><br><span class="line">    \* @param &#123;*&#125; state 状态 如果要使用 state 里面的数据，第一个参数默认就是 state ，名字随便取</span><br><span class="line">    \* @returns</span><br><span class="line">    */</span><br><span class="line">   <span class="title function_">decorationName</span>(<span class="params">state</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">`大家好我的名字叫<span class="subst">$&#123;state.name&#125;</span>今年<span class="subst">$&#123;state.age&#125;</span>岁`</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当然 <code>Getter</code> 也有两种方式导入</p>
<h4 id="1-this-store-getters-名称"><a href="#1-this-store-getters-名称" class="headerlink" title="1.this.$store.getters\[名称\]"></a>1.<code>this.$store.getters\[名称\]</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; this.$store.getters.decorationName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-使用-mapGetters"><a href="#2-使用-mapGetters" class="headerlink" title="2.使用 mapGetters"></a>2.使用 <code>mapGetters</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; decorationName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>(\[<span class="string">&#x27;decorationName&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="5-Module"><a href="#5-Module" class="headerlink" title="5.Module"></a>5.Module</h3><p>为了避免在一个复杂的项目 <code>state</code> 中的数据变得臃肿，<code>Vuex</code> 允许将 <code>Store</code> 分成不同的模块，每个模块都有属于自己的 <code>state</code>，<code>getter</code>，<code>action</code>，<code>mutation</code></p>
<blockquote>
<p>我们这里新建一个 <code>animal.js</code> 文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">animalName</span>: <span class="string">&quot;狮子&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">setName</span>(<span class="params">state, newName</span>) &#123;</span><br><span class="line">    state.<span class="property">animalName</span> = newName;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 <code>store/index.js</code>中的 <code>modules</code> 进行挂载这个模块</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">&quot;./animal&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    animal,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后我们就可以在组件中使用了</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; this.$store.state.animal.animalName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.commit(&#x27;setName&#x27;, &#x27;老虎&#x27;)&quot;</span>&gt;</span>改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p><code>$store.state\[在module中挂载的模块名\]\[挂载的模块里的属性\]</code></p>
<p>是不是觉得这种模式很复杂</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2984822b759a4bb8a8c04c4748c5f9f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p>
<blockquote>
<p>添加命名空间</p>
</blockquote>
<p>其实也可以使用 <code>mapXXX</code> 方法进行映射，不过写法有些许不同，先在导出的添加一个<strong>命名空间</strong><code>namespaced: true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">animalName</span>: <span class="string">&quot;狮子&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">setName</span>(<span class="params">state, newName</span>) &#123;</span><br><span class="line">    state.<span class="property">animalName</span> = newName;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>方式 2</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; animalName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setName(&#x27;老鹰&#x27;)&quot;</span>&gt;</span>改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(<span class="string">&#x27;animal&#x27;</span>, \[<span class="string">&#x27;animalName&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;animal&#x27;</span>, \[<span class="string">&#x27;setName&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="3-模拟一个简单的-Vuex"><a href="#3-模拟一个简单的-Vuex" class="headerlink" title="3.模拟一个简单的 Vuex"></a>3.模拟一个简单的 Vuex</h2><p>上面我们已经介绍了 <code>Vuex</code> 的基本使用，现在我们来自己动手写个简单 <code>Vuex</code></p>
<p>代码我都会写满注释方便大家观看，代码很少，有兴趣，大家耐心观看 ヽ(￣ ▽ ￣)ﾉ</p>
<h3 id="1-index-js"><a href="#1-index-js" class="headerlink" title="1.index.js"></a>1.index.js</h3><blockquote>
<p>先搭个基本的架子</p>
</blockquote>
<p>我们在 <code>src</code> 目录下 建立一个属于我们自己的 <code>Vuex</code> 的文件夹，并且在这个目录下添加一个 <code>index.js</code> 文件，我们要模拟的这个 <code>Vuex</code> 就会放在这里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install,</span><br><span class="line">  <span class="title class_">Store</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-install-方法"><a href="#2-install-方法" class="headerlink" title="2.install 方法"></a>2.install 方法</h3><blockquote>
<p>因为 Vuex 插件 需要 Vue.use() 安装，所以我们必须要有个 install 方法，第一个参数 传入 Vue</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  _Vue = <span class="title class_">Vue</span>;</span><br><span class="line"></span><br><span class="line">  _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">store</span>) &#123;</span><br><span class="line">        _Vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$store</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">store</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.我们继续来实现 <code>Store</code> 类</p>
</blockquote>
<p>先完成基础的 构造方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> state = options.<span class="property">state</span> || &#123;&#125;</span><br><span class="line">   <span class="keyword">const</span> mutations = options.<span class="property">mutations</span> || &#123;&#125;</span><br><span class="line">   <span class="keyword">const</span> actions = options.<span class="property">actions</span> || &#123;&#125;</span><br><span class="line">   <span class="keyword">const</span> getters = options.<span class="property">getters</span> || &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着，我们来实现 <code>state</code>,<code>getters</code>,<code>mutations</code>,<code>actions</code>,<code>commit</code>,<code>dispatch</code> 吧</p>
<p>( ﾟ ▽ ﾟ)/</p>
<h3 id="3-state"><a href="#3-state" class="headerlink" title="3.state"></a>3.state</h3><p>是不是超简单，直接调用 <code>Vue</code> 的 <code>observable</code> 把 <code>state</code> 变成响应式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = _Vue.<span class="title function_">observable</span>(state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-getters"><a href="#4-getters" class="headerlink" title="4.getters"></a>4.getters</h3><p>为每一个 <code>getters</code> 里面的 方法添加了一个 <code>get</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">getters</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(getters).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>.<span class="property">getters</span>, key, &#123;</span><br><span class="line"></span><br><span class="line">       <span class="attr">get</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> getters\[key\].<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-mutations"><a href="#5-mutations" class="headerlink" title="5.mutations"></a>5.mutations</h3><p>这里改变 <code>this</code> 指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">mutations</span> = &#123;&#125;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(mutations).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">mutations</span>\[key\] = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">       mutations\[key\].<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>, params)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-actions"><a href="#6-actions" class="headerlink" title="6.actions"></a>6.actions</h3><p>其实呢，和上面的 <code>mutations</code> 处理方式差不多，不过参数 传递的不一样，需要传递 上下文 <code>context</code> 也就是 <code>Store</code> 的一个实例，这里就是 <code>this</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">actions</span> = &#123;&#125;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(actions).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">actions</span>\[key\] = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">       actions\[key\].<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>, params)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-commit"><a href="#7-commit" class="headerlink" title="7.commit"></a>7.commit</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> commit = <span class="function">(<span class="params">eventName, params</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">mutations</span>\[eventName\](params)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-dispatch"><a href="#8-dispatch" class="headerlink" title="8.dispatch"></a>8.dispatch</h3><p><code>dispatch</code> 和 <code>commit</code> 实现差不多</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> dispatch = <span class="function">(<span class="params">eventName, params</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">actions</span>\[eventName\](params)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，到了这里差不多，一个丐版的 <code>Vuex</code> 就这样诞生了，我们写个例子去测试下吧</p>
<h3 id="9-测试例子"><a href="#9-测试例子" class="headerlink" title="9.测试例子"></a>9.测试例子</h3><blockquote>
<p>先导入我们自己写的 <code>Vuex</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;../my-vuex/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">changeName</span>(<span class="params">state, newName</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = newName;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">changeNameAsync</span>(<span class="params">context, newName</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&quot;changeName&quot;</span>, newName);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">decorationName</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`大家好我的名字叫<span class="subst">$&#123;state.name&#125;</span>今年<span class="subst">$&#123;state.age&#125;</span>岁`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一个简单的 <code>vue</code> 组件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是 state 测试：&#123;&#123; this.$store.state.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是 getters 测试:&#123;&#123; this.$store.getters.decorationName &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.commit(&#x27;changeName&#x27;, &#x27;mutations 按钮&#x27;)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      mutations 按钮</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.dispatch(&#x27;changeNameAsync&#x27;, &#x27;actions 按钮&#x27;)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      actions 按钮</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 mian.js 还是之前一样的挂载没改</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子预览</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9cd6338c699643dc9ca1b853d7749170~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="27"></p>
<p>到了这里并不是结束了，不如简单实现一下 几个 <code>mapXXX</code> ,实现起来都差不多</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df85a4edd845442292c66c3fc9fff38d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p>
<h3 id="10-mapSate"><a href="#10-mapSate" class="headerlink" title="10.mapSate"></a>10.mapSate</h3><p><code>...mapSate(\[&#39;age&#39;,\[&#39;name&#39;\]\])</code> ,最后 <code>computed</code> 得到的就是 <code>age</code>: <code>21</code>, <code>name</code> : <code>&#39;张三&#39;</code> 这样，就可以在 组件中直接使用了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapState</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    obj\[item\] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>\[item\]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="11-mapMutations"><a href="#11-mapMutations" class="headerlink" title="11.mapMutations"></a>11.mapMutations</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapMutations</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    obj\[item\] = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(item, params)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="12-mapActions"><a href="#12-mapActions" class="headerlink" title="12.mapActions"></a>12.mapActions</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapActions</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    obj\[item\] = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(item, params)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="13-mapGetters"><a href="#13-mapGetters" class="headerlink" title="13.mapGetters"></a>13.mapGetters</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapGetters</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    obj\[item\] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>\[item\]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-导出和使用"><a href="#14-导出和使用" class="headerlink" title="14.导出和使用"></a>14.导出和使用</h3><blockquote>
<p>最后就是导出</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; mapState, mapMutations, mapActions, mapGetters &#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用方法和之前一样</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName(&#x27;狗子&#x27;)&quot;</span>&gt;</span>mapMutations<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeNameAsync(&#x27;狗2子&#x27;)&quot;</span>&gt;</span>mapMutations<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; decorationName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapMutations, mapActions, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;./my-vuex/index&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>(\[<span class="string">&#x27;age&#x27;</span>\]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>(\[<span class="string">&#x27;decorationName&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapMutations</span>(\[<span class="string">&#x27;changeName&#x27;</span>\]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapActions</span>(\[<span class="string">&#x27;changeNameAsync&#x27;</span>\])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-结语"><a href="#3-结语" class="headerlink" title="3.结语"></a>3.结语</h2><p>好了到了这里，关于 <code>Vuex</code> 本文就结束了，我们从 <code>Vuex</code> 是啥，怎么使用，动手实现一个简单 <code>Vuex</code> 我们都完成了，希望大家有所收获</p>
<p>下面把完成的我们模拟的 <code>Vuex</code> 代码贴出，欢迎大家，多多交流，有什么写错的地方，请大家指出</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7625b7e187b4616bb13da4653decfef~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p>
<h3 id="模拟-Vuex-完整代码"><a href="#模拟-Vuex-完整代码" class="headerlink" title="模拟 Vuex 完整代码"></a>模拟 <code>Vuex</code> 完整代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> state = options.<span class="property">state</span> || &#123;&#125;</span><br><span class="line">   <span class="keyword">const</span> mutations = options.<span class="property">mutations</span> || &#123;&#125;</span><br><span class="line">   <span class="keyword">const</span> actions = options.<span class="property">actions</span> || &#123;&#125;</span><br><span class="line">   <span class="keyword">const</span> getters = options.<span class="property">getters</span> || &#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">state</span> = _Vue.<span class="title function_">observable</span>(state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">getters</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(getters).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>.<span class="property">getters</span>, key, &#123;</span><br><span class="line"></span><br><span class="line">       <span class="attr">get</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> getters\[key\].<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">mutations</span> = &#123;&#125;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(mutations).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">mutations</span>\[key\] = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">       mutations\[key\].<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>, params)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">actions</span> = &#123;&#125;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(actions).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">actions</span>\[key\] = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">       actions\[key\].<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>, params)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> commit = <span class="function">(<span class="params">eventName, params</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">mutations</span>\[eventName\](params)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> dispatch = <span class="function">(<span class="params">eventName, params</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">actions</span>\[eventName\](params)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line"></span><br><span class="line"> _Vue = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line"> _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">store</span>) &#123;</span><br><span class="line"></span><br><span class="line">       _Vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$store</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">store</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapState</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">   obj\[item\] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>\[item\]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapMutations</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">   obj\[item\] = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(item, params)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapActions</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">   obj\[item\] = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(item, params)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapGetters</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params))</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;抱歉，当前是丐版的Vuex，只支持数组参数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> params.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">   obj\[item\] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>\[item\]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; mapState, mapMutations, mapActions, mapGetters &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> install,</span><br><span class="line"> <span class="title class_">Store</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>快速入手Electron 拥有一个自己的桌面应用</title>
    <url>/xiaolangwiki/2021/10/05/09/</url>
    <content><![CDATA[<h2 id="快速入手Electron，拥有一个自己的桌面应用在这里小浪会简单介绍Elctron的一些基本使用，和如何快速用Eletr"><a href="#快速入手Electron，拥有一个自己的桌面应用在这里小浪会简单介绍Elctron的一些基本使用，和如何快速用Eletr" class="headerlink" title="快速入手Electron，拥有一个自己的桌面应用在这里小浪会简单介绍Elctron的一些基本使用，和如何快速用Eletr"></a>快速入手Electron，拥有一个自己的桌面应用在这里小浪会简单介绍Elctron的一些基本使用，和如何快速用Eletr</h2><p>原文：<a href="https://juejin.cn/post/7015476516196712462">https://juejin.cn/post/7015476516196712462</a></p>
<blockquote>
<p>前言</p>
</blockquote>
<p>小浪学习<code>electron</code>的原因是软件构造课需要交一个软件作业，不想用<code>java</code>写，还不能是网页，一开始想到的是用<code>uniapp</code>写个项目打包成<code>APP</code>，然后想了想，一直听说 <code>electron</code> 可以把前端页面(<code>原生</code>/<code>h5</code>/<code>vue</code>/<code>react</code>…)打包成桌面应用，把前端页面当做<code>GUI</code>这岂不是很<code>Nice</code>,<code>Typora</code> 就是 <code>electron</code> 做的，很好奇，就去学学看，下面是小浪学习 <code>electron</code> 的笔记，希望能给大家一点帮助，学习 <code>electron</code> 教程好像很多，但是还是官方文档比较清晰全面，有可能你在视频教程里看见的能使用的，自己去敲的时候发现各种问题，还以为是自己哪里拼错了，一看是官方文档更新了…</p>
<h2 id="1-基础使用"><a href="#1-基础使用" class="headerlink" title="1.基础使用"></a>1.基础使用</h2><p>要想弄个桌面端的应用，那我们得快速的去了解它</p>
<h3 id="1-1终端乱码问题"><a href="#1-1终端乱码问题" class="headerlink" title="1.1终端乱码问题"></a>1.1终端乱码问题</h3><blockquote>
<p><code>tip</code>: electron 控制打印会出现中文乱码</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/415ede9a1d404238b155cab94420d9f7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211004134055911"></p>
<p>只需要在终端（<code>cmd</code>）输入 <code>chcp 65001</code> 运行下就行了</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cc9e6036f4949e5becdd4c2bec3badb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211004134132071"></p>
<h3 id="1-2安装"><a href="#1-2安装" class="headerlink" title="1.2安装"></a>1.2安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 如果没有node 的话先装 node</span><br><span class="line">http://nodejs.cn/download/</span><br><span class="line"></span><br><span class="line">// 在当前目录安装最新</span><br><span class="line">npm i -D electron</span><br><span class="line"></span><br><span class="line">// 全局安装最新</span><br><span class="line">cnpm install electron -g</span><br><span class="line"></span><br><span class="line">// 当然你可以指定版本号安装</span><br><span class="line">npm i -D electron@11.0.4</span><br></pre></td></tr></table></figure>
<p><code>node -v``electron -v</code>查看是否安装成功</p>
<h3 id="1-3快速创建"><a href="#1-3快速创建" class="headerlink" title="1.3快速创建"></a>1.3快速创建</h3><blockquote>
<p>开始创建一个 electron</p>
</blockquote>
<ul>
<li>首先说下目录必须包括：<code>package.json</code> 这个文件</li>
<li>然后要有个入口文件下面这个例子我用 <code>index.js</code>举例，不过一般写成 <code>main.js</code>比较好</li>
<li>起码你需要个展示的GUI界面，一般是前端页面，也可以直接放个网址</li>
</ul>
<p>新建一个目录(项目):</p>
<p>初始化<code>package.json</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>描述记得写，这个<code>electron</code> 打包的时候我记得需要描述</p>
<p>启动命令写 <code>&quot;test&quot;: &quot;nodemon --watch index.js --exec electron .&quot;</code> ，这样子最后在终端输入 <code>npm test</code>这样每次修改<code>index.js</code> 主进程文件都会重新启动项目了，<code>index.js</code>可以自行修改 <code>main.js</code>等等</p>
<p>来看看最后的的 <code>package.json</code>文件吧</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;electron_demo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;\\&quot;</span>这是一个electron demo\\<span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;nodemon --watch index.js --exec electron .&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我的目录下放了以下几个文件</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c71f4ff2f1af4b369da5a8faf9ca4aaa~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211002115657083"></p>
<p><code>electron</code> 分为两个进程 <strong>主进程</strong> 和 <strong>渲染进程</strong></p>
<blockquote>
<p><code>index.js</code> 这个文件是 <strong>主进程</strong></p>
</blockquote>
<p>官方是这样写的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我看其他人差不多是这样写的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">resizable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">icon</span>: iconPath,</span><br><span class="line">    <span class="attr">minWidth</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">minHeight</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">maxWidth</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">maxHeight</span>: <span class="number">600</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">webPreferences</span>:&#123;</span><br><span class="line">      <span class="attr">backgroundThrottling</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">nodeIntegration</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  win.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口全部都关闭了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>index.html</code>是<strong>渲染进程</strong>也就是前端页面里面随便写点东西，这里相当是把前端当成 GUI 了</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>electron test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    electron demo</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样使用 <code>npm test</code> 就可以出来这么一个界面了，<code>test</code>这个命令 是 <code>package.json``script</code> 中配的</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72537c1239d349bd96e785df06c7364f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211003211108491"></p>
<h2 id="2-Remote-模块"><a href="#2-Remote-模块" class="headerlink" title="2.Remote 模块"></a>2.Remote 模块</h2><p>在渲染进程里（比如<code>index.html</code>里面加载了一些<strong>js文件</strong>，那里面的<strong>js</strong>如果要使用到 <strong>BrowserWindow</strong> 这些属性的话就必须使用 <code>remote</code>）</p>
<p>使用 <code>remote</code> 模块, 你可以调用 <code>main</code><strong>进程对象的方法</strong></p>
<h3 id="2-1-electron14-0之前版本使用"><a href="#2-1-electron14-0之前版本使用" class="headerlink" title="2.1.electron14.0之前版本使用"></a>2.1.<strong>electron14.0</strong>之前版本使用</h3><blockquote>
<p>在主进程的窗口中加入<code>enableRemoteModule: true</code>参数才能够调用remote模块</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口全部都关闭了&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后在渲染进程里写，这里我直接内嵌js了</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>electron test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    electron demo</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>添加新的窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; log &#125; = <span class="variable language_">console</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).<span class="property">remote</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> newWin = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">width</span>: <span class="number">800</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">600</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index2.html&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        newWin.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          newWin = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里点击按钮，就又可以创建一个新的窗口了</p>
<h3 id="2-2-electron14-0版本API修改"><a href="#2-2-electron14-0版本API修改" class="headerlink" title="2.2.electron14.0版本API修改"></a>2.2.<strong>electron14.0</strong>版本API修改</h3><blockquote>
<p>但是这里是有版本的区分的，这里一开始也困扰了我很久很久…最后看了下文档<code>14.0</code>后 改了，我用的<code>15</code>。。。</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12832ff7f85c4ab89c34aaeebed3132f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211003215043335"></p>
<blockquote>
<p>1.还得自行安装 <code>remote</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @electron/remote</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.主进程中导入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">&#x27;@electron/remote/main&#x27;</span>).<span class="title function_">initialize</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.渲染进程中</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@electron/remote&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-创建系统菜单"><a href="#3-创建系统菜单" class="headerlink" title="3.创建系统菜单"></a>3.创建系统菜单</h2><blockquote>
<p>1.新建一个 menu.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Menu</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = \[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;菜单一&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">submenu</span>: \[</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">label</span>: <span class="string">&#x27;子菜单一&#x27;</span> ,</span><br><span class="line"></span><br><span class="line">          <span class="attr">accelerator</span>: <span class="string">&#x27;ctrl+n&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单二&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单三&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单四&#x27;</span> &#125;,</span><br><span class="line">    \],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;菜单二&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">submenu</span>: \[</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单一&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单二&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单三&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单四&#x27;</span> &#125;,</span><br><span class="line">    \],</span><br><span class="line">  &#125;,</span><br><span class="line">\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myMenu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(myMenu)</span><br></pre></td></tr></table></figure>
<p><code>accelerator: &#39;ctrl+n&#39;</code>可以指定菜单的快捷键</p>
<blockquote>
<p>2.随便写个页面</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义菜单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    自定义菜单</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.写 main.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./menu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>()</span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;./index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  win.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>npm test启动</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ab8963721d54f73a508a93088ef71f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="46"></p>
<h2 id="4-给菜单添加事件"><a href="#4-给菜单添加事件" class="headerlink" title="4.给菜单添加事件"></a>4.给菜单添加事件</h2><blockquote>
<p>比如给子菜单添加一个点击事件新建一个窗口</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Menu</span>, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = \[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;菜单一&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">submenu</span>: \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;子菜单一&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> sonWin = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">200</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">          sonWin.<span class="title function_">loadFile</span>(<span class="string">&#x27;./index2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">          sonWin.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            sonWin = <span class="literal">null</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单二&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单三&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单四&#x27;</span> &#125;,</span><br><span class="line">    \],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;菜单二&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">submenu</span>: \[</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单一&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单二&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单三&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">label</span>: <span class="string">&#x27;子菜单四&#x27;</span> &#125;,</span><br><span class="line">    \],</span><br><span class="line">  &#125;,</span><br><span class="line">\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myMenu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Menu</span>.<span class="title function_">setApplicationMenu</span>(myMenu)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68fdf9ed39c0403188c1193c1021b9b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="47"></p>
<blockquote>
<p>上面的的开发者工具和<strong>chrome/edge浏览器</strong>一样，在菜单栏的<code>View -&gt; Toggle Developer Tools</code>，或者 <code>Ctrl + Shift + I</code>就能调用出来，用来调试页面</p>
</blockquote>
<h2 id="5-使用Node-js-模块-API"><a href="#5-使用Node-js-模块-API" class="headerlink" title="5.使用Node.js 模块/API"></a>5.使用Node.js 模块/API</h2><p>比如写个<strong>读写文件</strong>例子</p>
<p>在主线程创建窗口的时候 <code>webPreferences</code>一定在加上 <code>nodeIntegration: true</code>，<code>contextIsolation: false</code></p>
<p>这样在渲染进程才能使用<code>node</code> 的一些语法</p>
<blockquote>
<p>main.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWindow = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;./main.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mainWindow = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>main.html 主要的渲染文件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>读写文件测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readFile()&quot;</span>&gt;</span>读取文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;writeFile()&quot;</span>&gt;</span>写入文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;show\_file\_content&quot;</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>index.js 加载需要的js</p>
</blockquote>
<p>可以看出，在渲染进程中，就是<code>main.html</code> 里面加载的 <code>index.js</code> 中，既可以使用 <code>docment.getElementById</code> 这些 <code>WebAPI</code>,又能使用用 <code>node</code> 的模块进行混写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; log &#125; = <span class="variable language_">console</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showContent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;show\_file\_content&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件&#x27;</span>)</span><br><span class="line">  fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/test.txt&#x27;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err, <span class="string">&#x27;读取文件失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    showContent.<span class="property">innerText</span> = data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> content = <span class="string">&#x27;今天是国庆的第二天，在学 electron&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  fs.<span class="title function_">writeFile</span>(</span><br><span class="line">    path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/test.txt&#x27;</span>),</span><br><span class="line">    content,</span><br><span class="line">    <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err, <span class="string">&#x27;读取文件失败&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">log</span>(<span class="string">&#x27;写入文件成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试用的 txt</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">今天是国庆的第二天，在学 electron</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目的目录</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/261e3ccd1caf4d26847e861205d73278~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211002155537033"></p>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e392606cde154267aed6ff0c08c57c09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="45"></p>
<h2 id="6-设置无边框"><a href="#6-设置无边框" class="headerlink" title="6.设置无边框"></a>6.设置无边框</h2><blockquote>
<p>在创建窗口的时候 可以设置无边框，带的菜单也消失了</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">frame</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>菜单其实它还在，你仍然可以通过快捷键调用出菜单，可以直接删除菜单<code>win.removeMenu()</code></p>
<blockquote>
<p>没有菜单栏怎么去拖拽窗口</p>
</blockquote>
<p>在css中你可以设置哪个可以进行拖拽/禁止拖拽</p>
<p>比如 <code>body&#123; -webkit-app-region: drag | no-drag;&#125;</code></p>
<blockquote>
<p>效果图：无边框，在<code>body</code>设置可拖拽</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76910042f01a4848abb0948cdc20a828~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="44"></p>
<h2 id="7-系统托盘"><a href="#7-系统托盘" class="headerlink" title="7.系统托盘"></a>7.系统托盘</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7b3e10d88f54101a7889b42f01d5aa6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211004102538924"></p>
<p>看到上面这个图大家都应该清楚吧，当我们关闭一个应用程序的时候，它其实关闭了，但是没有完全关闭，只是隐藏了，有的就存在系统托盘中，那么如何在<code>electron</code> 设置系统托盘呢</p>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fdocs%2Ftutorial%2Ftray" title="https://www.electronjs.org/docs/tutorial/tray">官方文档：Tray</a></p>
<blockquote>
<p>主进程 index.js</p>
</blockquote>
<p>在<code>electron</code> 这里一开始我就添加系统托盘，当然你可以监听窗口被关闭的时候在创建托盘</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, <span class="title class_">Tray</span>, <span class="title class_">Menu</span>, nativeImage &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> win, tray</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> icon = nativeImage.<span class="title function_">createFromPath</span>(</span><br><span class="line">    path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/static/icon.png&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  tray = <span class="keyword">new</span> <span class="title class_">Tray</span>(icon)</span><br><span class="line"></span><br><span class="line">  tray.<span class="title function_">setToolTip</span>(<span class="string">&#x27;electron demo is running&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  tray.<span class="title function_">setTitle</span>(<span class="string">&#x27;electron demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  tray.<span class="title function_">on</span>(<span class="string">&#x27;right-click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tempate = \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;无操作&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;退出&#x27;</span>,</span><br><span class="line">        <span class="attr">click</span>: <span class="function">() =&gt;</span> app.<span class="title function_">quit</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">    \]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> menuConfig = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(tempate)</span><br><span class="line"></span><br><span class="line">    tray.<span class="title function_">popUpContextMenu</span>(menuConfig)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  tray.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (win.<span class="title function_">isVisible</span>()) &#123;</span><br><span class="line">      win.<span class="title function_">hide</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      win.<span class="title function_">show</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  win = <span class="literal">null</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口全部都关闭了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7baeb0d2309f4c38bb107a22a3690f49~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="48"></p>
<h2 id="8-进程间通信"><a href="#8-进程间通信" class="headerlink" title="8.进程间通信"></a>8.进程间通信</h2><p><code>electron</code>中主进程和渲染进程两者之间需要通信</p>
<blockquote>
<p>官方文档：</p>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fdocs%2Fapi%2Fipc-main" title="https://www.electronjs.org/docs/api/ipc-main">ipcMain</a></p>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fdocs%2Fapi%2Fipc-renderer" title="https://www.electronjs.org/docs/api/ipc-renderer">ipcRenderer</a></p>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fdocs%2Fapi%2Fweb-contents%23contentssendchannel-args" title="https://www.electronjs.org/docs/api/web-contents#contentssendchannel-args">webContents</a></p>
</blockquote>
<p><strong>主线程</strong> 到 <strong>渲染线程</strong> 通过 <code>webContents.send</code> 来发送 —-&gt;<code>ipcRenderer.on</code> 来监听</p>
<p><strong>渲染线程</strong> 到 <strong>主线程</strong> 需要通过 <code>ipcRenderer.send</code>发送 —-> <code>ipcMain.on</code>来监听</p>
<h3 id="8-1-主进程到渲染进程"><a href="#8-1-主进程到渲染进程" class="headerlink" title="8.1.主进程到渲染进程"></a>8.1.主进程到渲染进程</h3><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fdocs%2Fapi%2Fweb-contents%23contentssendchannel-args" title="https://www.electronjs.org/docs/api/web-contents#contentssendchannel-args"><code>webContents.send(channel, ...args)</code></a></p>
<ul>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<blockquote>
<p>主进程 <code>mian.js</code></p>
</blockquote>
<p>在主进程中使用 <code>webContents.send</code> 发送消息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    win.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;mainMsg&#x27;</span>, <span class="string">&#x27;我是主线程发送的消息&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;main.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  win = <span class="literal">null</span></span><br><span class="line">  app.<span class="title function_">quit</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口全部都关闭了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>渲染进程 <code>main.html</code> 外链一个 <code>render.js</code></p>
</blockquote>
<p>在渲染线程中使用 <code>ipcRenderer.on</code>来进行监听</p>
<p><code>ipcRenderer.on(channel, listener)</code></p>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>监听 <code>channel</code>, 当有新消息到达，使用 <code>listener(event, args...)</code> 调用 <code>listener</code> .</p>
<p>还有个监听一次的消息<code>ipcRenderer.once(channel, listener)</code></p>
<p>为这个事件添加一个一次性 <code>listener</code> 函数.这个 <code>listener</code> 将在下一次有新消息被发送到 <code>channel</code> 的时候被请求调用，之后就被删除了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>通信测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    通信测试</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;receive&quot;</span>&gt;</span>接收信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./render.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; log &#125; = <span class="variable language_">console</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(ipcRenderer)</span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;mainMsg&#x27;</span>, <span class="function">(<span class="params">event, task</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(task)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;receive&#x27;</span>).<span class="property">innerText</span> = task</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/087129ad564a42d8b54b1d1785710231~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="49"></p>
<h3 id="8-2-渲染进程到主进程"><a href="#8-2-渲染进程到主进程" class="headerlink" title="8.2.渲染进程到主进程"></a>8.2.渲染进程到主进程</h3><blockquote>
<p><code>render.js</code> 渲染线程中进行发送 <code>ipcRenderer.send</code></p>
</blockquote>
<p><code>ipcRenderer.send(channel\[, arg1\]\[, arg2\]\[, ...\])</code></p>
<ul>
<li><code>channel</code> String</li>
<li><code>arg</code> (可选)</li>
</ul>
<p>还有发送同步消息的<code>ipcRenderer.sendSync(channel\[, arg1\]\[, arg2\]\[, ...\])</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>通信测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    通信测试</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;receive&quot;</span>&gt;</span>接收信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMain()&quot;</span>&gt;</span>发送消息给主线程<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./render.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendMain</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;退出程序&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>main.js</code> 主进程里面 <code>ipcMain.on</code> 进行监听，这里退出程序</p>
</blockquote>
<p><code>ipcMain.on(channel, listener)</code></p>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>监听 <code>channel</code>, 当新消息到达，将通过 <code>listener(event, args...)</code> 调用 <code>listener</code>.</p>
<p>还有个 <code>ipcMain.once(channel, listener)</code>为事件添加一个一次性用的<code>listener</code> 函数.这个 <code>listener</code> 只有在下次的消息到达 <code>channel</code> 时被请求调用，之后就被删除了.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, <span class="function">(<span class="params">event, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (info === <span class="string">&#x27;退出程序&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果图</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22c4401cffd7415ba5a167dc9778bd48~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="50"></p>
<p>这样就方便里我做一些窗口交互，比如<code>todoList</code>,到时间了右下角弹出一个新的窗口进行提醒</p>
<h3 id="8-3渲染进程到渲染进程"><a href="#8-3渲染进程到渲染进程" class="headerlink" title="8.3渲染进程到渲染进程"></a>8.3渲染进程到渲染进程</h3><p><code>ipcRenderer.sendTo(webContentsId, channel, ...args)</code></p>
<ul>
<li><code>webContentsId</code> Number</li>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<p>通过 <code>channel</code> 发送消息到带有 <code>webContentsId</code> 的窗口.</p>
<p>前提是要知道对应的渲染进程的<code>ID</code></p>
<p>当然也可以让主进程作为中转站，先发到主进程在到其他的渲染进程</p>
<h2 id="9-Vue-Electron"><a href="#9-Vue-Electron" class="headerlink" title="9.Vue + Electron"></a>9.Vue + Electron</h2><p>那么 <code>Vue</code> 怎么使用 <code>Electron</code> 打包呢？毕竟学习这个初衷，就是把 <code>Vue</code> 项目变成一个桌面应用，前面讲的都是原生的方法，那么继续往下面看吧</p>
<h3 id="9-1你需要有个Vue项目"><a href="#9-1你需要有个Vue项目" class="headerlink" title="9.1你需要有个Vue项目"></a>9.1你需要有个Vue项目</h3><p>如果手上没有，那么用 <code>vue ui</code> 创建一个<code>Vue</code>项目/或者直接在命令行里用 <code>vue create</code> 创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>
<p>相信大家都会，这里我就是简单用<code>vue ui</code>的建一个，这里大家可以略过</p>
<p>默认打开一个8000端口的服务，一个可视化的UI界面就出来了</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2e6923ef74c4f6ea63a1242f4666123~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005094817591"></p>
<blockquote>
<p>选择左下角 更多—-&gt;项目管理器</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76c99d4115fc4fa59562e91cb4f75002~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005095048918"></p>
<blockquote>
<p>创建</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afac3ffe606b4b46aa755acfaa838f9c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005095255377"></p>
<blockquote>
<p>选择好目录后在此创建</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e5f0460dcf54e77905a256fc9656569~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005095412222"></p>
<blockquote>
<p>填写一些基本信息，包管理我这里用 npm ，然后下一步</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90b600e4a09446b6996e52bf2d466ccb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005095517636"></p>
<blockquote>
<p>选择预设，我这里选手动</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f993f6435df4dc1acfbaba2a455f9b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005095738225"></p>
<blockquote>
<p>需要哪些插件选哪些，我这里就默认了，因为是个简单的例子</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ccff58b126f4525bc3aedae85b20d37~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005095856488"></p>
<blockquote>
<p>选择 Vue 的版本2.x 还是 3这些按照你的习惯来，平时写什么选什么,下面的选项我选择的标准</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2c5865a163f451697b9b683f23e7c02~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005100020344"></p>
<blockquote>
<p>创建项目</p>
</blockquote>
<p>我这里就不保存预设了，然后就是漫长的等待<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e1fba4cee344604850def265dbb9951~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005100221788"></p>
<blockquote>
<p>创建完毕后运行改项目</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0711e3fde3644d1689b574ac2e353d5f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005102004448"></p>
<blockquote>
<p>启动项目</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36896a3101db45069c8dbd833f950a0a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005102132311"></p>
<p>就会得到一个这样的默认页面</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33574a90ca55482faca8c36cffbb22fb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005102159772"></p>
<p>好了创建项目完毕，继续</p>
<h3 id="9-2添加-electron-插件"><a href="#9-2添加-electron-插件" class="headerlink" title="9.2添加 electron 插件"></a>9.2添加 <code>electron</code> 插件</h3><blockquote>
<p>在插件—&gt;添加插件 搜索 <code>vue-cli-plugin-electron-builder</code>,安装第一个</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ef4ce8185e84d56b9e7378bf43633aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005102527050"></p>
<blockquote>
<p>我这里默认选择electorn 13.0.0版本</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0273671757f4d6285f2780955188d7a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005102834003"></p>
<blockquote>
<p>安装完成后会出现在已安装插件里面</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98682a2056cd495abd173a697421790b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005103108921"></p>
<p>当然也可以在 命令行中进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add electron-builder</span><br></pre></td></tr></table></figure>
<h3 id="9-3运行"><a href="#9-3运行" class="headerlink" title="9.3运行"></a>9.3运行</h3><blockquote>
<p>在当前vue项目下的命令行输入下面的命令运行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d5fc62b8e1b40eda84c32e1bd3c2080~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005103731994"></p>
<p>很好，已经运行出来了</p>
<h3 id="9-4-package-json-background-js"><a href="#9-4-package-json-background-js" class="headerlink" title="9.4 package.json``background.js"></a>9.4 <code>package.json``background.js</code></h3><p>查看<code>package.json</code>文件找找主进程文件在哪</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a9c7dd81b6f458bb0e26835c0c9c2b4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005104023792"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33301c3825a44c6a81a1dfde40a3ad0f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005104135614"></p>
<blockquote>
<p>主进程文件是 <code>background.js</code>，这个文件在 <code>Vue项目/src/下面</code></p>
</blockquote>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app, protocol, <span class="title class_">BrowserWindow</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProtocol &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-cli-plugin-electron-builder/lib&#x27;</span></span><br><span class="line"><span class="keyword">import</span> installExtension, &#123; <span class="variable constant_">VUEJS_DEVTOOLS</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;electron-devtools-installer&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protocol.<span class="title function_">registerSchemesAsPrivileged</span>(\[</span><br><span class="line">  &#123; <span class="attr">scheme</span>: <span class="string">&#x27;app&#x27;</span>, <span class="attr">privileges</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span>, <span class="attr">standard</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line">\])</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="attr">nodeIntegration</span>: process.<span class="property">env</span>.<span class="property">ELECTRON</span>\_NODE\_INTEGRATION,</span><br><span class="line">      <span class="attr">contextIsolation</span>: !process.<span class="property">env</span>.<span class="property">ELECTRON</span>\_NODE\_INTEGRATION</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">WEBPACK</span>\_DEV\_SERVER_URL) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> win.<span class="title function_">loadURL</span>(process.<span class="property">env</span>.<span class="property">WEBPACK</span>\_DEV\_SERVER_URL)</span><br><span class="line">    <span class="keyword">if</span> (!process.<span class="property">env</span>.<span class="property">IS_TEST</span>) win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">createProtocol</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    win.<span class="title function_">loadURL</span>(<span class="string">&#x27;app://./index.html&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isDevelopment &amp;&amp; !process.<span class="property">env</span>.<span class="property">IS_TEST</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">installExtension</span>(<span class="variable constant_">VUEJS_DEVTOOLS</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Vue Devtools failed to install:&#x27;</span>, e.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">    process.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === <span class="string">&#x27;graceful-exit&#x27;</span>) &#123;</span><br><span class="line">        app.<span class="title function_">quit</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.<span class="title function_">on</span>(<span class="string">&#x27;SIGTERM&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      app.<span class="title function_">quit</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到上面的主进程文件是不是很熟悉，你可以像以前一样做一些操作，使用node混写完成一些功能</p>
<h3 id="9-5打包"><a href="#9-5打包" class="headerlink" title="9.5打包"></a>9.5打包</h3><p>上面我们只是运行出来了，上交的软件，老师总不会还特意去配环境，然后<code>npm run electron:serve</code>吧，显然是不可能的，那我们继续进行打包成一个可执行的文件exe</p>
<p>命令行执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run electron:build</span><br></pre></td></tr></table></figure>
<h4 id="打包出现的问题"><a href="#打包出现的问题" class="headerlink" title="打包出现的问题"></a>打包出现的问题</h4><blockquote>
<p>我在打包的时候特别不顺利… 查来查去原来<code>electron</code> 是有问题</p>
</blockquote>
<p>我给出的建议就是 把<code>node_modules</code>目录下的 <strong>electron 删除</strong></p>
<p>用<code>cnpm</code> 安装 <code>electron</code></p>
<p>如果没有 <code>cnpm</code> 先进行安装</p>
<blockquote>
<p>全局安装<code>cnpm</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重新安装 <code>electron</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i electron</span><br></pre></td></tr></table></figure>
<blockquote>
<p>打包</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run <span class="attr">electron</span>:build</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7678cbda1804561935ae8ef6de76dcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005131543735"></p>
<p>打包完成，打包的文件就放在项目下的 <code>dist_electron</code> 里面</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/724e565bb55544f2875b79dcf918c8f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005131647326"></p>
<h3 id="9-6安装"><a href="#9-6安装" class="headerlink" title="9.6安装"></a>9.6安装</h3><blockquote>
<p>双击就自动安装了</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e0725f12ac14e968284a61308834a68~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005131805110"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c6ffdb7f54c428fb7bd774222edee60~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005131940327"></p>
<p>桌面上就出现这么一个应用图标</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47def2592a1543b0901f34313dc75466~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005132041458"></p>
<h3 id="9-7自定义"><a href="#9-7自定义" class="headerlink" title="9.7自定义"></a>9.7自定义</h3><p>点进去查看没有问题，但是是不是太low 了，一点击就是自动安装，而且使用的默认图标</p>
<blockquote>
<p>安装打包工具</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i electron-builder --D</span><br></pre></td></tr></table></figure>
<h4 id="9-7-1-首先找一个-icon-图片"><a href="#9-7-1-首先找一个-icon-图片" class="headerlink" title="9.7.1.首先找一个 icon 图片"></a>9.7.1.首先找一个 <code>icon</code> 图片</h4><p>好像有插件可以把图片转为各种大小的<code>icon</code></p>
<p>安装下，这样就不用网站上转图片了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i electron-icon-builder</span><br></pre></td></tr></table></figure>
<p>需要在<code>package.json</code>中<code>scripts</code>添加<code>build-icon</code>指令</p>
<p><code>longzhu.jpg</code> 这个图片自己找的 卡卡罗特 可以自行修改</p>
<p><code>output</code> 是输出文件夹</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build-icon&quot;</span>: <span class="string">&quot;electron-icon-builder --input=./public/longzhu.jpg --output=build --flatten&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>命令行输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build-icon</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ceecc86d39184d8c8d1703b4bfbe28a8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005141605242"></p>
<p>build完成之后，生成了不同大小的图片</p>
<h4 id="9-7-2-vue-config-js"><a href="#9-7-2-vue-config-js" class="headerlink" title="9.7.2.vue.config.js"></a>9.7.2.vue.config.js</h4><p>因为我们之前安装的插件是 <code>vue-cli-plugin-electron-builder</code> ，而不是<code>electron-builder</code></p>
<p><code>electron-builder</code>打包普通项目，<code>build</code> 配置直接在<code>package.json</code> 里面写</p>
<p><code>vue-cli-plugin-electron-builder</code>的 <code>build</code> 配置是需要在 项目根目录下 <code>vue.config.js</code> 里面配置</p>
<p>如果没有请新建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">electronBuilder</span>: &#123;</span><br><span class="line">      <span class="attr">builderOptions</span>: &#123;</span><br><span class="line">        <span class="attr">appId</span>: <span class="string">&quot;com.test.app&quot;</span>,</span><br><span class="line">        <span class="attr">productName</span>: <span class="string">&quot;Lang&quot;</span>,</span><br><span class="line">        <span class="attr">copyright</span>: <span class="string">&quot;Copyright © 2021&quot;</span>,</span><br><span class="line">        <span class="attr">directories</span>: &#123;</span><br><span class="line">          <span class="attr">output</span>: <span class="string">&quot;./dist&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">win</span>: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="attr">icon</span>: <span class="string">&quot;./build/icons/icon.ico&quot;</span>,</span><br><span class="line">          <span class="attr">target</span>: \[</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">target</span>: <span class="string">&quot;nsis&quot;</span>,</span><br><span class="line">              <span class="attr">arch</span>: \[</span><br><span class="line">                <span class="string">&quot;x64&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ia32&quot;</span></span><br><span class="line">              \]</span><br><span class="line">            &#125;</span><br><span class="line">          \]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">nsis</span>: &#123;</span><br><span class="line">          <span class="attr">oneClick</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">language</span>: <span class="string">&quot;2052&quot;</span>,</span><br><span class="line">          <span class="attr">perMachine</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">allowToChangeInstallationDirectory</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="9-7-3-执行打包"><a href="#9-7-3-执行打包" class="headerlink" title="9.7.3.执行打包"></a>9.7.3.执行打包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run electron:build</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41fdf3c10fae49f8afccb04c8ec79a21~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005143529020"></p>
<p>OK，打包成功！</p>
<p><strong>可能遇到的问题</strong></p>
<p>打包的路上不是一帆风顺的，在这一步打包失败了，因为打包的时候去下载一些依赖，然后下载失败了</p>
<p>解决方法1：梯子</p>
<p>解决方法2： <a href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Fwm9028%2Farticle%2Fdetails%2F114583011" title="https://blog.csdn.net/wm9028/article/details/114583011">可以参考这个</a></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25942115043b41e1ab4d86fbd36b72ef~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005143747806"></p>
<blockquote>
<p>打包好的东西</p>
</blockquote>
<p>打包好的东西放在我们之前配置的<code>build``output: &quot;./dist&quot;</code> //输出文件路径</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ac1db1992be43e2982b9ef0292e8189~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005144321420"></p>
<p>可以看出图标变了</p>
<p><img src="https://juejin.cn/post/%E5%B0%8F%E6%B5%AA%E5%AD%A6%E4%B9%A0Electron.assets/image-20211005144400797.png" alt="image-20211005144400797"></p>
<p>我们可以自定义安装文件夹了</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7e48cb6089941d4931870360c333b94~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005144559596"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4e56d80bc164586b8379113709c42cd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211005144749686"></p>
<p>好了，基础的打包工作就这么结束了，大家可以自己写属于自己的软件，这里只是一个简单的应用教学</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>Electron</code> 真的不错诶，建议大家学习的时候多看看官方的文档，虽然官方文档还有很多地方没有翻译完整，但是并不影响我们去学习他的热情，感觉版本迭代很快，官方文档显得又多又乱，大家可以在文档上面搜索</p>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.electronjs.org%2Fdocs" title="https://www.electronjs.org/docs">Electron官方文档</a></p>
<blockquote>
<p>往期精彩</p>
</blockquote>
<p><a href="https://juejin.cn/post/7006518993385160711" title="https://juejin.cn/post/7006518993385160711">还不会Vue3？一篇笔记带你快速入门</a></p>
<p><a href="https://juejin.cn/post/6999440503712251935" title="https://juejin.cn/post/6999440503712251935">还不会TS？ 带你 TypeScript 快速入门</a></p>
<p><a href="https://juejin.cn/post/6994337441314242590" title="https://juejin.cn/post/6994337441314242590">快速上手Vuex 到 手写简易 Vuex</a></p>
<p><a href="https://juejin.cn/post/6990582632270528525" title="https://juejin.cn/post/6990582632270528525">从了解到深入虚拟DOM和实现diff算法</a></p>
<p><a href="https://juejin.cn/post/6989106100582744072" title="https://juejin.cn/post/6989106100582744072">手写一个简易vue响应式带你了解响应式原理</a></p>
<p><a href="https://juejin.cn/post/6988316779818778631" title="https://juejin.cn/post/6988316779818778631">从使用到自己实现简单Vue Router看这个就行了</a></p>
<p><a href="https://juejin.cn/post/6983934602196811789" title="https://juejin.cn/post/6983934602196811789">前端面试必不可少的基础知识，虽然少但是你不能不知道</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Electron</tag>
        <tag>桌面应用</tag>
      </tags>
  </entry>
  <entry>
    <title>快速入门Webpack的简单使用</title>
    <url>/xiaolangwiki/2022/01/02/42/</url>
    <content><![CDATA[<h2 id="快速入门-Webpack-的简单使用"><a href="#快速入门-Webpack-的简单使用" class="headerlink" title="快速入门 Webpack 的简单使用"></a>快速入门 Webpack 的简单使用</h2><p>原文：<a href="https://juejin.cn/post/7048497932647006216">https://juejin.cn/post/7048497932647006216</a></p>
<blockquote>
<p>前言</p>
</blockquote>
<p>大家好呀，我是小浪，这次给大家带来的是我以前学习<code>webpack</code>如何使用的时候的学习总结，希望能够帮助到有需要的朋友，在学校里的事挺多的，所以好久都没有在掘金发文章。要放假了，继续坚持学习，刷到林三心大佬的 B 站视频，三心大佬他自己写文章然后去分享给他人，是一种快速学习的途径，我认为对于我来说也是十分正确，在分享的同时自己印象也会深刻</p>
<p><strong>Webpack 简介</strong>：</p>
<blockquote>
<p>Webpack 是目前主流的前端工程化解决方案之一</p>
<p><strong>主要功能</strong>：它提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端 JavaScript 的兼容性、性 能优化等强大的功能。</p>
<p><strong>好处</strong>：让程序员把工作的重心放到具体功能的实现上，提高了前端开发效率和项目的可维护性。 注意：目前 Vue，React 等前端项目，基本上都是基于 webpack 进行工程化开发的</p>
</blockquote>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>项目结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">project_name</span><br><span class="line">|—— src</span><br><span class="line">|    |—— index.js</span><br><span class="line">|—— index.html</span><br><span class="line">|—— package.json</span><br><span class="line">|—— webpack.config.js</span><br><span class="line">|—— babel.config.js</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在项目中安装 webpack + webpack-cli，使用 <code>-D</code> 相当于 <code>--save-dev</code></p>
<p><code>-D</code> 写入到<code>package.json</code>中 <code>devDependencies</code>进行添加，表示我们只有在开发阶段才使用到</p>
<p><code>-S</code> 相当于 <code>--save</code> 写入到 <code>dependencies</code> 对象，表示开发环境和生产都使用</p>
<p>如果项目没有 <code>package.json</code> 使用 <code>npm init -y</code> 快速配置一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack@5.42.1 webpack-cli@4.9.0 -D</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.42.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置启动命令"><a href="#配置启动命令" class="headerlink" title="配置启动命令"></a>配置启动命令</h3><p>在<code>package.json</code>配置 <code>scripts</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>在命令行我们就使用 <code>npm run dev</code> 来启动 <code>webpack</code>命令</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建-webpack-config-js-文件"><a href="#创建-webpack-config-js-文件" class="headerlink" title="创建 webpack.config.js 文件"></a>创建 webpack.config.js 文件</h3><p>在项目根目录中，创建名为 webpack.config.js 的 webpack 配置文件，webpack 在真正开始打包构建之前，会先读取这个配置文件，从而基于给定的配置，对项目进行打包。</p>
<h3 id="设置-mode"><a href="#设置-mode" class="headerlink" title="设置 mode"></a>设置 mode</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>mode</code> 可选值有两个，分别是：</p>
<blockquote>
<p><code>development</code></p>
<ul>
<li>开发环境</li>
<li>不会对打包生成的文件进行代码压缩和性能优化</li>
<li>打包速度快，适合在开发阶段使用</li>
</ul>
<p><code>production</code></p>
<ul>
<li>生产环境</li>
<li>会对打包生成的文件进行代码压缩和性能优化</li>
<li>打包速度很慢，仅适合在项目发布阶段使用</li>
</ul>
</blockquote>
<h3 id="设置入口和出口"><a href="#设置入口和出口" class="headerlink" title="设置入口和出口"></a>设置入口和出口</h3><p>webpack 4.x 和 5.x 中默认约定：</p>
<ul>
<li>默认入口文件为 <code>src -&gt; index.js</code></li>
<li>默认输出文件 <code>dist -&gt; main.js</code></li>
</ul>
<p>我们可以在<code>webpack.config.js</code>中自定义</p>
<p><code>entry</code>：打包的入口</p>
<p><code>output</code>：打包的出口</p>
<p>我们就可以像下面一样设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: <span class="string">&quot;./dist/mian.js&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>还是这样写比较好，使用<code>path</code>模块来拼接路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./src/index.js&quot;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="webpack-dev-server-简单使用"><a href="#webpack-dev-server-简单使用" class="headerlink" title="webpack-dev-server 简单使用"></a>webpack-dev-server 简单使用</h2><p>当修改了源代码，<code>webpack</code> 会自动进行项目的打包和构建，这个就不用每次自己去<code>npm run dev</code>了</p>
<p><code>webpack-dev-server</code> 提供热更新的开发服务器</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server@3.11.2 -D</span><br></pre></td></tr></table></figure>
<p>安装完毕之后可通过 <code>webpack serve</code> 启动</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>方便<code>webpack-dev-server</code>的启动我们在<code>package.json</code>的<code>scripts</code>新加一个命令</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>在<code>webpack.config.js</code>配置端口，<code>devServer</code>可配置的选项有很多，我在这里就配置一个端口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>devServer.compress，启用 gzip 压缩。</p>
<p>devServer.contentBase，告诉服务器从哪里提供内容。只有在你想要提供静态文件时才需要。</p>
<p>devServer.host，指定 host。使用 0.0.0.0 可以让局域网内可访问。</p>
<p>devServer.hot，启用 webpack 的模块热替换特性（Hot Module Replacement）。</p>
<p>devServer.hotOnly，构建失败的时候是否不允许回退到使用刷新网页。</p>
<p>devServer.inline，模式切换。默认为内联模式，使用 false 切换到 iframe 模式。</p>
<p>devServer.open，启动 webpack-dev-server 后是否使用浏览器打开首页。</p>
<p>devServer.overlay，是否允许使用全屏覆盖的方式显示编译错误。默认不允许</p>
<p>devServer.port，监听端口号。默认 8080。</p>
<p>devServer.proxy，代理，对于另外有单独的后端开发服务器 API 来说比较适合。</p>
<p>devServer.publicPath，设置内存中的打包文件的输出目录。区别于 output.publicPath。</p>
</blockquote>
<p>修改后使用 <code>npm run serve</code> 进行项目的打包</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05445615b7d24fda9a42568be26c67ff~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211225133914336"></p>
<p>打包完毕后，启动一个实时打包的 <code>http</code> 服务器，提示我们访问 <code>http://localhost:8080/</code>，访问之后就可以查看我们页面效果</p>
<h3 id="打包的文件"><a href="#打包的文件" class="headerlink" title="打包的文件"></a>打包的文件</h3><p>打包生成的文件存放到了内存中，因为内存更快，提高实时打包的性能，所以上面设置的<code>output</code>的输出路径是针对<strong>没有安装</strong><code>webpack-dev-server</code>来说的</p>
<p>如何访问我们打包好的<code>bundel.js</code>呢，因为 <code>webpack-dev-server</code> 开启了一个服务器，<code>/</code>是项目的根目录，我们直接在<strong>地址栏</strong>就能访问到<code>bundle.js</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/898d1a90f1e04ee8ae218ee1fc5a937d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211225135310863"></p>
<h2 id="插件-plugin"><a href="#插件-plugin" class="headerlink" title="插件 plugin"></a>插件 plugin</h2><p>通过安装和配置第三方的插件，可以拓展 <code>webpack</code> 使它更强大</p>
<h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><p>这个插件我们会经常使用到它，将公共的<code>css</code>，<code>js</code>文件插入到 html 中，可以减少请求次数，达到优化的效果，以通过此插件自定制 <code>index.html</code> 页面的内容。</p>
<p>HTML 插件在生成的 <code>index.html</code> 页面，自动注入了打包的 <code>bundle.js</code> 文件</p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin@5.3.2 -D</span><br></pre></td></tr></table></figure>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>在 <code>webpack.config.js</code> 的 <code>plugins</code> 进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: \[</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./src/index.html&#x27;</span>),</span><br><span class="line">      <span class="attr">filename</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./dist/index.html&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  \],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HtmlWebpackPlugin</code>有很多可选的参数，我就说下面三个常用的</p>
<blockquote>
<p><strong><code>title</code></strong>: 生成的 html 文档的标题。配置该项，它并不会替换指定模板文件中的 title 元素的内容</p>
<p><strong><code>template</code></strong>: 本地模板文件的位置，支持加载器(如 handlebars、ejs、undersore、html 等)</p>
<p><strong><code>filename</code></strong>：输出文件的文件名称，默认为<strong>index.html</strong>，不配置就是该文件名；此外，还可以为输出文件指定目录位置（例如’./dist/index.html’）</p>
</blockquote>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>运行命令 <code>npm run dev</code> 就可以看见打包完成</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b66e1783df734f88a0b9c76e1f1d0005~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211225142229881"></p>
<p>如果是用 <code>npm run serve</code> 就不会有这两个，而是都在内存中，我们可以使用地址栏查看</p>
<h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><p>时自动清理掉 dist 目录中的旧文件</p>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install clean-webpack-plugin@3.0.0 -D</span><br></pre></td></tr></table></figure>
<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>在 <code>webpack.config.js</code> 的 <code>plugins</code> 进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">ClenWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: \[</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ClenWebpackPlugin</span>(),</span><br><span class="line">  \],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="加载器-loader"><a href="#加载器-loader" class="headerlink" title="加载器 loader"></a>加载器 loader</h2><p>非 <code>.js</code> 后缀模块<code>webpack</code>默认处理不了只能理解 <code>JavaScript</code> 和 <code>JSON</code> 文件，需要调用<code>loader</code>加载器才可以正常打包</p>
<p><code>loader</code> 加载器的作用：<strong>导出为函数的 <code>JavaScript</code> 模块</strong>。比如：</p>
<blockquote>
<ul>
<li>css-loader 打包处理 .css 相关的文件</li>
<li>less-loader 打包处理 .less 相关的文件</li>
<li>babel-loader 打包处理 webpack 无法处理的高级 js 语法</li>
</ul>
</blockquote>
<h3 id="loader-调用流程"><a href="#loader-调用流程" class="headerlink" title="loader 调用流程"></a>loader 调用流程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ce4b9fc6f334ca6a27cfb9a444f03d4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20211225143748510"></p>
<h3 id="打包-css"><a href="#打包-css" class="headerlink" title="打包 css"></a>打包 css</h3><h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i style-loader@3.0.0 css-loader@5.2.6 -D</span><br></pre></td></tr></table></figure>
<h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><p>其中，<code>test</code> 表示匹配的文件类型（用正则）， <code>use</code> 表示对应要调用的 <code>loader</code> 注意：</p>
<ul>
<li><code>use</code> 数组中指定的 <code>loader</code> 顺序是固定的</li>
<li><code>loader</code>调用顺序是：从右往左</li>
</ul>
<p>在 <code>webpack.config.js</code> 的 <code>module</code> 进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: \[<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>\],</span><br><span class="line">      &#125;,</span><br><span class="line">    \],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打包-less"><a href="#打包-less" class="headerlink" title="打包 less"></a>打包 less</h3><h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i less-loader@10.0.1 less@4.1.1 -D</span><br></pre></td></tr></table></figure>
<h4 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h4><p>在 <code>webpack.config.js</code> 的 <code>module</code> 进行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\\.less$/,</span><br><span class="line">        use: \[<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader\],</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    \],</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>其他的 css 打包处理也一样安装指定的加载器</p>
<h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><p><code>loader</code>除了能打包<code>css</code>的之外，我们使用 <code>file-loader``url-loader</code>还可以对<code>url</code>引用的图片进行处理</p>
<h4 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i url-loader@4.1.1 file-loader@6.2.0 -D</span><br></pre></td></tr></table></figure>
<h4 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h4><p>在 <code>webpack.config.js</code> 的 <code>module</code> 进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.jpg|png|gif$/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">           	<span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">limit</span>: <span class="number">77777</span>,</span><br><span class="line">                <span class="attr">outputPath</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    \],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>options</code>是 <code>loader</code> 的参数项：</p>
<p><code>limit</code> 用来指定图片的大小，单位是字节（byte）只有 ≤ limit 大小的图片，才会被转为 base64 格式的图片</p>
<p><code>outputPath</code>:是指定的存储文件夹 <code>dist/image</code> 把图片文件统一生成到 image 目录中</p>
</blockquote>
<h3 id="babel-loader-简单使用"><a href="#babel-loader-简单使用" class="headerlink" title="babel-loader 简单使用"></a>babel-loader 简单使用</h3><p>借助于 <code>babel-loader</code> 进行打包处理 js 中的高级语法</p>
<h4 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D</span><br></pre></td></tr></table></figure>
<h4 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h4><p>在 <code>webpack.config.js</code> 的 <code>module</code> 进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">    \],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：记得使用<code>exclude</code>排除掉 <code>/node_modules/</code>下面的模块</p>
</blockquote>
<p>在项目根目录下，创建 <code>babel.config.js</code> 文件进行配置</p>
<p>声明 <code>babel</code> 可用的插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: \[\[<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123; <span class="attr">legacy</span>: <span class="literal">true</span> &#125;\]\],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>开发环境打包生成的文件不会进行代码压缩和性能优化，而且存放在内存中，所以在生产环境中打包发布</p>
<p>在 <code>package.json</code>的<code>scripts</code>中新增</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode production&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>之后使用 <code>npm run build</code> 就直接打包发布了，这个 <code>--model</code> 是 <code>production</code> 代表生产环境，会对打包生成的文件 进行代码压缩和性能优化。 这里覆盖 <code>webpack.config.js</code> 中的 <code>model</code> 选项</p>
<h2 id="webpack-创建-Vue-项目"><a href="#webpack-创建-Vue-项目" class="headerlink" title="webpack 创建 Vue 项目"></a>webpack 创建 Vue 项目</h2><p>其实大家使用 <code>vue-cli</code> 和 <code>vue ui</code> 搭建出来的<code>vue</code>项目<code>webpack</code>都帮我们配置好了，这里我介绍下如何用 <code>webpack</code> 创建 <code>vue</code> 项目。</p>
<h3 id="初始化项目目录"><a href="#初始化项目目录" class="headerlink" title="初始化项目目录"></a>初始化项目目录</h3><p>建立项目文件夹之后初始化<code>package.json</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p>在项目根目录创建 webpack 配置文件 <code>webpack.config.js</code> 在真正的开发中分开发环境和生产环境，这里为了方便就只写一个。</p>
<p><code>index.js</code>:入口文件</p>
<p><code>index.html</code>:入口文件模板</p>
<p><code>babel.config.js</code>：babel 配置文件（先创建之后在说）</p>
<p>项目结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">project_name</span><br><span class="line">|—— src</span><br><span class="line">|    |—— index.js</span><br><span class="line">|    |—— App.vue</span><br><span class="line">|—— index.html</span><br><span class="line">|—— package.json</span><br><span class="line">|—— webpack.config.js</span><br><span class="line">|—— babel.config.js</span><br></pre></td></tr></table></figure>
<h3 id="安装配置-webpack-相关"><a href="#安装配置-webpack-相关" class="headerlink" title="安装配置 webpack 相关"></a>安装配置 webpack 相关</h3><p>安装 <code>webpack``webpack-cli``webpack-dev-server</code> 依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack@5.42.1 webpack-cli@4.9.0 webpack-dev-server@3.11.2 -D</span><br></pre></td></tr></table></figure>
<p>配置 <code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --open --hot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode=development --progress --hide-modules&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./src/index.js&quot;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="安装配置-Vue-相关"><a href="#安装配置-Vue-相关" class="headerlink" title="安装配置 Vue 相关"></a>安装配置 <code>Vue</code> 相关</h3><p>安装 <code>vue</code> 需要的依赖 <code>vue-loader``vue-template-compiler</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>
<p>如果项目没有 <code>vue</code> 记得装 <code>vue</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code></p>
<blockquote>
<p>注意要引入 <code>VueLoaderPlugin</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">VueLoaderPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: \[</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\\.vue$/</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      \]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: \[</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()</span><br><span class="line">  \]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>html-webpack-plugin</code>和<code>clean-webpack-plugin</code>插件，这两个插件我们都上面都有介绍过</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin@5.3.2 clean-webpack-plugin@3.0.0 -D</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">	<span class="attr">plugins</span>: \[</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">     		<span class="attr">template</span>:<span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">		&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">	\],</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="安装加载器"><a href="#安装加载器" class="headerlink" title="安装加载器"></a>安装加载器</h3><p><code>style-loader</code>、<code>css-loader</code>、 <code>file-loader``url-loader</code>等等我们上面都有介绍如果需要<code>sass</code>、<code>less</code>加载器可自行安装，这里我安装的是<code>sass</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install style-loader@3.0.0 css-loader@5.2.6 url-loader@4.1.1 file-loader@6.2.0 sass-loader node-sass -D</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code></p>
<blockquote>
<p><code>sass</code>要把 <code>node_modules</code> 排除</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">   <span class="attr">module</span>: &#123;</span><br><span class="line">       <span class="attr">rules</span>: \[</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">test</span>: <span class="regexp">/\\.css$/</span>,</span><br><span class="line">               <span class="attr">use</span>: \[</span><br><span class="line">                   <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">               \]</span><br><span class="line">           &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">           <span class="attr">test</span>: <span class="regexp">/\\.jpg|png|gif$/</span>,</span><br><span class="line">           <span class="attr">use</span>: &#123;</span><br><span class="line">               <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">               <span class="attr">options</span>: &#123;</span><br><span class="line">                   <span class="attr">limit</span>: <span class="number">77777</span>,</span><br><span class="line">                   <span class="attr">outputPath</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">               	&#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="attr">test</span>: <span class="regexp">/\\.sass$/</span>,</span><br><span class="line">             <span class="attr">use</span>:\[<span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">             \],</span><br><span class="line">             <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname + <span class="string">&#x27;/src/&#x27;</span>),</span><br><span class="line">             <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">           &#125;,</span><br><span class="line">       \]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安装-bable"><a href="#安装-bable" class="headerlink" title="安装 bable"></a>安装 bable</h3><p>这里我安装几个常用的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install  babel-loader @babel/core @babel/cli @babel/preset-env -D</span><br><span class="line">npm install  @babel/runtime @babel/plugin-transform-runtime -D</span><br><span class="line">npm install  @babel/plugin-transform-arrow-functions -D</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code></p>
<blockquote>
<p>同样的和上面一样要把 <code>node_modules</code> 排除</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">   <span class="attr">module</span>: &#123;</span><br><span class="line">       <span class="attr">rules</span>: \[</span><br><span class="line"></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">               <span class="attr">use</span>: \[</span><br><span class="line">                   <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">               \],</span><br><span class="line">               <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">           &#125;,</span><br><span class="line">       \]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置 <code>babel.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">api</span>) &#123;</span><br><span class="line">    api.<span class="title function_">cache</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> presets = \[</span><br><span class="line">        <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">    \];</span><br><span class="line">    <span class="keyword">const</span> plugins = \[</span><br><span class="line">        <span class="string">&#x27;@babel/plugin-transform-arrow-functions&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span></span><br><span class="line">    \];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      presets,</span><br><span class="line">      plugins</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>最后我们就可以通过 <code>npm run serve</code>来启动<code>vue</code>项目了</p>
<h2 id="往期精彩："><a href="#往期精彩：" class="headerlink" title="往期精彩："></a>往期精彩：</h2><blockquote>
<p><a href="https://juejin.cn/post/7015476516196712462" title="https://juejin.cn/post/7015476516196712462">快速入手 Electron，拥有一个自己的桌面应用</a></p>
<p><a href="https://juejin.cn/post/7006518993385160711" title="https://juejin.cn/post/7006518993385160711">还不会 Vue3？一篇笔记带你快速入门</a></p>
<p><a href="https://juejin.cn/post/6999440503712251935" title="https://juejin.cn/post/6999440503712251935">还不会 TS？ 带你 TypeScript 快速入门</a></p>
<p><a href="https://juejin.cn/post/6994337441314242590" title="https://juejin.cn/post/6994337441314242590">快速上手 Vuex 到 手写简易 Vuex</a></p>
<p><a href="https://juejin.cn/post/6990582632270528525" title="https://juejin.cn/post/6990582632270528525">从了解到深入虚拟 DOM 和实现 diff 算法</a></p>
<p><a href="https://juejin.cn/post/6989106100582744072" title="https://juejin.cn/post/6989106100582744072">手写一个简易 vue 响应式带你了解响应式原理</a></p>
<p><a href="https://juejin.cn/post/6988316779818778631" title="https://juejin.cn/post/6988316779818778631">从使用到自己实现简单 Vue Router 看这个就行了</a></p>
<p><a href="https://juejin.cn/post/6983934602196811789" title="https://juejin.cn/post/6983934602196811789">前端面试必不可少的基础知识，虽然少但是你不能不知道</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试必不可少的基础知识，虽然少但是你不能不知道</title>
    <url>/xiaolangwiki/2021/07/12/28/</url>
    <content><![CDATA[<h2 id="前端面试必不可少的基础知识，虽然少但是你不能不知道"><a href="#前端面试必不可少的基础知识，虽然少但是你不能不知道" class="headerlink" title="前端面试必不可少的基础知识，虽然少但是你不能不知道"></a>前端面试必不可少的基础知识，虽然少但是你不能不知道</h2><blockquote>
<p>这个是小浪学习前端的时候对于一些面试的基础知识的总结（这里面没涉及框架），不是很全，一方面是和大家一起分享，有错误的地方请大家多多指教我这个新人，另一方面方便自己复习，自己总结做笔记也是加强印象的一种方式，加油喔！小浪努力学前端</p>
</blockquote>
<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="1-如何理解HTML语义化"><a href="#1-如何理解HTML语义化" class="headerlink" title="1.如何理解HTML语义化"></a>1.如何理解HTML语义化</h2><h3 id="为什么要语义化"><a href="#为什么要语义化" class="headerlink" title="为什么要语义化"></a>为什么要语义化</h3><ol>
<li><p>页面不止是给人看的，机器也要看爬虫也要看</p>
</li>
<li><p>如果全部都是div+css布局，有的时候页面因为一些原因加载不出来样式，全部都是div页面对用户不友好</p>
</li>
</ol>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>让人更加容易读懂，有利于构建清晰的结构(增加代码的可读性)</li>
<li>让搜索引擎更加容易读懂(方便SEO)</li>
</ol>
<h2 id="2-语义化的标签有哪些"><a href="#2-语义化的标签有哪些" class="headerlink" title="2.语义化的标签有哪些"></a>2.语义化的标签有哪些</h2><h3 id="html5之前的常用的语义化标签"><a href="#html5之前的常用的语义化标签" class="headerlink" title="html5之前的常用的语义化标签"></a>html5之前的常用的语义化标签</h3><p><code>h1~h6 p br ul ol li dl dt dd em strong table thead tobdy tfoot td th caption</code></p>
<p>注意的点：</p>
<ul>
<li><code>b</code>、<code>font</code>、<code>u</code>等纯样式标签不要使用</li>
<li><code>strong</code>是为了强调重要而加粗（不要用<code>b``b</code>是为了加粗而加粗），<code>em</code>是斜体是强调（不用<code>i``i</code>就是斜体）</li>
<li>每个<code>input</code>标签对应的说明文本都需要使用<code>label</code>标签</li>
<li>表单域要使用<code>fieldset</code>包起来，并使用<code>legend</code>说明表单的用途</li>
</ul>
<h3 id="html5新增的常用的语义化标签"><a href="#html5新增的常用的语义化标签" class="headerlink" title="html5新增的常用的语义化标签"></a>html5新增的常用的语义化标签</h3><p><code>header footer nav aside section artice</code></p>
<h2 id="3-块级元素-和-内联元素"><a href="#3-块级元素-和-内联元素" class="headerlink" title="3.块级元素 和 内联元素"></a>3.块级元素 和 内联元素</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素 :"></a>块级元素 :</h3><p><code>ul li ol dl dd dt table h1-h6 form p</code> 等等 <code>display : block</code></p>
<h3 id="内联元素-："><a href="#内联元素-：" class="headerlink" title="内联元素 ："></a>内联元素 ：</h3><p><code>a span b img input button</code> 等等 <code>display : inline-block</code></p>
<h3 id="样式转换："><a href="#样式转换：" class="headerlink" title="样式转换："></a>样式转换：</h3><ul>
<li><code>display:block</code> 行内元素转换为块级元素</li>
<li><code>display:inline</code> 块级元素转换为行内元素</li>
<li><code>display:inline-block</code> 转为内联元素</li>
</ul>
<h2 id="4-DOM怎么优化"><a href="#4-DOM怎么优化" class="headerlink" title="4.DOM怎么优化"></a>4.DOM怎么优化</h2><ul>
<li><p>可以使用伪元素,阴影实现的内容尽量不使用</p>
</li>
<li><p><code>DOM</code>实现，如清除浮动、样式实现等;按需加载，减少不必要的渲染;</p>
</li>
<li><p>结构合理，语义化标签</p>
</li>
<li><p>使用文档片段</p>
</li>
<li><p><code>DOM</code>缓存</p>
</li>
<li><p><code>innerHTML</code>代替<code>appendChild</code></p>
</li>
<li><p>虚拟<code>DOM</code></p>
</li>
</ul>
<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="1-盒子模型的宽度计算"><a href="#1-盒子模型的宽度计算" class="headerlink" title="1.盒子模型的宽度计算"></a>1.盒子模型的宽度计算</h2><h3 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型:"></a>标准盒子模型:</h3><blockquote>
<p>默认 <code>box-sizing : content-box</code></p>
<p>offsetWidth : 包括 width + border + padding (不包括margin)</p>
<p>比如这个例子</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#box &#123;</span><br><span class="line">	width : 20px;</span><br><span class="line">	padding : 20px;</span><br><span class="line">	margin : 20px;</span><br><span class="line">	border : 2px solid #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里计算就是 offsetWidth :</p>
<p><code>document.getElementById(&#39;box&#39;).offsetWidth``64</code></p>
</blockquote>
<h3 id="弹性盒子的计算"><a href="#弹性盒子的计算" class="headerlink" title="弹性盒子的计算"></a>弹性盒子的计算</h3><blockquote>
<p>加上 <code>box-sizing : border-box</code></p>
<p>总的宽度设置多少就是多少(width 设置多少就是多少)</p>
<p>然后内容的宽度是自己计算的</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#box &#123;</span><br><span class="line">	width : 80px;</span><br><span class="line">	padding : 20px;</span><br><span class="line">	margin : 20px;</span><br><span class="line">	border : 2px solid #ccc;</span><br><span class="line">	box-sizing : border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里计算就是 offsetWidth :</p>
<p><code>document.getElementById(&#39;box&#39;).offsetWidth``80</code></p>
<p>如果padding + border 的宽度大于 width</p>
<p>这个时候的offsetWidth 就是 padding + border了</p>
</blockquote>
<h2 id="2-marign纵向重叠的问题"><a href="#2-marign纵向重叠的问题" class="headerlink" title="2.marign纵向重叠的问题"></a>2.marign纵向重叠的问题</h2><blockquote>
<p>margin重叠是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界</p>
<p>比如就有以下的问题：</p>
</blockquote>
<h3 id="计算第一行和最后一行之间的距离"><a href="#计算第一行和最后一行之间的距离" class="headerlink" title="计算第一行和最后一行之间的距离"></a>计算第一行和最后一行之间的距离</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>末行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>中间的空着的p都没了 ，因为没有高度</p>
<p>最后一行和 第一行之间的距离是 <code>20px</code></p>
<p>因为在<code>margin</code>纵向会有重叠</p>
</blockquote>
<p>计算方法:</p>
<ul>
<li><p>全部都为正值，取最大者；</p>
</li>
<li><p>不全是正值，则都取绝对值，然后用正值的最大值减去绝对值的最大值；</p>
</li>
</ul>
<h2 id="3-margin负值"><a href="#3-margin负值" class="headerlink" title="3.margin负值"></a>3.margin负值</h2><ul>
<li><code>margin-top``margin-left</code>负值，元素向上、向左移动</li>
<li><code>margin-right</code> 负值 ，右侧元素左移(“后续元素”会被拉向指定方向)，元素自身不变</li>
<li><code>margin-bottom</code> 负值，右侧元素上移动(“后续元素”会被拉向指定方向), 元素自身不变</li>
</ul>
<h2 id="4-BFC"><a href="#4-BFC" class="headerlink" title="4.BFC"></a>4.BFC</h2><blockquote>
<p>全称：<code>Block Formatting Context</code>， 名为 “块级格式化上下文”。</p>
<p><code>BFC</code>是一个完全独立的空间（一块独立的渲染区域），让空间里的子元素不会影响到外面的布局</p>
</blockquote>
<h3 id="BFC规则"><a href="#BFC规则" class="headerlink" title="BFC规则"></a>BFC规则</h3><ul>
<li><code>BFC</code>就是一个块级元素，块级元素会在垂直方向一个接一个的排列</li>
<li><code>BFC</code>就是页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签</li>
<li>垂直方向的距离由margin决定， 属于同一个<code>BFC</code>的两个相邻的标签外边距会发生重叠</li>
<li>计算<code>BFC</code>的高度时，浮动元素也参与计算</li>
</ul>
<h3 id="形成BFC常见条件"><a href="#形成BFC常见条件" class="headerlink" title="形成BFC常见条件"></a>形成BFC常见条件</h3><ul>
<li><code>float</code> 不为 <code>none</code></li>
<li><code>position</code> 为 <code>absolute``fixed</code></li>
<li><code>overflow</code> 不是 <code>visible</code></li>
<li><code>display</code> 为 <code>flex``inline-block``table-cell</code>等</li>
</ul>
<blockquote>
<p>常用的情景 <code>清除浮动``margin重叠</code></p>
</blockquote>
<h2 id="5-float布局"><a href="#5-float布局" class="headerlink" title="5.float布局"></a>5.float布局</h2><blockquote>
<p>双飞翼布局 和 圣杯布局是PC端的经典布局了</p>
<p>两侧的宽度写死，中间的宽度自适应</p>
<p>公共结构如下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>公共样式</p>
<p>给<code>main</code>设置<code>width: 100%</code>,让它始终占满窗口，这样才有自适应的效果。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30vh</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3f906d5913046d194503a0a44bbbc70~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707110318546.png"></p>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><blockquote>
<p>为三个元素的父元素加上<code>padding</code>属性，腾开位置</p>
</blockquote>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30vh</span>;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>left要放到main的左边，设置<code>margin-left: -100%</code>,因为<code>margin</code>的百分比是相对与父元素的，所以需要整整一行的宽度才能补偿这个margin的值，所以left就能到main的位置。</p>
<p>然后再通过相对定位 right自身的宽度就到了最左边</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>right到main的右边，比如<code>margin-right: -200px;</code>，正好使main重叠right的宽度，因为设置了浮动所以right就会到main的右边了。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: -<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2454581fc9c54b79b36a65a13cf243eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707113141261.png"></p>
<h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>双飞翼布局需要更改下布局，因为main设置了100% ,不能直接给main设置margin</p>
<blockquote>
<p>样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">      <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">550px</span>;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">500px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30vh</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79b360649a7746c8b7c4812ec2434b11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707114727855.png"></p>
<blockquote>
<p>再创造一个内容层，将所有要显示的内容放到<code>wrap</code>中，给<code>wrap</code>设置<code>margin</code>就可以了</p>
<p>left要放到main的左边，设置<code>margin-left: -100%</code>,因为<code>margin</code>的百分比是相对与父元素的，所以需要整整一行的宽度才能补偿这个margin的值，所以left就能到main的左边。</p>
<p>接着让right到main的右边，只需要设置<code>margin-left</code>的值为负的right的宽，比如<code>margin-left: -200px;</code>，正好使main重叠right的宽度，因为设置了浮动所以right就会到main的右边了。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95249ccd36fd433da550d0b970518147~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707115153416.png"></p>
<h3 id="使用-flex也可以达到效果"><a href="#使用-flex也可以达到效果" class="headerlink" title="使用 flex也可以达到效果"></a>使用 flex也可以达到效果</h3><blockquote>
<p>css样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>html结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1266420a5def4c099915268a2f697a50~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210712104451124"></p>
<h3 id="使用定位来实现"><a href="#使用定位来实现" class="headerlink" title="使用定位来实现"></a>使用定位来实现</h3><blockquote>
<p>最常使用的是定位来实现</p>
<p>css样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构和上面一样</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b4aaf02bb14a789b34f660da77eabf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210712111146802"></p>
<h2 id="6-手写clearfix"><a href="#6-手写clearfix" class="headerlink" title="6.手写clearfix"></a>6.手写clearfix</h2><blockquote>
<p>一般的话有的时候会要求10s左右 手写clearfix ，写的时候最好熟练不要犹豫</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span> : table;</span><br><span class="line">    <span class="attribute">clear</span> : both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-flex实现一个三点的色子"><a href="#7-flex实现一个三点的色子" class="headerlink" title="7.flex实现一个三点的色子"></a>7.flex实现一个三点的色子</h2><h3 id="flex基础的语法"><a href="#flex基础的语法" class="headerlink" title="flex基础的语法"></a>flex基础的语法</h3><p>介绍几个常用的</p>
<p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<ul>
<li><code>row</code> 表示从左向右排列</li>
<li><code>row-reverse</code> 表示从右向左排列</li>
<li><code>column</code> 表示从上向下排列</li>
<li><code>column-reverse</code> 表示从下向上排列</li>
</ul>
<p><code>flex-wrap</code>可以让Flex项目换行排列。</p>
<ul>
<li><code>nowrap</code>(缺省)：所有Flex项目单行排列</li>
<li><code>wrap</code>：所有Flex项目多行排列，按从上到下的顺序</li>
<li><code>wrap-reverse</code>：所有Flex项目多行排列，按从下到上的顺序</li>
</ul>
<p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p>
<p><code>justify-content</code>属性定义了项目在主轴上的对齐方式及额外空间的分配方式。</p>
<ul>
<li><code>flex-start</code>(缺省)：从启点线开始顺序排列</li>
<li><code>flex-end</code>：相对终点线顺序排列</li>
<li><code>center</code>：居中排列</li>
<li><code>space-between</code>：项目均匀分布，第一项在启点线，最后一项在终点线</li>
<li><code>space-around</code>：项目均匀分布，每一个项目两侧有相同的留白空间，相邻项目之间的距离是两个项目之间留白的和</li>
<li><code>space-evenly</code>：项目均匀分布，所有项目之间及项目与边框之间距离相等</li>
</ul>
<p><code>align-items</code>属性定义项目在交叉轴上的对齐方式。</p>
<ul>
<li><code>stretch</code>(缺省)：交叉轴方向拉伸显示</li>
<li><code>flex-start</code>：项目按交叉轴起点线对齐</li>
<li><code>flex-end</code>：项目按交叉轴终点线对齐</li>
<li><code>center</code>：交叉轴方向项目中间对齐</li>
<li><code>baseline</code>：交叉轴方向按第一行文字基线对齐</li>
</ul>
<p><code>align-content</code>属性定义了在交叉轴方向的对齐方式及额外空间分配，类似于主轴上<code>justify-content</code>的作用。</p>
<ul>
<li><code>stretch</code> (缺省)：拉伸显示</li>
<li><code>flex-start</code>：从启点线开始顺序排列</li>
<li><code>flex-end</code>：相对终点线顺序排列</li>
<li><code>center</code>：居中排列</li>
<li><code>space-between</code>：项目均匀分布，第一项在启点线，最后一项在终点线</li>
<li><code>space-around</code>：项目均匀分布，每一个项目两侧有相同的留白空间，相邻项目之间的距离是两个项目之间留白</li>
</ul>
<h3 id="来实现一个三点的色了-简单"><a href="#来实现一个三点的色了-简单" class="headerlink" title="来实现一个三点的色了(简单)"></a>来实现一个三点的色了(简单)</h3><blockquote>
<p>实现的思路就是使用flex布局。主轴是<code>space-between</code>。</p>
<p>第2个点交叉轴方向是居中对齐。 第3个点项目按交叉轴终点线对齐。</p>
<p>结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">      <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.item</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">210</span>, <span class="number">225</span>, <span class="number">228</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="attribute">align-self</span>: center;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/881c5ed898de4ea3addde083f9bf757e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707122433924.png"></p>
<h2 id="8-定位"><a href="#8-定位" class="headerlink" title="8.定位"></a>8.定位</h2><blockquote>
<p>absolute relative fixed 相对什么定位</p>
</blockquote>
<ul>
<li><code>static</code>默认的position值,无特殊定位，遵循标准文档流</li>
<li><code>relative</code>相对于自身定位 ，但是还是占据原来的空间，同时可通过<code>z-index</code>定义层叠关系。</li>
<li><code>absolute</code> 相对于该元素最近的已定位的祖先元素，如果没有一个祖先元素设置定位，那么参照物是<code>body</code>层。不占据原来的空间，同时可通过<code>z-index</code>定义层叠关系。</li>
<li><code>fixed</code>相对于浏览器窗口进行固定定位，同时可通过<code>z-index</code>定义层叠关系。如果他的祖先元素有<code>transform</code>这个属性，它会参考他做固定定位</li>
</ul>
<h2 id="9-居中对齐的实现方式"><a href="#9-居中对齐的实现方式" class="headerlink" title="9.居中对齐的实现方式"></a>9.居中对齐的实现方式</h2><blockquote>
<p>水平居中</p>
</blockquote>
<ul>
<li><code>inline</code> 元素 : <code>text-align : center</code></li>
<li><code>block</code> 元素 : <code>margin : auto</code></li>
<li><code>absolute</code> 元素 : <code>left : 50%</code> + <code>margin-left</code> 负自身的一半</li>
</ul>
<blockquote>
<p>垂直居中</p>
</blockquote>
<ul>
<li><code>inline</code> 元素 ：<code>line-heigth</code> 等于 <code>height</code></li>
<li><code>absolute</code> 元素 ： <code>top : 50%</code> + <code>margin-top</code> 负自身的一半 或 <code>transform (-50%,-50%)</code></li>
<li><code>absolute</code> 元素 : <code>top, buttom, left, right = 0</code> + <code>margin : auto</code></li>
</ul>
<blockquote>
<p>flex 父盒子设置</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>table-cell 这个是针对 不是盒子的元素居中，但是可以把里面的盒子<code>display:inline-block</code></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: table-cell;</span><br><span class="line"> <span class="attribute">vertical-align</span>: middle;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-line-height继承"><a href="#10-line-height继承" class="headerlink" title="10.line-height继承"></a>10.line-height继承</h2><ul>
<li>写具体数值，如30px，则继承该值(比较好理解)</li>
<li>写比例，如2/ 1.5 ,则继承该比例(比较好理解)</li>
<li>写百分比， 如200% ,则继承计算出来的值(考点)</li>
</ul>
<blockquote>
<p>比如这么一道题 求p的行高</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">      <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">200%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是百分比的话，他会先乘起来再继承 16*200%</p>
<p>如果是数字。直接继承，用自己的fontsize*数字</p>
</blockquote>
<h2 id="11-rem-是什么"><a href="#11-rem-是什么" class="headerlink" title="11.rem 是什么"></a>11.rem 是什么</h2><blockquote>
<p>rem是一个长度单位</p>
</blockquote>
<ul>
<li>px,绝对长度单位,最常用</li>
<li>em ,相对长度单位,相对于父元素,不常用</li>
<li>rem ,相对长度单位，相对于根元素，常用于响应式布局</li>
</ul>
<h2 id="12-响应式布局的常用方案"><a href="#12-响应式布局的常用方案" class="headerlink" title="12.响应式布局的常用方案"></a>12.响应式布局的常用方案</h2><ul>
<li>media-query ,根据不同的屏幕宽度设置根元素font-size</li>
<li>rem，基于根元素的相对单位</li>
</ul>
<h2 id="13-rem的弊端-“阶梯”性"><a href="#13-rem的弊端-“阶梯”性" class="headerlink" title="13.rem的弊端:“阶梯”性"></a>13.rem的弊端:“阶梯”性</h2><blockquote>
<p>像下面的媒体查询 ,就比如中间的375~413 ，当屏幕的宽度达到376,378<code>font-size</code>还是100px，不会实时变化</p>
<p>除非超过了这个范围</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@media only screen and (max-width: 374px) &#123;</span><br><span class="line">        /\* iphone5 或者更小的尺寸，以iphone5 的宽度(320px)比例设置font-size */</span><br><span class="line">        html &#123;</span><br><span class="line">          font-size: 86px;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (min-width: 375px) and (max-width: 413px) &#123;</span><br><span class="line">        /\* iphone6/7/8和iphone X */</span><br><span class="line">        html &#123;</span><br><span class="line">          font-size: 100px;</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">@media only screen and (min-width: 414px) &#123;</span><br><span class="line">        /\* iphone6p 或者更大的尺寸，以iphone6p 的宽度(414px) 比例设置font-size */</span><br><span class="line">        html &#123;</span><br><span class="line">          font-size: 110px;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="14-网页视口尺寸"><a href="#14-网页视口尺寸" class="headerlink" title="14.网页视口尺寸"></a>14.网页视口尺寸</h2><blockquote>
<p>网页视口尺寸</p>
</blockquote>
<ul>
<li><code>window.screen.height</code> // 屏幕高度</li>
<li><code>window.innerHeight</code> // 网页视口高度</li>
<li><code>document.body.clientHeight</code> // body高度</li>
</ul>
<blockquote>
<p>vw/vh</p>
</blockquote>
<ul>
<li><code>vh</code>网页视口高度的1/100</li>
<li><code>vw</code>网页视口宽度的1/100</li>
<li><code>vmax</code>取两者最大值; <code>vmin</code>取两者最小值</li>
</ul>
<h2 id="15-重绘和回流"><a href="#15-重绘和回流" class="headerlink" title="15.重绘和回流"></a>15.重绘和回流</h2><blockquote>
<p><strong>重绘</strong>：指的是当页面中的元素不脱离文档流，而简单地进行样式的变化，比如修改颜色、背景等， 浏览器重新绘制样式<strong>回流</strong>：指的是处于文档流中 <code>DOM</code> 的尺寸大小、位置或者某些属性发生变化时，导致浏览器重新渲 染部分或全部文档的情况</p>
</blockquote>
<p>相比之下，回流要比重绘消耗性能开支更大。另外，一些属性的读取也会引起回流，比如读取某个 DOM 的高度和宽度，或者使用 getComputedStyle 方法。</p>
<h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><blockquote>
<p>JS基础知识,规定语法(ECMA262标准)</p>
<p>JSWebAPI，网页操作的API(W3C标准)</p>
<p>前者是后者的基础，两者结合才能真正实际应用</p>
</blockquote>
<h2 id="1-class-和-继承"><a href="#1-class-和-继承" class="headerlink" title="1.class 和 继承"></a>1.class 和 继承</h2><blockquote>
<p>简单的回顾下<code>class``constructor``属性``方法</code> 注：<code>class是ES6语法</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span> = number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>我会学习`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">number</span>)</span><br><span class="line">zhangsan.<span class="title function_">skill</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>继承 <code>extends``super``扩展或重写方法</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 特能吃`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, number</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name + <span class="string">&#x27;【法外狂徒】&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span> = number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>我会学习`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">number</span>)</span><br><span class="line">zhangsan.<span class="title function_">skill</span>()</span><br><span class="line">zhangsan.<span class="title function_">eat</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>typeof Student</code> “function”<code>typeof People</code> “function”</p>
<p>由此可见 <code>class</code> 也是 <code>function</code></p>
</blockquote>
<h2 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2.变量类型"></a>2.变量类型</h2><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><blockquote>
<p>注意：原始类型不包含 Object。</p>
<p>ECMAScript 中定义了 6 种原始类型：</p>
</blockquote>
<ul>
<li>Boolean</li>
<li>String</li>
<li>Number</li>
<li>Null</li>
<li>Undefined</li>
<li>Symbol（ES6 新定义）</li>
</ul>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof 可以判断以下几种类型：</p>
<ul>
<li>undefined</li>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>object</li>
<li>function</li>
<li>symbol</li>
</ul>
<blockquote>
<p>注意：</p>
<p><code>typeof null</code> 结果是 <code>object</code> ，实际这是 typeof 的一个bug，null是原始值，非引用类型</p>
<p><code>typeof 数组</code> 结果是 <code>object</code> ，结果中没有 <code>array</code> 这一项，引用类型除了 <code>function</code> 其他的全 部都是 <code>object</code></p>
<p><code>typeof Symbol()</code> 用 <code>typeof</code> 获取 <code>symbol</code> 类型的值得到的是 <code>symbol</code> ，这是 ES6 新增的知识点</p>
</blockquote>
<h3 id="类型判断-instanceof"><a href="#类型判断-instanceof" class="headerlink" title="类型判断 - instanceof"></a>类型判断 - instanceof</h3><blockquote>
<p>instanceof 是基于原型链查找</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">zhangsan <span class="keyword">instanceof</span> <span class="title class_">Student</span></span><br><span class="line"></span><br><span class="line">zhangsan <span class="keyword">instanceof</span> <span class="title class_">People</span></span><br><span class="line"></span><br><span class="line">zhangsan <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line">\[\] <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"></span><br><span class="line">\[\] <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br></pre></td></tr></table></figure>
<h2 id="3-原型"><a href="#3-原型" class="headerlink" title="3.原型"></a>3.原型</h2><blockquote>
<p>原型</p>
</blockquote>
<p>原型就是一个对象，实例“继承”那个对象的属性。在原型上定义的属性，通过“继承”，实例也拥有了这个属性。“继承”这个行为是在 new 操作符内部实现的。</p>
<p>构造函数内部有一个名为 prototype 的属性，通过这个属性就能访问到原型</p>
<blockquote>
<p>隐式原型 显示原型</p>
<p><code>Student</code>就是构造函数，<code>Student.prototype</code> 就是原型</p>
<p>实例通过 <code>\_\_proto\_\_</code> 访问到原型</p>
<p>所以这两者是等价的：</p>
</blockquote>
<ul>
<li><code>zhangsan.prototype</code> 显式原型</li>
<li><code>zhangsan.\_\_proto\_\_</code>隐式原型</li>
<li><code>zhangsan.prototype</code> === <code>zhangsan.\_\_proto\_\_</code></li>
</ul>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d08a5a679b8040f2b33803500209564c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707135253242.png"></p>
<h2 id="4-原型链"><a href="#4-原型链" class="headerlink" title="4.原型链"></a>4.原型链</h2><blockquote>
<p>原型链</p>
</blockquote>
<p>原型里面也有个<code>\_\_proto\_\_</code>属性，原型可以通过这个属性访问到原型它自己的原型</p>
<p>举个栗子</p>
<p><code>Student</code> 的一个实例 <code>zhangsan</code> ，当调用它的一个属性或者方法时，他自身没有这个方法或者属性，它就通过<code>\_\_proto\_\_</code>来进行访问原型看看原型上有无该属性和方法，有的话就能直接使用，没有就查找原型的<code>\_\_proto\_\_</code>也就是原型的原型继续找有没有该属性或者方法直到最顶层为<code>null</code>为止，没有查找到就是不存在</p>
<p>这种不断向上搜索形成的链状关系我们就称为原型链</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c854a540c674c2cb21c6fdc85b276fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707165624028"></p>
<h2 id="5-如何准确的判断一个变量是数组"><a href="#5-如何准确的判断一个变量是数组" class="headerlink" title="5.如何准确的判断一个变量是数组"></a>5.如何准确的判断一个变量是数组</h2><blockquote>
<p>显然通过 <code>typeof \[\]</code>判断不能得到想要的结果 “object”</p>
<p>常用的方法就是instanceof 基于原型链查找的方式进行判断</p>
<p>还有就是通过Object.prototype.toString进行判断</p>
</blockquote>
<ul>
<li><code>\[\] instanceof Array</code> 结果 ：<code>true</code></li>
<li><code>Object.prototype.toString.call(\[\])</code> 结果： <code>&quot;\[object Array\]&quot;</code></li>
</ul>
<h2 id="6-手写简易的jQuery-考虑插件和扩展性"><a href="#6-手写简易的jQuery-考虑插件和扩展性" class="headerlink" title="6.手写简易的jQuery 考虑插件和扩展性"></a>6.手写简易的jQuery 考虑插件和扩展性</h2><blockquote>
<p>写个简单的html等下使用</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先先简单的写个jQuery</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jQuery</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">        <span class="keyword">const</span> lenght = result.<span class="property">length</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">this</span>\[i\] = result\[i\]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lenght</span> = lenght</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selector</span> = result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>\[index\]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">each</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">lenght</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> ele = <span class="variable language_">this</span>\[i\]</span><br><span class="line">            <span class="title function_">fn</span>(ele)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">            ele.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dialog</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;这是一个dialog&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">$</span> = (<span class="params">selector</span>) =&gt; <span class="keyword">new</span> <span class="title function_">jQuery</span>(selector)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$().<span class="title function_">dialog</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以继续造轮子</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myJQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">jQuery</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(selector)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">css</span>(<span class="params">json</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> json) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">                ele.<span class="property">style</span>\[key\] = json\[key\]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">myJQuery</span>(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="7-作用域和闭包"><a href="#7-作用域和闭包" class="headerlink" title="7.作用域和闭包"></a>7.作用域和闭包</h2><blockquote>
<p>简单来说，<strong>作用域</strong> 指程序中定义变量的区域，它决定了当前执行代码对变量的访问权限。</p>
<p>由于作用域的限制，每段独立的执行代码块只能访问自己作用域和外层作用域中的变量，无法访问到内层作用域的变量。</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/883328d851964552920b41db24f7b224~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707195902417"></p>
<p><code>javascript</code> 中大部分情况下，只有两种作用域类型：</p>
<ul>
<li><strong>全局作用域</strong>：全局作用域为程序的最外层作用域，一直存在。</li>
<li><strong>函数作用域</strong>：函数作用域只有函数被定义时才会创建，包含在父级函数作用域 / 全局作用域内。</li>
</ul>
<blockquote>
<p>自由变量</p>
</blockquote>
<ul>
<li>一个变量在当前作用域没有定义，但被使用了</li>
<li>向上级作用域，一层一层依次寻找，直至找到为止</li>
<li>如果到全局作用域都没找到,则报错Xx is not defined</li>
</ul>
<blockquote>
<p>作用域链</p>
</blockquote>
<p>如果当前作用域中的使用的自由变量没有定义，就会向外层作用域中寻找，如果外层没有就继续一直寻找下去，如果全局作用域都没有就是没有报错 <code>ReferenceError</code>这种不断向上搜索形成的链状关系称为作用域链</p>
<blockquote>
<p>块级作用域</p>
</blockquote>
<p><code>ES6</code> 标准提出了使用 <code>let</code> 和 <code>const</code> 代替 <code>var</code> 关键字，来“创建块级作用域”</p>
<p>简单来说，花括号内 <code>&#123;...&#125;</code> 的区域就是块级作用域区域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>作用域的一个常见运用场景之一，就是 <strong>模块化</strong>。 全局作用域污染和变量名冲突，代码结构臃肿且复用性不高。</p>
<p>闭包: 能够访问其他函数内部变量的函数，被称为 <strong>闭包</strong>。</p>
<p>是作用域应用的特殊情况</p>
<p>有两种表现:函数作为<strong>参数被传递函数</strong> 和 <strong>作为返回值被返回</strong></p>
<p>应用场景: 大多数是在需要维护内部变量的场景下。</p>
<p>例子一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span></span><br><span class="line"><span class="title function_">test</span>()()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">30</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="number">100</span></span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>(fun)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>所有的自由变量的查找，是在函数定义的地方，向上级作用域查找**</strong>不是在执行的地方!**</p>
<p>由于闭包使用过度而导致的内存占用无法释放的情况，我们称之为：<strong>内存泄露</strong>。</p>
</blockquote>
<h2 id="8-this"><a href="#8-this" class="headerlink" title="8.this"></a>8.this</h2><blockquote>
<p>this取什么值是在函数执行的时候确定不是定义的时候确定</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"></span><br><span class="line">fn1.<span class="title function_">call</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;)</span><br><span class="line">fn1.<span class="title function_">bind</span>(&#123; <span class="attr">b</span>: <span class="number">2</span> &#125;)()</span><br></pre></td></tr></table></figure>
<ol>
<li>普通函数中：this-&gt;window</li>
<li>定时器中：this-&gt;window</li>
<li>构造函数中：this-&gt;当前实例化的对象</li>
<li>事件处理函数中：this-&gt;事件触发对象</li>
<li>在 js 中一般理解就是谁调用这个 this 就指向谁</li>
</ol>
<h2 id="9-创建10个-a-标签，点击的时候弹出对应的序号"><a href="#9-创建10个-a-标签，点击的时候弹出对应的序号" class="headerlink" title="9.创建10个 a 标签，点击的时候弹出对应的序号"></a>9.创建10个 a 标签，点击的时候弹出对应的序号</h2><blockquote>
<p>考察块级作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    a.<span class="property">innerHTML</span> = i + <span class="string">&#x27;&lt;br&gt;&#x27;</span></span><br><span class="line">    a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        <span class="title function_">alert</span>(i)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-实际开发中闭包的应用"><a href="#10-实际开发中闭包的应用" class="headerlink" title="10.实际开发中闭包的应用"></a>10.实际开发中闭包的应用</h2><blockquote>
<p>隐藏数据 只提供API 保证数据安全</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">key, val</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data, key, val)</span><br><span class="line">            data\[key\] = val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data\[key\]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">createCache</span>()</span><br><span class="line">c.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;haha &#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="11-手写call-apply-bind函数"><a href="#11-手写call-apply-bind函数" class="headerlink" title="11.手写call,apply,bind函数"></a>11.手写call,apply,bind函数</h2><h3 id="手写call-apply-bind-比较基础"><a href="#手写call-apply-bind-比较基础" class="headerlink" title="手写call,apply,bind 比较基础"></a>手写call,apply,bind 比较基础</h3><blockquote>
<p>手写<code>call</code> ，<code>call</code>的性能比 <code>apply</code>高</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call1</span> = <span class="keyword">function</span> (<span class="params">obj, ...args</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context = obj</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line">  context\[fn\] = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = context\[fn\](...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context\[fn\]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">base</span> + num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum.<span class="title function_">call1</span>(obj, <span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手写<code>apply</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply1</span> = <span class="keyword">function</span> (<span class="params">obj, args</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context = obj</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line">  context\[fn\] = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = context\[fn\](...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context\[fn\]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">base</span> + num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum.<span class="title function_">apply1</span>(obj, \[<span class="number">100</span>, <span class="number">200</span>\])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手写<code>bind</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mybind</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> myThis = args.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(myThis, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, a + b)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">mybind</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="number">1</span>, <span class="number">2</span>)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手写完整的<code>bind</code> 支持<code>new</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span>(<span class="params">OThis, ...outherArgs</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> thatFunc = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> fBind = <span class="keyword">function</span>(<span class="params">...innerArgs</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thisFunc.<span class="title function_">apply</span>(</span><br><span class="line">        	<span class="variable language_">this</span> <span class="keyword">instanceof</span> thatFunc ? <span class="variable language_">this</span> : <span class="title class_">OThis</span>, \[...outherArgs, ...innerArgs\]</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fBind.<span class="property">prototeye</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(thatFunc.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBind</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1.<span class="property">call</span>.<span class="title function_">call</span>(fn2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn1.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="title function_">call</span>(fn2)</span><br></pre></td></tr></table></figure>
<h2 id="12-异步"><a href="#12-异步" class="headerlink" title="12.异步"></a>12.异步</h2><blockquote>
<p><code>JS</code>是单线程语言，只能同时做一件事儿</p>
<p>浏览器和<code>nodejs</code>已支持JS启动进程，如<code>Web Worker</code></p>
<p><code>JS</code>和<code>DOM</code>渲染共用同一个线程,因为<code>JS</code>可修改<code>DOM</code>结构</p>
</blockquote>
<p>因为是单线程</p>
<p>遇到等待(网络请求,定时任务)不能卡住,需要异步,采用了回调callback函数形式</p>
<blockquote>
<p>同步和异步</p>
</blockquote>
<ul>
<li>基于JS是单线程语言</li>
<li>异步不会阻塞代码执行</li>
<li>同步会阻塞代码执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>)</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>应用场景 ：</p>
</blockquote>
<p>网络请求, 比如ajax图片加载</p>
<p>定时任务,比如 setTimeout</p>
<h2 id="13-callback-hell-回调地狱"><a href="#13-callback-hell-回调地狱" class="headerlink" title="13.callback hell 回调地狱"></a>13.callback hell 回调地狱</h2><blockquote>
<p>比如这个例子，一直往下面嵌套（函数作为参数层层嵌套）</p>
</blockquote>
<p>回调地狱最主要的就是因为功能逻辑代码嵌套的层次太多,导致可读性降低,维护困难,避免回调地狱的最重要的方面是将功能移开,保持代码简单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url1, <span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>. <span class="title function_">log</span>(datal)</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">get</span>(url2，(data2) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>. <span class="title class_">Log</span>(data2)</span><br><span class="line"></span><br><span class="line">        $.<span class="title function_">get</span>(url3, <span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>. <span class="title function_">log</span>(data3)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="14-Promise"><a href="#14-Promise" class="headerlink" title="14.Promise"></a>14.Promise</h2><blockquote>
<p><strong>Promise</strong>:是编写异步代码的一种方式，它仍然以自顶向下的方式执行，并且由于鼓励使用try / catch样式错误处理而处理更多类型的错误</p>
<p><strong>Promise</strong>解决了回调地狱<strong>嵌套</strong>的问题</p>
</blockquote>
<h3 id="1-一个简单的Promise例子"><a href="#1-一个简单的Promise例子" class="headerlink" title="1.一个简单的Promise例子"></a>1.一个简单的Promise例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            url,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(data)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> url1 = <span class="string">&#x27;/data1.json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> ur12 = <span class="string">&#x27;/data2.json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> url3 = <span class="string">&#x27;/data3.json&#x27;</span></span><br><span class="line"><span class="title function_">getData</span>(url1)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getData</span>(url2)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getData</span>(url3)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data3)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err))</span><br></pre></td></tr></table></figure>
<h3 id="2-手写用Promise加载一张图片"><a href="#2-手写用Promise加载一张图片" class="headerlink" title="2.手写用Promise加载一张图片"></a>2.手写用Promise加载一张图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123; img, <span class="attr">msg</span>: <span class="string">&#x27;图片加载成功&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;img.src&#125;</span>图片加载失败`</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        img.<span class="property">src</span> = url</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadImg</span>(<span class="string">&#x27;./img/2.jpg&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(res.<span class="property">img</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9c18a58b6754e089e07aae1f9fd9091~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708110216819"></p>
<h2 id="15-event-loop（事件循环）"><a href="#15-event-loop（事件循环）" class="headerlink" title="15.event loop（事件循环）"></a>15.event loop（事件循环）</h2><blockquote>
<p>异步和事件循环的关系</p>
</blockquote>
<ul>
<li>JS是单线程运行的</li>
<li>异步要基于回调来实现</li>
<li>event loop就是异步回调的实现原理</li>
</ul>
<blockquote>
<p>JS代码是如何执行的</p>
</blockquote>
<ul>
<li>从前到后,一行一-行执行</li>
<li>如果某一行执行报错，则停止下面代码的执行</li>
<li>先把同步代码执行完，再执行异步</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title class_">Log</span>(<span class="string">&#x27;cb1&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">5000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Bye&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>事件循环过程（还没涉及宏任务/微任务）</p>
</blockquote>
<ol>
<li>同步代码,一行一 行放在<code>Call Stack</code>执行(同步任务在栈里压栈弹栈执行)</li>
<li>遇到异步,会先“记录”下,等待时机(定时、网络请求等)</li>
<li>时机到了,就移动到<code>Callback Queue</code>(回调队列)</li>
<li>如<code>Call Stack</code>为空(即同步代码执行完) <code>Event Loop</code>开始工作</li>
<li>轮询查找<code>Callback Queue</code>(回调队列) , 如有则移动到<code>Call Stack</code>执行</li>
<li>然后继续轮询查找(永动机一样)</li>
</ol>
<blockquote>
<p>自己画的图，不对的地方请多多指教</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aacb9edfd8684117a03660dcd4a7ce01~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708121124506"></p>
<h2 id="16-Promise状态"><a href="#16-Promise状态" class="headerlink" title="16.Promise状态"></a>16.Promise状态</h2><blockquote>
<p>三种状态</p>
</blockquote>
<ul>
<li><code>pending</code> 不会触发then和catch</li>
<li><code>resolved</code> 会触发后续的then回调函数</li>
<li><code>rejected</code> 会触发后续的catch回调函数</li>
</ul>
<blockquote>
<p>状态的表现 和 变化 （<strong>变化是不可逆的</strong>）</p>
</blockquote>
<p><code>pending</code>一> <code>resolved</code> 或 <code>pending</code>一> <code>rejected</code></p>
<blockquote>
<p><code>then</code> 和 <code>catch</code> 对状态的影响(重要)</p>
</blockquote>
<ul>
<li><code>then</code>正常返回<strong>resolved</strong>， 里面有报错则返回<strong>rejected</strong></li>
<li><code>catch</code>正常返回<strong>resolved</strong>，里面有报错则返回<strong>rejected</strong></li>
</ul>
<blockquote>
<p>then和catch的链式调用(常考)</p>
<p>网上的promise习题很多的，我这里就编一个简单点的，最后打印的结果</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;err&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;then error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;200&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;300&#x27;</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;400&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;500&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;600&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最后打印 的是 <code>100 300 500 600</code></p>
<blockquote>
<p>网上扒两个简单的</p>
<p>例题1</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;erro1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>打印的是 <code>1 2 3</code></p>
<blockquote>
<p>例题2</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;erro1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>打印的是 <code>1 2</code></p>
<blockquote>
<p>网上的例题很多哈，大家有点时候可以多练习</p>
</blockquote>
<h2 id="17-async-await"><a href="#17-async-await" class="headerlink" title="17.async / await"></a>17.async / await</h2><blockquote>
<p><code>async</code> / <code>await</code> 和 异步回调<code>callback hell</code></p>
</blockquote>
<ul>
<li><code>Promise</code><strong>then**</strong>catch**链式调用,但也是基于回调函数</li>
<li><code>async</code>/ <code>await</code>是同步语法,<strong>彻底消灭</strong>异步回调的终极武器</li>
<li>但和<code>Promise</code>并不互斥 ,反而,两者相辅相成</li>
</ul>
<blockquote>
<p><code>async</code> / <code>await</code> 和 <code>Promise</code>的关系</p>
</blockquote>
<ul>
<li>执行<code>async</code>函数，返回的是<strong>Promise</strong>对象</li>
<li><code>await</code>相当于<code>Promise</code>的<strong>then</strong></li>
<li><code>try...catch</code>可捕获异常，代替了<code>Promise</code> 的<strong>catch</strong></li>
</ul>
<blockquote>
<p>下面几个例子</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">300</span>)</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> p1</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> datal = <span class="keyword">await</span> <span class="number">400</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;datal&#x27;</span>, datal)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">500</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">fn1</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data2&#x27;</span>, data2)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> p4</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(ex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>异步的本质</p>
</blockquote>
<ul>
<li><code>async</code>/ <code>await</code>是消灭异步回调的终极武器</li>
<li>JS还是单线程,还得是有异步,还得是基于<code>event loop</code></li>
<li><code>async/await</code>只是一个语法糖，但这颗糖真香!</li>
</ul>
<blockquote>
<p>结合事件循环做两个例题</p>
<p>例题一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果打印的是 ：</p>
<p><code>script start</code></p>
<p><code>async1 start</code></p>
<p><code>async2</code></p>
<p><code>script end</code></p>
<p><code>async1 end</code></p>
<blockquote>
<p>例题二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async3</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end 2&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async3&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async1</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>打印的结果如下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2b03b35bddd4755b02c97715c665352~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708141256573"></p>
<h2 id="18-for-…-of"><a href="#18-for-…-of" class="headerlink" title="18.for … of"></a>18.for … of</h2><blockquote>
<p><code>for .. in</code> (以及<code>forEach``for</code> )是常规的同步遍历</p>
<p><code>for .. of</code>常用于异步的遍历</p>
<p>用个例子来说明两个的区别</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(item * item)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = \[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>\]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="title function_">async</span> (i) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">test</span>(i))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面的例子，使用同步遍历的时候 是在1000ms后全部把结果打印出来了，而不是隔一秒打印</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/862ef534afc741f3a7de6836114d8905~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1"></p>
<blockquote>
<p>使用<code>for ... of</code> 遍历</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(item * item)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = \[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>\]</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">test</span>(item))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>使用<code>for...of</code> 遍历会 1000ms 打印一次</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f87e9d7e03244fe2839ff251a500da39~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="2"></p>
<h2 id="19-宏任务-微任务"><a href="#19-宏任务-微任务" class="headerlink" title="19.宏任务/微任务"></a>19.宏任务/微任务</h2><blockquote>
<p>简单介绍:</p>
<p>微任务和宏任务皆为<strong>异步任务</strong>，它们都属于一个队列，主要区别在于他们的<strong>执行顺序</strong></p>
</blockquote>
<ul>
<li>宏任务: setTimeout，setInterval，Ajax，DOM事件</li>
<li>微任务: Promise async/await</li>
<li>微任务执行时机比宏任务要早</li>
</ul>
<blockquote>
<p>先来个简单的demo</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>结果：<code>1 4 3 2</code></p>
<blockquote>
<p>说下DOM渲染</p>
</blockquote>
<ul>
<li>JS是单线程的，而且和DOM渲染共用一个线程</li>
<li>JS执行的时候，得留一-些时机供DOM渲染</li>
<li>每次Call Stack（执行栈）清空(即每次轮询结束)， 即同步任务执行完</li>
<li>都是DOM重新渲染的机会，DOM结构如有改变则重新渲染</li>
<li>然后再去触发下一次Event Loop（事件循环）</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2ed3e9cb47a43658ca6dabdbe18e295~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708144736486"></p>
<blockquote>
<p>宏任务: DOM渲染后触发,如<code>setTimeout</code></p>
<p>微任务: DOM渲染前触发，如<code>Promise</code></p>
<p>微任务是ES6语法规定的</p>
<p>宏任务是由浏览器规定的</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/429bc6b1d7cc4058abebbfd479169785~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708145221088"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b7801ad56014aec9b9203c5f4443af5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708145248926"></p>
<blockquote>
<p>在<strong>事件循环</strong>中 <code>宏任务</code>/<code>微任务</code> 之间的关系</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b4305b9bab247d988372ccc04788e4f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708151152089"></p>
<blockquote>
<p>写两个例题</p>
<p>例题一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setitmeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>()</span><br></pre></td></tr></table></figure>
<p>结果： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b377eb78ddde4b699f0a649366a7731a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708152230776"></p>
<blockquote>
<p>例题二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ea271c40e3463faf5394a175fdf418~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708152608397"></p>
<h2 id="20-DOM节点"><a href="#20-DOM节点" class="headerlink" title="20.DOM节点"></a>20.DOM节点</h2><blockquote>
<p>DOM 是一种树结构 （DOM树）</p>
<p>节点操作 简单举几个例子，这些基本API不用太多介绍</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;diV1&#x27;</span>) / 元素</span><br><span class="line"><span class="keyword">const</span> divList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divList.<span class="property">length</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divList\[<span class="number">0</span>\])</span><br><span class="line"><span class="keyword">const</span> containerListe = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAlL</span>(<span class="string">&#x27;p&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>DOM</code>节点的<code>property</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pListe = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(p)</span><br><span class="line"><span class="keyword">const</span> p = pList\[<span class="number">0</span>\]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pList\[<span class="number">0</span>\].<span class="property">style</span>.<span class="property">width</span>) / 获取样式</span><br><span class="line">p.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">className</span>)</span><br><span class="line">p.<span class="property">className</span> = <span class="string">&#x27;p1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeName</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeType</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>DOM</code>节点的<code>attribute</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pListe = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(p)</span><br><span class="line"><span class="keyword">const</span> p = pList\[<span class="number">0</span>\]</span><br><span class="line">p.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>, <span class="string">&#x27;./21.pro.jpg&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;color:#ccc;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getAttribute</span>(<span class="string">&#x27;style&#x27;</span>))</span><br><span class="line">p.<span class="title function_">removeAttribute</span>(<span class="string">&quot;style&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>property</code> :修改对象属性,不会体现到html结构中</p>
<p><code>attribute</code> :修改html属性,会改变html结构</p>
<p>两者都<strong>有可能</strong>引起<code>DOM</code><strong>重新渲染</strong></p>
</blockquote>
<h2 id="21-DOM节点操作"><a href="#21-DOM节点操作" class="headerlink" title="21.DOM节点操作"></a>21.DOM节点操作</h2><blockquote>
<p>节点操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p.<span class="title function_">remove</span>();</span><br><span class="line">p.<span class="title function_">removeChild</span>(clildEle)</span><br><span class="line"><span class="keyword">const</span> p2 = p.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line">box.<span class="title function_">appendChild</span>(p);</span><br><span class="line">box.<span class="title function_">appendChild</span>(p2);</span><br><span class="line">p.<span class="title function_">insertBefore</span>(newele,ele)</span><br><span class="line">box.<span class="title function_">replaceChild</span>(newEle,oldEle)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeType</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>节点之间的联系</p>
</blockquote>
<ul>
<li><p>parentNode 查找父节点</p>
</li>
<li><p>childElementCount 返回子元素的个数<strong>不包括文本节点和注释</strong></p>
</li>
<li><p>firstChild 查找指定节点的第一个字节点</p>
</li>
<li><p>lastChild 查找指定节点的最后一个字节点</p>
</li>
<li><p>previousSibling 查找指定节点的上一个节点</p>
</li>
<li><p>firstElementChild 返回第一个子元素</p>
</li>
<li><p>lastElementChild 返回最后一个子元素</p>
</li>
<li><p>previousElementSibling 返回前一个相邻兄弟元素</p>
</li>
<li><p>nextElementSibling 返回后一个相邻兄弟元素</p>
</li>
<li><p>nextSibling 查找指定节点的下一个节点</p>
</li>
</ul>
<h2 id="22-DOM性能"><a href="#22-DOM性能" class="headerlink" title="22.DOM性能"></a>22.DOM性能</h2><ul>
<li>DOM操作非常”昂贵”， 避免频繁的DOM操作</li>
<li>对DOM查询做缓存</li>
<li>将频繁操作改为一次性操作</li>
</ul>
<blockquote>
<p>DOM 查询做缓存</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>).<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> length = pList.<span class="property">length</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将频繁操作改做一次性操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  img.<span class="property">src</span> = <span class="string">&#x27;./img/2.jpg&#x27;</span></span><br><span class="line">  fragment.<span class="title function_">appendChild</span>(img)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(fragment)</span><br></pre></td></tr></table></figure>
<h2 id="23-BOM-简单的过一遍"><a href="#23-BOM-简单的过一遍" class="headerlink" title="23.BOM 简单的过一遍"></a>23.BOM 简单的过一遍</h2><blockquote>
<p><code>BOM</code> 的核心对象<code>window</code>:</p>
</blockquote>
<ul>
<li><code>window</code>是全局对象</li>
<li>浏览器窗口的<code>JavaScript</code>接口</li>
</ul>
<blockquote>
<p><code>navigator</code></p>
</blockquote>
<p>客服端标识浏览器的标准，主要用来记录和检测浏览器与设备的主要信息</p>
<blockquote>
<p>如何识别浏览器？</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ua = <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span></span><br><span class="line"><span class="keyword">const</span> isChrome = ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;Chrome&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isChrome)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>screen</code></p>
</blockquote>
<p>保存客服端能力的对象 举几个常见的属性</p>
<ul>
<li><code>height</code>: 屏幕像素高度</li>
<li><code>left</code>: 当前屏幕左边的像素距离</li>
<li><code>top</code>: 当前屏幕顶端的像素距离</li>
<li><code>width</code>: 屏幕像素宽度</li>
</ul>
<blockquote>
<p><code>location</code> 可以用<code>location</code>拆解<code>url</code></p>
</blockquote>
<ul>
<li><code>protocol</code>：协议</li>
<li><code>host</code>：域名和端口</li>
<li><code>hostname</code>：服务器名</li>
<li><code>pathname</code>：<code>url</code>路径</li>
<li><code>hash</code>：哈希值</li>
<li><code>href</code>：<code>url</code>字段</li>
<li><code>search</code>：查询字段</li>
</ul>
<blockquote>
<p><code>history</code></p>
</blockquote>
<ul>
<li><code>go()</code>：跳转页面</li>
<li><code>forward</code>：前进</li>
<li><code>back()</code>：后退</li>
</ul>
<h2 id="24-事件"><a href="#24-事件" class="headerlink" title="24.事件"></a>24.事件</h2><blockquote>
<p>事件绑定 简单介绍下，相信大家都会</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = docment.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="title function_">funcition</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简述事件冒泡的流程</p>
</blockquote>
<ul>
<li>基于DOM树形结构</li>
<li>事件会顺着触发元素网上冒泡</li>
<li>应用场景:<strong>事件代理</strong></li>
</ul>
<blockquote>
<p>事件代理的好处</p>
</blockquote>
<ul>
<li>代码简洁</li>
<li>减少浏览器内存占用</li>
<li>但是,不要滥用</li>
<li>对于那些新添加的元素，最好就使用事件代理</li>
</ul>
<blockquote>
<p>例子 ： 无限下拉图片列表,如何监听每个图片的点击</p>
</blockquote>
<ul>
<li>事件代理</li>
<li>用e.target获取触发元素</li>
<li>用matches来判断是否是触发元素</li>
</ul>
<blockquote>
<p>自己封装通用的事件绑定函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bindEvent</span> = <span class="keyword">function</span> (<span class="params">type, selector, fn</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">    fn = selector</span><br><span class="line">    selector = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> target = e.<span class="property">target</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selector) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.<span class="title function_">matches</span>(selector)) &#123;</span><br><span class="line">        fn.<span class="title function_">call</span>(target, e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      fn.<span class="title function_">call</span>(target, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">bindEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">bindEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="25-ajax"><a href="#25-ajax" class="headerlink" title="25.ajax"></a>25.ajax</h2><blockquote>
<p>手写一个简单的ajax</p>
<p>get请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;./test.json&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span> &amp;&amp; xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>post请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;localhost://mytest&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span> &amp;&amp; xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>状态码 <code>xhr.readyState</code></p>
</blockquote>
<ul>
<li>0- (未初始化)还没有调用send(方法</li>
<li>1- (载入)已调用send(方法,正在发送请求</li>
<li>2- (载入完成) send()方法执行完成,已经接收到全部响应内容</li>
<li>3- (交互)正在解析响应内容</li>
<li>4- (完成)响应内容解析完成,可以在客户端调用</li>
</ul>
<blockquote>
<p>响应码 <code>xhr.status</code></p>
</blockquote>
<ul>
<li>2xx -表示成功处理请求,如200</li>
<li>3xx -需要重定向，浏览器直接跳转，如301 302 304</li>
<li>4xx -客户端请求错误,如404 403</li>
<li>5xx -服务器端错误</li>
</ul>
<h2 id="26-跨域"><a href="#26-跨域" class="headerlink" title="26.跨域"></a>26.跨域</h2><blockquote>
<p>什么事跨域</p>
</blockquote>
<p>简单来说：由于同源策略的原因浏览器不能执行其他网站的脚本</p>
<p>所有的跨域,都必须经过server端允许和配合</p>
<p>未经server端允许就实现跨域,说明浏览器有漏洞,危险信号</p>
<blockquote>
<p>同源政策</p>
</blockquote>
<ul>
<li>ajax请求时,浏览器要求当前网页和server必须<strong>同源</strong>(安全)</li>
<li>同源:<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>,三者必须一-致</li>
<li>前端: <a href="https://link.juejin.cn/?target=http%3A%2F%2Fa.com%3A8080%2F" title="http://a.com:8080/">a.com:8080/</a> ; server :<a href="https://link.juejin.cn/?target=https%3A%2F%2Fb.com%2Fapi%2Fxx%25EF%25BC%2588%25E4%25B8%258D%25E5%2590%258C%25E6%25BA%2590%25EF%25BC%2589" title="https://b.com/api/xx%EF%BC%88%E4%B8%8D%E5%90%8C%E6%BA%90%EF%BC%89">b.com/api/xx（不同源）</a></li>
</ul>
<blockquote>
<p>加载图片 、css、 js可<strong>无视</strong>同源策略</p>
</blockquote>
<ul>
<li><code>&lt;img src=跨域的图片地址/&gt;</code>可用于统计打点,可使用第三E方统计服务</li>
<li><code>&lt;link href=跨域的css地址/&gt;</code> 可使用CDN , CDN一般都是外域</li>
<li><code>&lt;script src=跨域的js地址&gt; &lt;/script&gt;</code> 可使用CDN，可实现<strong>JSON</strong></li>
</ul>
<blockquote>
<p><code>jsonp</code></p>
</blockquote>
<p>因为script标签可以发送get请求，比如引用CDN，我们可以动态的创建script标签，再去请求一个带参网址来实现跨域通信</p>
<ul>
<li>script标签可绕过跨域限制</li>
<li>服务器可以任意动态拼接数据返回</li>
<li>所以，<code>&lt;script&gt;</code>就可以获得跨域的数据,只要服务端愿意返回</li>
</ul>
<blockquote>
<p>写个简易jsonp的例子</p>
<p>后台是 <code>node.js</code> + <code>express</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/info&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="string">&#x27;fn(&#123;name : &#x27;</span>张三<span class="string">&#x27;&#125;)&#x27;</span></span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>前端</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/mytest/info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然自己也可以自己封装一个jsonp函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> params = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> options.<span class="property">data</span>) &#123;</span><br><span class="line">    params += <span class="string">&#x27;&amp;&#x27;</span> + attr + <span class="string">&#x27;=&#x27;</span> + options.<span class="property">data</span>\[attr\]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fnName = <span class="string">&#x27;myJsonp&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>\[fnName\] = options.<span class="property">success</span></span><br><span class="line"></span><br><span class="line">  script.<span class="property">src</span> = options.<span class="property">url</span> + <span class="string">&#x27;?callback=&#x27;</span> + fnName + params</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line"></span><br><span class="line">  script.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">jsonp</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;url地址&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>jQuery实现jsonp</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url地址&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">jsonpCallback</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>默认情况下，使用<code>jQuery</code>发起<code>JSONP</code>请求，会自动携带一个 <code>callback=jQueryxxx</code>的参数, <code>jQuery</code> 是随机生成的一个回调函数名称。</p>
<blockquote>
<p><code>CORS</code> -服务器设置<code>http header</code></p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="27-ajax工具"><a href="#27-ajax工具" class="headerlink" title="27.ajax工具"></a>27.ajax工具</h2><blockquote>
<p>jQuery中封装的$.ajax就不多说了</p>
<p>Fetch：简单的例子 默认<strong>GET</strong>请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url地址&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>
<p>Fetch底层是用Promise实现，我们可以直接用async来优化上面的代码，减少回调，使其更加语义化、容易理解</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;url地址&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Fetch的<strong>POST</strong>请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;name=&quot;zhangsan&quot;&amp;age=18&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>带上<strong>cookie</strong>需要设置credentials</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>axios的基本用法应该不必多说了。大家基本天天用吧</p>
</blockquote>
<h2 id="28-存储"><a href="#28-存储" class="headerlink" title="28.存储"></a>28.存储</h2><blockquote>
<p>描述<code>cookie``localStorage``sessionStorage</code>区别</p>
<p>cookie</p>
</blockquote>
<ul>
<li>本身用于浏览器和<code>server</code>通讯</li>
<li>在<code>html5</code>之前 被”借用”到本地存储来</li>
<li>可用<code>document.cookie =</code> 来修改</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a88350ddbced48e19f7f4b5fbfe2dffd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708221336289"></p>
<blockquote>
<p><code>cookie</code>缺点</p>
</blockquote>
<ul>
<li>存储大小，最大4KB</li>
<li><code>http</code>请求时需要发送到服务端，增加请求数据量</li>
<li>只能用<code>document.cookie =</code> 来修改,太过简陋</li>
</ul>
<blockquote>
<p><code>localStorage</code>和<code>sessionStorage</code></p>
</blockquote>
<ul>
<li><code>HTML5</code>专门为存储而设计，最大可存5M</li>
<li>API简单易用<code>setItem``getItem</code></li>
<li>不会随着<code>http</code>请求被发送出去</li>
<li><code>localStorage</code>数据会永久存储，除非代码或手动删除</li>
<li><code>sessionStorage</code>数据只存在于当前会话,浏览器关闭则清空</li>
<li>一般用<code>localStorage</code>会更多一-些</li>
</ul>
<h2 id="29-HTTP"><a href="#29-HTTP" class="headerlink" title="29.HTTP"></a>29.HTTP</h2><blockquote>
<p>状态码分类</p>
</blockquote>
<ul>
<li>1xx服务器收到请求</li>
<li>2xx请求成功,如200</li>
<li>3xx重定向,如302</li>
<li>4xx客户端错误，如404</li>
<li>5xx服务端错误,如500</li>
</ul>
<blockquote>
<p>常见状态码</p>
</blockquote>
<ul>
<li><code>200</code>成功</li>
<li><code>301</code>永久重定向(配合<code>location</code> ,浏览器自动处理)</li>
<li><code>302</code>临时重定向(配合<code>location</code> ,浏览器自动处理)</li>
<li><code>304</code>资源未被修改</li>
<li><code>404</code>资源未找到</li>
<li><code>403</code>没有权限</li>
<li><code>500</code>服务器错误</li>
<li><code>504</code>网关超时</li>
</ul>
<blockquote>
<p>关于协议和规范</p>
</blockquote>
<ul>
<li>就是一个约定</li>
<li>要求大家都跟着执行</li>
<li>不要违反规范,例如IE浏览器</li>
</ul>
<blockquote>
<p><code>http headers</code></p>
<p><code>Request Headers</code></p>
</blockquote>
<ul>
<li>Accept浏览器可接收的数据格式</li>
<li>Accept-Encoding浏览器可接收的压缩算法,如gzip</li>
<li>Accept-Languange浏览器可接收的语言,如zh-CN</li>
<li>Connection: keep-alive - -次TCP连接重复使用</li>
<li>cookie</li>
<li>Host</li>
<li>User-Agent (简称UA )浏览器信息</li>
<li>Content-type发送数据的格式,如application/json</li>
</ul>
<blockquote>
<p><code>Response Headers</code></p>
</blockquote>
<ul>
<li>Content-type返回数据的格式，如application/json</li>
<li>Content-length返回数据的大小，多少字节</li>
<li>Content-Encoding返回数据的压缩算法，如gzip</li>
<li>Set-Cookie</li>
</ul>
<blockquote>
<p>自定义<code>header</code>了解下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">header : &#123;</span><br><span class="line">    <span class="string">&#x27;X-Requested-with&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="30-HTTP缓存"><a href="#30-HTTP缓存" class="headerlink" title="30.HTTP缓存"></a>30.HTTP缓存</h2><blockquote>
<p>关于缓存</p>
</blockquote>
<ul>
<li>减少带宽，减少请求数量，减轻服务器压力，提升性能</li>
<li>浏览器缓存一般都是针对静态资源，比如 js、css、图片 等</li>
</ul>
<h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c691ebaeffde4c9584fd9384734d432f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709155528877"></p>
<p>如果过期了 再次请求 ，返回<code>Cache-Control</code></p>
<blockquote>
<p><code>Cache-Control</code></p>
<p><code>Response Headers</code>中 控制强制缓存的逻辑</p>
<p>例如<code>Cache-Control</code>: <code>max-age=31536000</code> ( 单位是秒)</p>
</blockquote>
<ul>
<li>public：资源客户端和服务器都可以缓存。</li>
<li>privite：资源只有客户端可以缓存。</li>
<li>no-cache：客户端缓存资源，但是是否缓存需要经过协商缓存来验证。</li>
<li>no-store：不使用缓存。</li>
<li>max-age：缓存保质期。</li>
</ul>
<blockquote>
<p>关于<code>Expires</code></p>
</blockquote>
<ul>
<li>同在<code>Response Headers</code>中</li>
<li>同为控制缓存过期</li>
<li>已被<code>Cache-Control</code>代替</li>
</ul>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><blockquote>
<ul>
<li>服务器端缓存策略</li>
<li>服务器判断客户端资源，是否和服务端资源一样</li>
<li>致则返回304 , 否则返回200和最新的资源</li>
</ul>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f7a1307d76143cd86cb890a6035e409~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709155459528"></p>
<blockquote>
<p>资源标识</p>
</blockquote>
<ul>
<li>在<code>Response Headers</code>中，有两种</li>
<li><code>Last-Modified</code>资源的最后修改时间</li>
<li><code>Etag</code>资源的唯一标识( -一个字符串，类似人类的指纹)</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f65e646917a84409a11794d02d1d2e68~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709160347279"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3aa9e7f06b0c44a28a2d0455abaa021c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709160501440"></p>
<blockquote>
<p>下面是一个<code>Headers</code>实例</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c86392599cf74fe6ba8c094c44bfdeaf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709160613179"></p>
<blockquote>
<p><code>Last-Modified</code>和<code>Etag</code></p>
</blockquote>
<ul>
<li>会优先使用<code>Etag</code></li>
<li><code>Last-Modified</code>只能精确到<strong>秒级</strong></li>
<li>如果资源被重复生成，而内容不变，则<code>Etag</code>更精确</li>
</ul>
<h3 id="缓存流程图"><a href="#缓存流程图" class="headerlink" title="缓存流程图"></a>缓存流程图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccf8a70a39de458b91946ba9def58ac4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709161010069"></p>
<blockquote>
<p>三种刷新操作对缓存的影响</p>
</blockquote>
<p>正常操作:地址栏输入<code>url</code> ,跳转链接,前进后退等</p>
<p>手动刷新: <code>F5</code>，点击刷新按钮,右击菜单刷新</p>
<p>强制刷新: <code>ctrl + F5</code></p>
<ul>
<li>正常操作:强制缓存有效,协商缓存有效</li>
<li>手动刷新:强制缓存失效,协商缓存有效</li>
<li>强制刷新:强制缓存失效,协商缓存失效</li>
</ul>
<h1 id="关于开发环境"><a href="#关于开发环境" class="headerlink" title="关于开发环境"></a>关于开发环境</h1><h2 id="1-git"><a href="#1-git" class="headerlink" title="1.git"></a>1.git</h2><blockquote>
<p>最常用的代码版本管理工具</p>
<p>大型项目需要多人协作开发,必须熟用git</p>
<p>如果你不知道或者之前不用git ,不会通过面试</p>
</blockquote>
<ul>
<li>Mac OS自带git命令，windows可去官网下载安装</li>
<li>git服务端常见的有github coding.net等</li>
<li>大公司会搭建自己的内网git服务</li>
</ul>
<p>我这里就不用多多介绍了，我就说下我们经常用的操作</p>
<blockquote>
<p>第一次使用git，配置用户信息</p>
</blockquote>
<ul>
<li>用户名：<code>git config --global user.name &quot;用户名&quot;</code></li>
<li>户邮箱：<code>git config --global user.email &quot;邮箱地址&quot;</code></li>
</ul>
<blockquote>
<p>初始化仓库</p>
</blockquote>
<ul>
<li>创建一个新的本地仓库：<code>git init</code></li>
<li>或者从远程git仓库复制项目：<code>git clone &lt;远程git仓库url地址&gt;</code></li>
</ul>
<blockquote>
<p>添加到暂存区</p>
</blockquote>
<ul>
<li>添加指定文件：<code>git add 文件1 文件2 ...</code></li>
<li>添加文件夹：<code>git add \[文件夹\]</code></li>
<li>添加所有文件：<code>git add .</code></li>
</ul>
<blockquote>
<p>撤销</p>
</blockquote>
<ul>
<li>取消暂存区已经暂存的文件：<code>git reset HEAD 文件1 ...</code></li>
<li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li>
<li>如果代码写错到了分支先 <code>git stash</code> 切换分支后 就<code>git stash pop</code> 释放刚才的内容</li>
</ul>
<blockquote>
<p>重命名文件</p>
</blockquote>
<ul>
<li>并提交到暂存区：<code>git mv \[old\] \[new\]</code></li>
</ul>
<blockquote>
<p>查看信息</p>
</blockquote>
<ul>
<li>查询当前工作区所有文件的状态：<code>git status</code></li>
<li>比较当前修改的文件 和 暂存区的 差异：<code>git diff 文件</code></li>
<li>直接比较有修改的所有的文件：<code>git diff</code></li>
</ul>
<blockquote>
<p>提交</p>
</blockquote>
<p>提交到本地仓库：<code>git commit -m &quot;提交信息&quot;</code></p>
<p>撤销上次提交：<code>git commit --amend</code></p>
<p>跳过暂存区直接提交，自己不用<code>add .</code>：<code>git commit -a -m &quot;提交信息&quot;</code></p>
<blockquote>
<p>分支管理</p>
</blockquote>
<ul>
<li>显示所有分支：<code>git branch</code></li>
<li>创建分支：<code>git branch &lt;新分支名称&gt;</code></li>
<li>新建子分支：<code>git checkout -b &lt;子分支名称&gt;</code></li>
<li>切换到其他分支：<code>git checkout &lt;分支名称&gt;</code></li>
<li>当前分支与其他分支合并：<code>git merge &lt;分支名称&gt;</code></li>
<li>把远程分支合并到当前分支：<code>git merge &lt;远程分支&gt;/&lt;本地分支&gt;</code></li>
<li>删除分支：<code>git branch -d &lt;分支名称&gt;</code></li>
<li>添加远程仓库：<code>git remote add \[remote-name\] \[url\]</code>比如github这个例子<code>git remote add origin url</code></li>
<li>将本地仓库某分支推送到远程仓库上：<code>git push \[远程仓库\] \[分支名字\]</code> 这里举个例子<code>git push origin master</code></li>
</ul>
<h2 id="2-抓包"><a href="#2-抓包" class="headerlink" title="2.抓包"></a>2.抓包</h2><blockquote>
<p>移动端h5页，查看网络请求,需要用工具抓包</p>
<p><code>windows</code>一般用<code>fiddler</code></p>
<p><code>Mac OS</code> - -般用<code>charles</code></p>
<p>抓包+调试的工具<code>spy-debugger</code></p>
</blockquote>
<ol>
<li>手机和电脑连同-一个局域网</li>
<li>将手机代理到电脑上</li>
<li>手机浏览网页,即可抓包</li>
</ol>
<p>具体使用方法大家可以去看看其他大佬的帖子，他们讲的非常的好</p>
<p>推荐使用 <code>spy-debugger</code> 支持<code>HTTP/HTTPS</code>，无需USB连接设备</p>
<h2 id="3-Webpack-和-babel-简单使用"><a href="#3-Webpack-和-babel-简单使用" class="headerlink" title="3.Webpack 和 babel 简单使用"></a>3.Webpack 和 babel 简单使用</h2><h3 id="为啥使用Webpack"><a href="#为啥使用Webpack" class="headerlink" title="为啥使用Webpack"></a>为啥使用Webpack</h3><ul>
<li><p>ES6模块化,浏览器暂不支持</p>
</li>
<li><p>ES6语法,浏览器并不完全支持</p>
</li>
<li><p>压缩代码,整合代码,以让网页加载更快</p>
</li>
</ul>
<h3 id="安装配置Webpack"><a href="#安装配置Webpack" class="headerlink" title="安装配置Webpack"></a>安装配置Webpack</h3><blockquote>
<p>安装 <code>npm i -D webpack webpack-cli</code></p>
<p>安装本地项目模块 <code>npm install webpack webpack-cli -D</code></p>
<p>配置<code>webpack.config.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置<code>package.json</code>中<code>script</code> 之后就可以使用<code>npm run build</code>来运行该脚本命令</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置本地服务器"><a href="#配置本地服务器" class="headerlink" title="配置本地服务器"></a>配置本地服务器</h3><p>安装本地服务器 <code>npm install webpack-dev-server -D</code></p>
<blockquote>
<p>配置<code>webpack.config.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;8080&#x27;</span>,</span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">overlay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>inline</strong>：文件改变时会自动刷新</li>
<li><strong>open</strong>：第一次自动打开网页。</li>
<li><strong>compress</strong>：启用 gzip 压缩，boolean 类型，默认为 false</li>
<li><strong>overlay</strong>：页面上报错信息是否显示，默认为false</li>
<li><strong>port</strong>: 端口</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><blockquote>
<p>配置<code>package.json</code>中<code>script</code> 终端输入<code>npm run dev</code> 运行服务器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">                <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>添加个html的压缩 安装 <code>npm install html-webpack-plugin -D</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;8080&#x27;</span>,</span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">overlay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugin</span>: &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"></span><br><span class="line">      	<span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;src&quot;</span>,<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">  	  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能打包html了</p>
<h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h3><p><code>loaders</code> 配置<code>css-loader</code></p>
<blockquote>
<p>安装 <code>npm install style-loader css-loader -D</code></p>
<p>再去 <code>webpack.config.js</code> 设置 这样就能打包<code>css</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: \[<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>\]</span><br><span class="line">      &#125;</span><br><span class="line">    \]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>安装：<code>npm install @babel/core @babel/preset -env babel -loader -D</code></p>
<p>项目的目录添加一个.babeirc文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> \<span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span>\<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>再去 <code>webpack.config.js</code> 设置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">            <span class="attr">use</span>: \[<span class="string">&#x27;babel-loader&#x27;</span>\],</span><br><span class="line">            <span class="attr">include</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line"></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">          &#125;</span><br><span class="line">        \]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置生产环境"><a href="#配置生产环境" class="headerlink" title="配置生产环境"></a>配置生产环境</h3><p>项目根目录创建一个 <code>webpack.prod.js</code></p>
<p>把开发环境的内容复制过来改改</p>
<p>更改<code>mode</code>为<code>production</code></p>
<p>输出文件加上<code>bundle.\[contenthash\].js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.\[contenthash\].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugin</span>: &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"></span><br><span class="line">      	<span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;src&quot;</span>,<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">  	  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更改<code>package.json</code>中<code>script</code> 中的<code>build</code> 为刚才新建的生产环境 <code>webpack.prod.js</code></p>
<p>使用<code>npm run build</code>运行打包</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.prod.js&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-ES6模块化规范"><a href="#4-ES6模块化规范" class="headerlink" title="4.ES6模块化规范"></a>4.ES6模块化规范</h2><p>ES6的模块化之前有三种规范：CommonJS、AMD、CMD 这几个其他大佬都有详细介绍</p>
<blockquote>
<p>ES6 模块的设计思想是尽量的静态化，使得<strong>编译时</strong>就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在<strong>运行时</strong>确定这些东西。</p>
<p>我这里就是简单的简述下ES6中的模块化规范</p>
<p>ES6中的模块自动采用<strong>严格模式</strong></p>
<p>ES6模块中的顶层<code>this</code>指向<code>undefined</code></p>
</blockquote>
<h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p><code>exprot</code>一定要写在<strong>最顶层</strong> 导出的值是动态绑定的，不是缓存</p>
<p>下面演示的导出皆在 <code>index.js</code>中</p>
<blockquote>
<p>分别导出：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">c</span> = (<span class="params"></span>)=&gt;&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一次全部导出</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">c</span> = (<span class="params"></span>)=&gt;&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; a, b, c &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在导出的时候通过 as 取别名</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">c</span> = (<span class="params"></span>)=&gt;&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; a <span class="keyword">as</span> lang1, b <span class="keyword">as</span> lang2, c <span class="keyword">as</span> lang3 &#125;</span><br></pre></td></tr></table></figure>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><blockquote>
<p>通过结构赋值 获取 导出的元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a, b, c&#125; <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然导入的时候也可以取别名</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a <span class="keyword">as</span> lang &#125; <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>导入所有的元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lang <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">a</span>)</span><br></pre></td></tr></table></figure>
<h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><p>可以指定模块默认输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>import导入的元素可以为任意名称</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lang <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>输出单个值，使用<code>export default</code></li>
<li>输出多个值，使用<code>export</code></li>
<li><code>export default</code>与普通的<code>export</code>不要同时使用</li>
</ul>
<h2 id="5-Linux命令"><a href="#5-Linux命令" class="headerlink" title="5.Linux命令"></a>5.Linux命令</h2><p>这里我就摆几个常用的，因为这个是我的总结，自己翻出来看看，所以更全Linux请到其他大佬那里查看</p>
<p><code>cp</code> 拷贝文件 ：<code>cp -rvf a/ /tmp/</code></p>
<p><code>mkdir</code> 创建目录：<code>mkdir dir</code></p>
<p><code>ls</code> 当前目录的所有内容。</p>
<p><code>ls -l</code>目录下详细信息</p>
<p><code>pwd</code> 当前所在的目录</p>
<p><code>cd</code> 打开目录</p>
<p><code>find</code> 查找文件</p>
<p><code>cat</code> 查看文件内容</p>
<p><code>grep</code>对内容进行过滤</p>
<p><code>diff</code>命令用来比较两个文件是否的差异</p>
<p><code>.tar``gz</code> 使用tar ,gzip命令操作</p>
<p><code>ps</code>命令能够看到进程/线程状态</p>
<p><code>ifconfig</code>查看ip地址</p>
<p><code>ping</code>测试网络</p>
<h1 id="关于运行环境"><a href="#关于运行环境" class="headerlink" title="关于运行环境"></a>关于运行环境</h1><blockquote>
<p>运行环境即浏览器( <code>server</code>端有<code>node.js</code> )</p>
<p>下载网页代码,渲染出页面,期间会执行若干JS</p>
<p>要保证代码在浏览器中: <strong>稳定</strong>且<strong>高效</strong></p>
</blockquote>
<h2 id="1-页面加载的过程"><a href="#1-页面加载的过程" class="headerlink" title="1.页面加载的过程"></a>1.页面加载的过程</h2><h3 id="1-从输入url到渲染出页面的整个过程"><a href="#1-从输入url到渲染出页面的整个过程" class="headerlink" title="1.从输入url到渲染出页面的整个过程"></a>1.从输入url到渲染出页面的整个过程</h3><blockquote>
<p>大致的流程</p>
</blockquote>
<ol>
<li><code>DNS</code>解析:域名-&gt;<code>IP</code>地址</li>
<li>浏览器根据<code>IP</code>地址向服务器发起<code>http</code>请求</li>
<li>服务器处理<code>http</code>请求,并返回给浏览器</li>
<li>浏览器解析渲染页面</li>
<li>连接结束</li>
</ol>
<blockquote>
<p>​ 渲染过程</p>
</blockquote>
<ul>
<li>根据<code>HTML</code>代码生成<code>DOM Tree</code></li>
<li>根据<code>CSS</code>代码生成<code>CSSOM</code></li>
<li>将<code>DOM Tree</code>和<code>CSSOM</code>整合行程<code>Render Tree</code></li>
<li>根据<code>Render Tree</code>渲染页面</li>
<li>遇到<code>&lt;script&gt;</code>则暂停渲染,优先加载并执行<code>JS</code>代码，完成再继续</li>
<li>直至把<code>Render Tree</code>渲染完成</li>
</ul>
<h3 id="2-window-onload和DOMContentLoaded的区别"><a href="#2-window-onload和DOMContentLoaded的区别" class="headerlink" title="2.window.onload和DOMContentLoaded的区别"></a>2.window.onload和DOMContentLoaded的区别</h3><ul>
<li><code>window.onload</code>资源全部加载完才能执行，包括图片</li>
<li><code>DOMContentLoaded``DOM</code>渲染完成即可,图片可能尚未下载</li>
</ul>
<h2 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2.性能优化"></a>2.性能优化</h2><blockquote>
<p>是一个综合性问题，没有标准答案,但要求尽量全面</p>
<p>某些细节问题可能会单独提问:手写防抖、节流</p>
<p>只关注核心点,针对面试</p>
</blockquote>
<h3 id="性能优化原则"><a href="#性能优化原则" class="headerlink" title="性能优化原则"></a>性能优化原则</h3><ul>
<li>多使用内存、缓存或其他方法</li>
<li>减少<code>CPU</code>计算量，减少网络加载耗时</li>
<li>(适用于所有编程的性能优化一空间换时间 )</li>
</ul>
<h3 id="让加载更快"><a href="#让加载更快" class="headerlink" title="让加载更快"></a>让加载更快</h3><ul>
<li>减少资源体积:压缩代码</li>
<li>减少访问次数:合并代码(多个js文件合并到一个文件然后加载), <code>SSR</code>服务器端渲染,缓存</li>
<li>使用更快的网络: <code>CDN</code></li>
<li><code>CSS</code>放在<code>head</code>，<code>JS</code>放在<code>body</code>最下面</li>
<li>尽早开始执行<code>JS</code>，用<code>DOMContentLoaded</code>触发</li>
<li>懒加载(图片懒加载,上滑加载更多)</li>
</ul>
<h3 id="让渲染更快"><a href="#让渲染更快" class="headerlink" title="让渲染更快"></a>让渲染更快</h3><ul>
<li>对DOM查询进行缓存</li>
<li>减少频繁DOM操作，合并到一起插入DOM结构</li>
<li>节流<code>throttle</code>防抖<code>debounce</code></li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul>
<li>静态资源加<code>hash</code>后缀，根据文件内容计算<code>hash</code></li>
<li>文件内容不变,则<code>hash</code>不变，则<code>url</code>不变</li>
<li><code>url</code>和文件不变,则会自动触发<code>http</code>缓存机制，返回<code>304</code></li>
</ul>
<h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><ul>
<li>服务器端渲染:将网页和数据一起加载，一起渲染</li>
<li>非<code>SSR</code> (前后端分离) :先加载网页，再加载数据,再渲染数据</li>
<li>早先的<code>JSP ASP PHP</code>，现在的vue React SSR</li>
</ul>
<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><blockquote>
<p>监听一个输入框的，文字变化后触发change事件</p>
<p>直接用keyup事件,则会频发触发change事件</p>
<p>防抖:用户输入结束或暂停时,才会触发change事件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">500</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">        <span class="title function_">cleartTimout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="title function_">seTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">    &#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="title function_">debounce</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>)</span><br><span class="line">&#125;,<span class="number">600</span>),<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><blockquote>
<p>拖拽一个元素时,要随时拿到该元素被拖拽的位置</p>
<p>直接用<code>drag</code>事件，则会频发触发，很容易导致卡顿</p>
<p>节流:无论拖拽速度多快，都会每隔<code>100ms</code>触发一次</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">500</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="title function_">seTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">    &#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;drag&#x27;</span>,<span class="title function_">throttle</span>( <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>,e.<span class="property">offsetY</span>)</span><br><span class="line">&#125;,<span class="number">600</span>),<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-安全"><a href="#3-安全" class="headerlink" title="3.安全"></a>3.安全</h2><blockquote>
<p><code>XSRF</code>攻击 这里简单的 介绍下</p>
</blockquote>
<ul>
<li>你正在购物,看中了某个商品，商品id是100</li>
<li>付费接口是xxx.com/pay?id=100 , 但没有任何验证</li>
<li>我是攻击者,我看中了一一个商品，id是200</li>
<li>我向你发送一封电子邮件 ,邮件标题很吸引人</li>
<li>但邮件正文隐藏着<img src=xxx.com/pay?id=200 /></li>
<li>你一查看邮件,就帮我购买了id是200的商品</li>
</ul>
<blockquote>
<p><code>XSRF</code>预防</p>
</blockquote>
<ul>
<li>使用post接口</li>
<li>增加验证，例如密码、短信验证码、指纹等</li>
</ul>
<h1 id="关于一些真题"><a href="#关于一些真题" class="headerlink" title="关于一些真题"></a>关于一些真题</h1><h2 id="号"><a href="#号" class="headerlink" title="+ 号"></a>+ 号</h2><ul>
<li>两个操作数如果是<code>number</code> 则直接相加出结果</li>
<li>如果其中有一个操作数为<code>string</code>， 则将另一个操作数隐式的转换为<code>string</code>,然后进行字符串拼接得出结果</li>
<li>如果操作数为对象或者是数组这种复杂的数据类型，那么就将两个操作数都转换为字符串，进行拼接</li>
<li>如果操作数是像<code>boolean</code>这种的简单数据类型，那么就将操作数转换为<code>number</code>相加得出结果</li>
<li><code>\[\]+&#123;&#125;</code> 因为会被强制转换为”,然后+运算符链接- 个<code>&#123;&#125;</code>, <code>&#123; &#125;</code>强制转换为字符串就是<code>&quot;\[Object Object\]&quot;</code></li>
<li><code>&#123;&#125;</code>当作一个空代码块，<code>+0</code>是强制将[]转换为<code>number</code>,转换的过程是<code>+\[0\] =&gt; +&quot;&quot; =&gt;0</code>最终的结果就是<code>0</code></li>
</ul>
<h2 id="var和let-const的区别"><a href="#var和let-const的区别" class="headerlink" title="var和let const的区别"></a>var和let const的区别</h2><ul>
<li><code>var</code>是<strong>ES5</strong>语法,<code>let``const</code>是<strong>ES6</strong>语法;<code>var</code>有变量提升</li>
<li><code>var</code>和<code>let</code>是变量，可修改;const是常量,不可修改;</li>
<li><code>let``const</code>有块级作用域,<code>var</code>没有</li>
</ul>
<h2 id="typeof返回哪些类型"><a href="#typeof返回哪些类型" class="headerlink" title="typeof返回哪些类型"></a>typeof返回哪些类型</h2><blockquote>
<p>一共是7种 值得注意的一点就是 typeof <strong>null</strong> //<strong>object</strong> 前面JS基础有提到</p>
</blockquote>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>object</li>
<li>function</li>
<li>undefined</li>
<li>symbol(ES6)</li>
</ul>
<h2 id="列举强制类型转换和隐式类型转换"><a href="#列举强制类型转换和隐式类型转换" class="headerlink" title="列举强制类型转换和隐式类型转换"></a>列举强制类型转换和隐式类型转换</h2><ul>
<li>强制: <code>parseInt``parseFloat``toString</code>等</li>
<li>隐式:<code>if</code>、<code>逻辑运算</code>、<code>==</code>、<code>+拼接字符串</code></li>
</ul>
<h2 id="手写深度比较-模拟lodash-isEqual"><a href="#手写深度比较-模拟lodash-isEqual" class="headerlink" title="手写深度比较,模拟lodash isEqual"></a>手写深度比较,模拟lodash isEqual</h2><blockquote>
<p>这里没考虑<code>function</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">obj1, obj2</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj1) || !<span class="title function_">isObject</span>(obj2)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj1Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1)</span><br><span class="line">  <span class="keyword">const</span> obj2Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj1Keys.<span class="property">length</span> !== obj2Keys.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">isEqual</span>(obj1\[key\], obj2\[key\])</span><br><span class="line">    <span class="keyword">if</span> (!result) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(obj1, obj1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">s</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">s</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(obj1, obj2))</span><br></pre></td></tr></table></figure>
<h2 id="split-和join-的区别"><a href="#split-和join-的区别" class="headerlink" title="split()和join()的区别"></a>split()和join()的区别</h2><blockquote>
<p>他们是一个相反的操做</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>\].<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;1-2-3&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="数组的pop-push-unshift-shift分别做什么"><a href="#数组的pop-push-unshift-shift分别做什么" class="headerlink" title="数组的pop push unshift shift分别做什么"></a>数组的pop push unshift shift分别做什么</h2><h3 id="一般从这三个角度回答"><a href="#一般从这三个角度回答" class="headerlink" title="一般从这三个角度回答"></a>一般从这三个角度回答</h3><blockquote>
<p>功能是什么?</p>
<p>返回值是什么?</p>
<p>是否会对原数组造成影响?</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = \[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> popRes = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(popRes, arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pushRes = arr.<span class="title function_">push</span>(<span class="number">50</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pushRes, arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unshiftRes = arr.<span class="title function_">unshift</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unshiftRes, arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shiftRes = arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shiftRes, arr)</span><br></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><blockquote>
<p>纯函数</p>
<ol>
<li>不改变源数组( 没有副作用)</li>
<li>返回一个数组</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = \[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">concat</span>(\[<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>\])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">25</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.<span class="title function_">slice</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr4)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>非纯函数</p>
<p><code>push``pop``shift``unshift</code></p>
<p><code>forEach</code></p>
<p><code>some``every</code></p>
<p><code>reduce</code></p>
</blockquote>
<h2 id="数组slice和splice的区别"><a href="#数组slice和splice的区别" class="headerlink" title="数组slice和splice的区别"></a>数组slice和splice的区别</h2><ul>
<li>功能区别( <code>slice</code>-切片, <code>splice</code>-剪接)</li>
<li>参数和返回值</li>
<li>是否纯函数?</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = \[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">slice</span>()</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> arr4 = arr.<span class="title function_">slice</span>(-<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spliceRes = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes, arr)</span><br></pre></td></tr></table></figure>
<h2 id="10-20-30-map-parseInt-返回结果是什么"><a href="#10-20-30-map-parseInt-返回结果是什么" class="headerlink" title="[10, 20, 30].map(parseInt)返回结果是什么?"></a>[10, 20, 30].map(parseInt)返回结果是什么?</h2><ul>
<li><code>map</code>的参数和返回值</li>
<li><code>parseInt</code>参数和返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = \[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>\].<span class="title function_">map</span>(<span class="built_in">parseInt</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>\].<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item,index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="ajax请求get和post的区别"><a href="#ajax请求get和post的区别" class="headerlink" title="ajax请求get和post的区别?"></a>ajax请求get和post的区别?</h2><ul>
<li><code>get</code>一般用于查询操作, <code>post</code>一般用户提交操作</li>
<li><code>get</code>参数拼接在url上, <code>post</code>放在请求体内(数据体积可更大)</li>
<li>安全性: <code>post</code>易于防止<code>CSRF</code></li>
</ul>
<h2 id="函数bind-call和apply的区别"><a href="#函数bind-call和apply的区别" class="headerlink" title="函数bind,call和apply的区别"></a>函数bind,call和apply的区别</h2><p><code>bind</code>创建一个新的函数, 当被调用时 ,第一参数this值，在调用新函数时，接受的是若干个参数列表</p>
<p><code>call</code>方法调用一个函数, 第一参数this值，接受的是若干个参数列表</p>
<p><code>apply</code>方法调用一个函数, 第一参数this值，第二个参数是一个数组（或类似数组的对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newFn = fn.<span class="title function_">bind</span>(<span class="variable language_">this</span>,p1,p2,p3)</span><br><span class="line"><span class="title function_">newFn</span>()</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="variable language_">this</span>,p1,p2,p3)</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br></pre></td></tr></table></figure>
<h2 id="事件代理-委托-是什么"><a href="#事件代理-委托-是什么" class="headerlink" title="事件代理(委托)是什么?"></a>事件代理(委托)是什么?</h2><blockquote>
<p>事件代理就是利用事件冒泡或事件捕获的机制把一系列的内层元素事件绑定到外层元素。</p>
<p>在上面JS基础24有写</p>
</blockquote>
<h2 id="闭包是什么-有什么特性-有什么负面影响"><a href="#闭包是什么-有什么特性-有什么负面影响" class="headerlink" title="闭包是什么,有什么特性?有什么负面影响?"></a>闭包是什么,有什么特性?有什么负面影响?</h2><ul>
<li>能够访问其他函数内部变量的函数，被称为 <strong>闭包</strong></li>
<li>回顾作用域和自由变量</li>
<li>回顾闭包应用场景:作为参数被传入,作为返回值被返回</li>
<li>回顾:自由变量的查找,要在函数<strong>定义</strong>的地方(而非执行的地方)</li>
<li>影响:变量会常驻内存,得不到释放。闭包不要乱用</li>
</ul>
<h2 id="如何阻止事件冒泡和默认行为"><a href="#如何阻止事件冒泡和默认行为" class="headerlink" title="如何阻止事件冒泡和默认行为?"></a>如何阻止事件冒泡和默认行为?</h2><ul>
<li>event.stopPropagation()</li>
<li>event.preventDefault(）</li>
</ul>
<h2 id="查找、添加、删除、移动DOM节点的方法"><a href="#查找、添加、删除、移动DOM节点的方法" class="headerlink" title="查找、添加、删除、移动DOM节点的方法?"></a>查找、添加、删除、移动DOM节点的方法?</h2><blockquote>
<p>在上面 JS基础 20.DOM节点 21.DOM节点操作 有介绍</p>
</blockquote>
<h2 id="如何减少DOM操作"><a href="#如何减少DOM操作" class="headerlink" title="如何减少DOM操作?"></a>如何减少DOM操作?</h2><ul>
<li>缓存<code>DOM</code>查询结果</li>
<li>多次<code>DOM</code>操作,合并到一-次插入</li>
</ul>
<h2 id="解释jsonp的原理-为何它不是真正的ajax"><a href="#解释jsonp的原理-为何它不是真正的ajax" class="headerlink" title="解释jsonp的原理,为何它不是真正的ajax ?"></a>解释jsonp的原理,为何它不是真正的ajax ?</h2><ul>
<li><code>jsonp</code>不是官方的，<code>script</code>标签实现的请求。</li>
<li><code>jsonp</code>是一个同步请求，只支持<code>get</code>请求</li>
<li><code>ajax</code>通过<code>xhr</code>对象去实现，支持<code>get post</code> ,跨域请求需要后端配合解决跨域响应头</li>
</ul>
<h2 id="document-load和ready的区别"><a href="#document-load和ready的区别" class="headerlink" title="document load和ready的区别"></a>document load和ready的区别</h2><ul>
<li><code>ready</code>，表示文档结构已经加载完成（不包含图片等非文字媒体文件）</li>
<li><code>onload</code>，指示页面包含图片等文件在内的所有元素都加载完成</li>
</ul>
<h2 id="和-的不同"><a href="#和-的不同" class="headerlink" title="==和===的不同"></a><code>==</code>和<code>===</code>的不同</h2><ul>
<li>双等：判断值相等，会自动转换数据类型</li>
<li>三等：不会自动转换数据类型；全等是先判断左右两边的数据类型，如果数据类型不一致，则直接返回false，之后才会进行两边值的判断</li>
</ul>
<h2 id="函数声明和函数表达式的区别"><a href="#函数声明和函数表达式的区别" class="headerlink" title="函数声明和函数表达式的区别"></a>函数声明和函数表达式的区别</h2><ul>
<li>函数声明<code>function fn() &#123;...&#125;</code></li>
<li>函数表达式<code>const fn = function() &#123;..&#125;</code></li>
<li>函数声明会在代码执行前预加载,而函数表达式不会</li>
</ul>
<h2 id="new-Object-和Object-create-的区别"><a href="#new-Object-和Object-create-的区别" class="headerlink" title="new Object(和Object.create()的区别"></a>new Object(和Object.create()的区别</h2><ul>
<li><code>&#123;&#125;</code>等同于<code>new Object()</code>， 原型Object.prototype</li>
<li><code>Object.create(nul)</code>没有原型</li>
<li><code>Object.create(..)</code>可指定原型</li>
</ul>
<h2 id="关于this的场景题"><a href="#关于this的场景题" class="headerlink" title="关于this的场景题"></a>关于this的场景题</h2><blockquote>
<p>这是一个简单的例子 this 是在执行的时候确定的</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    count : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">getCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">User</span>.<span class="title function_">getCount</span>())</span><br><span class="line"><span class="keyword">const</span> func = <span class="title class_">User</span>.<span class="property">getCount</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">func</span>() )</span><br></pre></td></tr></table></figure>
<p>第一个打印的是 <code>1</code></p>
<p>第二个打印的是 <code>undefined</code> 因为这个时候 <code>this</code> 指向是<code>window</code></p>
<h2 id="关于作用域和自由变量的场景题"><a href="#关于作用域和自由变量的场景题" class="headerlink" title="关于作用域和自由变量的场景题"></a>关于作用域和自由变量的场景题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里打印的是 4 4 4</p>
<h2 id="判断字符串以字母开头-后面字母数字下划线-长度6-30"><a href="#判断字符串以字母开头-后面字母数字下划线-长度6-30" class="headerlink" title="判断字符串以字母开头,后面字母数字下划线,长度6-30"></a>判断字符串以字母开头,后面字母数字下划线,长度6-30</h2><p>这里是考察正则</p>
<p><code>var reg=/^\[a-zA-Z\]\\w&#123;5,29&#125;$/</code></p>
<p><code>str.test(reg)</code></p>
<h2 id="手写字符串trim方法-保证浏览器兼容性"><a href="#手写字符串trim方法-保证浏览器兼容性" class="headerlink" title="手写字符串trim方法,保证浏览器兼容性"></a>手写字符串trim方法,保证浏览器兼容性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">trim</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/^\\s+/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\\s+$/</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原型, this, 正则表达式 把空白变为空字符串</p>
</blockquote>
<h2 id="如何获取多个数字中的最大值"><a href="#如何获取多个数字中的最大值" class="headerlink" title="如何获取多个数字中的最大值"></a>如何获取多个数字中的最大值</h2><blockquote>
<p>自己封装max</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> nums = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    nums.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(item &gt; max) &#123;</span><br><span class="line">            max = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用Math.max</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<h2 id="如何用JS实现继承"><a href="#如何用JS实现继承" class="headerlink" title="如何用JS实现继承?"></a>如何用JS实现继承?</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a849f76b6cc45c3968a2f674f003081~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210710155504269"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lang&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">People</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点：</p>
</blockquote>
<p>多个实例对引用类型的操作会被篡改</p>
<h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><blockquote>
<p>使用call直接 把子类的this 传到父类</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">People</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">name</span>,lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>可以传递参数</li>
<li>name，age的这些属性是添加在 实例自身上的不是共享</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>使用不了 父类引用的变量 比如上面的<code>dd</code></li>
<li>使用不了<code>prototype</code>里面的 变量比如<code>eat</code></li>
</ul>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><blockquote>
<p>把 原型链继承 + 借用构造函数继承 组合起来</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">People</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">People</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;能看见千里之外的景物&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">sex</span>, lang.<span class="property">name</span>, lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更改过了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="keyword">let</span> jie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jie&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">dd</span>()</span><br><span class="line">jie.<span class="title function_">see</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>可以传递参数</li>
<li>父类引用的属性不被共享</li>
<li>可以使用父类 <code>prototype</code>的属性</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68f6063fcab344eaa4a49160bfcf6e57~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210710161425100.png"></p>
<ul>
<li>第一次的继承原型链的时候添加了 <code>name</code> 和 <code>age</code> 属性</li>
<li>第二次new 子类的实例的时候又添加 <code>name</code> 和 <code>age</code> 属性</li>
<li>根据原型链的查找规则 第二次会把第一次的覆盖</li>
</ul>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><blockquote>
<p>这个是真的用的少 <strong>ES5</strong>中的 <code>Object.create()</code>可以实现下面的 <code>object</code>函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> = obj</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobbys</span>: \[<span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;learn&#x27;</span>\],</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="title function_">object</span>(people)</span><br><span class="line">lang.<span class="property">name</span> = <span class="string">&#x27;lang&#x27;</span></span><br><span class="line">lang.<span class="property">hobbys</span>.<span class="title function_">push</span>(<span class="string">&#x27;sing&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jie = <span class="title function_">object</span>(people)</span><br><span class="line">jie.<span class="property">name</span> = <span class="string">&#x27;jie&#x27;</span></span><br><span class="line">jie.<span class="property">hobbys</span>.<span class="title function_">push</span>(<span class="string">&#x27;play&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">hobbys</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能传参</li>
<li>因为是浅复制，引用变量被共享了</li>
</ul>
<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><blockquote>
<p>创建一个函数，在内部做了一些加强浅复制就是 新增属性和方法，以<strong>增强函数</strong>，最后返回构造</p>
<p>这里直接用 Object.create() 来实现了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"></span><br><span class="line">    clone.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;see&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clone.<span class="property">haha</span> = <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobbys</span>: \[<span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;learn&#x27;</span>\],</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="title function_">createObj</span>(people)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点（同原型式继承）</p>
</blockquote>
<ul>
<li>不能传参</li>
<li>因为是浅复制，引用变量被共享了</li>
</ul>
<h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><blockquote>
<p>之前组合继承 调用了两次 构造参数</p>
<p><code>Student.prototype = new People();</code></p>
<p><code>let lang = new Student(&#39;lang&#39;, 21, &#39;男&#39;)</code></p>
</blockquote>
<ul>
<li>第一次的继承原型链的时候<code>Student.prototype</code> 添加了 <code>name</code> 和 <code>age</code> 属性</li>
<li>第二次new 子类的实例的时候又添加 <code>name</code> 和 <code>age</code> 属性</li>
</ul>
<p>避免重复添加， 我们让 <code>Student.prototype</code> 访问 <code>People.prototype</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">child, parent</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">  prototype.<span class="property">constructor</span> = child</span><br><span class="line"></span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">People</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Student</span>, <span class="title class_">People</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;能看见千里之外的景物&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">sex</span>, lang.<span class="property">name</span>, lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更改过了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="keyword">let</span> jie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jie&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">dd</span>()</span><br><span class="line">jie.<span class="title function_">see</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>父类方法可以复用</li>
<li>可以传递参数到父类</li>
<li>父类的引用属性不会被共享</li>
<li>只调用一次父类构造函数</li>
</ul>
<h3 id="extends-继承"><a href="#extends-继承" class="headerlink" title="extends 继承"></a>extends 继承</h3><blockquote>
<p><strong>ES6</strong>提供了<code>calss``extends``super</code>来实现继承</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">dd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;能看见千里之外的景物&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">sex</span>, lang.<span class="property">name</span>, lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更改过了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="keyword">let</span> jie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jie&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">dd</span>()</span><br><span class="line">jie.<span class="title function_">see</span>()</span><br></pre></td></tr></table></figure>
<h2 id="如何捕获JS程序中的异常"><a href="#如何捕获JS程序中的异常" class="headerlink" title="如何捕获JS程序中的异常?"></a>如何捕获JS程序中的异常?</h2><blockquote>
<p>通过<code>try...catch...</code>捕获</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>, ex.<span class="property">message</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>window.onerror</code> 自动捕获</p>
<p>第一，对跨域的js,如CDN的，不会有详细的报错信息 第二，对于压缩的js,还要配合sourceMap 反查到未压缩代码的行、列</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, linenom, colnom, error</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>message</code>：错误信息（字符串）</li>
<li><code>source</code>：发生错误的脚本URL（字符串）</li>
<li><code>linenom</code>：发生错误的行号（数字）</li>
<li><code>colno</code>m：发生错误的列号（数字）</li>
<li><code>error</code>：Error对象（对象）</li>
</ul>
<blockquote>
<p><code>window.addEventListener(&#39;error&#39;)</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123; ... &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON ?"></a>什么是JSON ?</h2><ul>
<li><code>json</code>是一种数据格式,本质是一-段字符串</li>
<li><code>json</code>格式和<code>JS</code>对象结构一致,对<code>JS</code>语言更友好</li>
</ul>
<h2 id="获取当前页面url参数"><a href="#获取当前页面url参数" class="headerlink" title="获取当前页面url参数"></a>获取当前页面url参数</h2><p>传统方式,查找<code>location.search</code></p>
<p>新<code>API``URL SearchParams</code></p>
<blockquote>
<p>传统方式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(^|&amp;)<span class="subst">$&#123;name&#125;</span>=(\[^&amp;\]*)(&amp;|$)`</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> res = search.<span class="title function_">match</span>(reg)</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res\[<span class="number">2</span>\]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">query</span>(<span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>URL SearchParams</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(search)</span><br><span class="line">  <span class="keyword">return</span> p.<span class="title function_">get</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">query</span>(<span class="string">&#x27;b&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="将url参数解析为JS对象"><a href="#将url参数解析为JS对象" class="headerlink" title="将url参数解析为JS对象"></a>将<code>url</code>参数解析为<code>JS</code>对象</h2><blockquote>
<p>传统方式， 分析 srarch</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">queyrToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> search = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>)</span><br><span class="line">    search.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">paramStr</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> arr = paramStr.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> key = arr\[<span class="number">0</span>\]</span><br><span class="line">        <span class="keyword">const</span> val = arr\[<span class="number">1</span>\]</span><br><span class="line">        res\[key\] = val</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 URLSearchParams</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">queryToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> pList = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(location.<span class="property">search</span>)</span><br><span class="line">    pList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val,key</span>) =&gt;</span> &#123;</span><br><span class="line">        res\[key\] = val</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扁平化数组和手写数组flatern考虑多层级"><a href="#扁平化数组和手写数组flatern考虑多层级" class="headerlink" title="扁平化数组和手写数组flatern考虑多层级"></a>扁平化数组和手写数组<code>flatern</code>考虑多层级</h2><p>比如 有这么一个数组 <code>\[1, 2, \[3, 4, \[10, 20, \[100, 200\]\]\], 5\]</code></p>
<p>输出：<code>\[1, 2, 3, 4, 10, 20, 100, 200, 5\]</code></p>
<blockquote>
<p>使用 concat</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="keyword">while</span>(arr.<span class="title function_">some</span>( <span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)))&#123;</span><br><span class="line">    arr = \[\].<span class="title function_">concat</span>(...arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>stringify</code> 把数组变成字符串 然后正则去除 所有<code>\[``\]</code>，根据<code>,</code>分割为数组，然后把每一项转为<code>number</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr).<span class="title function_">replace</span>(<span class="string">&#x27;/\\\[|\\\]/&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Number</span>(item))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用toString 和 上面差不多</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Number</span>(item))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用ES6 中flat就行</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自己手写<code>flatern</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFlat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> isDeep = arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br><span class="line">        <span class="keyword">if</span> (!isDeep) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>(\[\], arr)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">flat</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\].<span class="title function_">myFlat</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul>
<li>传统方式,遍历元素挨个比较、去重</li>
<li>使用<code>Set</code></li>
<li>考虑计算效率</li>
</ul>
<blockquote>
<p>传统方式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = \[\]</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(item) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>Set</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> \[...set\]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, obj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> item = obj\[key\];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            newObj\[key\] = &#123;&#125;;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj\[key\], item);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            newObj\[key\] = \[\];</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj\[key\], item);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newObj\[key\] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现一个不可改变的对象"><a href="#实现一个不可改变的对象" class="headerlink" title="实现一个不可改变的对象"></a>实现一个不可改变的对象</h2><ul>
<li><p>Object.isExtensible()方法判断一个对象是否是可扩展的(是否可以在它上面添加新的属性)。</p>
</li>
<li><p>Object.preventExtensions()方法让一个对象变的不可扩展，也就是永远不能再添加新的属性，并且返回原对象。</p>
</li>
<li><p>Object.isSealed()方法判断一个对象是否是密封的。</p>
</li>
<li><p>Object.seal()方法可以让一个对象密封，并返回被密封后的对象。</p>
</li>
<li><p>Object.isFrozen()方法判断一个对象是否被冻结。</p>
</li>
<li><p>Object.freeze()方法可以冻结一个对象。</p>
</li>
</ul>
<blockquote>
<p>1.不可扩展： 不可以增加新的属性，老的属性可以删除，也可以改值 2.密封： 不可以增加新的属性，老的属性不可以删除，但可以改值 3.冻结：不可以增加新的属性，老的属性不可以删除，不可以改值</p>
</blockquote>
<h2 id="介绍一下RAF-requestAnimateFrame"><a href="#介绍一下RAF-requestAnimateFrame" class="headerlink" title="介绍一下RAF requestAnimateFrame"></a>介绍一下<code>RAF requestAnimateFrame</code></h2><ul>
<li>要想动画流畅,更新频率要60帧/s , 即<code>16.67ms</code>更新- -次视图</li>
<li><code>setTimeout</code>要手动控制频率，而RAF浏览器会自动控制</li>
<li>后台标签或隐藏<code>iframe</code>中, <code>RAF</code>会暂停,而<code>setTimeout</code>依然执行</li>
<li><p>这里使用了<code>jQuery</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $div1 = $(<span class="string">&#x27;#div1&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> curWidth = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> maxWidth = <span class="number">640</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    curWidth = curWidth + <span class="number">3</span></span><br><span class="line">    $div1.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>, curWidth)</span><br><span class="line">    <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(animate, <span class="number">16.7</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animate</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    curWidth = curWidth + <span class="number">3</span></span><br><span class="line">    $div1.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>, curWidth)</span><br><span class="line">    <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="前端性能如何优化-一般从哪几个方面考虑"><a href="#前端性能如何优化-一般从哪几个方面考虑" class="headerlink" title="前端性能如何优化? 一般从哪几个方面考虑?"></a>前端性能如何优化? 一般从哪几个方面考虑?</h2><ul>
<li>原则:多使用内存、缓存，减少计算、减少网路请求</li>
<li>方向:加载页面,页面渲染，页面操作流畅度</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>手写一个简易vue响应式带你了解响应式原理</title>
    <url>/xiaolangwiki/2021/07/26/24/</url>
    <content><![CDATA[<h2 id="手写一个简易vue响应式带你了解响应式原理"><a href="#手写一个简易vue响应式带你了解响应式原理" class="headerlink" title="手写一个简易vue响应式带你了解响应式原理"></a>手写一个简易vue响应式带你了解响应式原理</h2><p>原文：<a href="https://juejin.cn/post/6989106100582744072">https://juejin.cn/post/6989106100582744072</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>这是小浪在学习<strong>Vue</strong>总结的一篇文章，在这篇文章我们来了解 <strong>Vue2.X</strong> 响应式原理，然后我们来实现一个 <strong>vue</strong> 响应式原理（写的内容简单）实现步骤和注释写的很清晰，大家有兴趣可以耐心观看，大家可以在评论多多交流，也希望大家能给 小浪一个 <strong>赞</strong></p>
</blockquote>
<h1 id="Vue2-X响应式原理"><a href="#Vue2-X响应式原理" class="headerlink" title="Vue2.X响应式原理"></a>Vue2.X响应式原理</h1><h2 id="1-defineProperty-的应用"><a href="#1-defineProperty-的应用" class="headerlink" title="1.defineProperty 的应用"></a>1.defineProperty 的应用</h2><p>在<strong>Vue2.X</strong> 响应式中使用到了 <strong>defineProperty</strong> 进行数据劫持，所以我们对它必须有一定的了解，那么我们先来了解它的使用方法把， 这里我们来使用 <strong>defineProperty</strong>来模拟 <strong>Vue</strong> 中的 <strong>data</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, <span class="string">&#x27;msg&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> data.<span class="property">msg</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (newValue === data.<span class="property">msg</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                data.<span class="property">msg</span> = newValue</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">textContent</span> = data.<span class="property">msg</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        vm.<span class="property">msg</span> = <span class="string">&#x27;1234&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ad4d2fcc15f47d9a3df0db8878ffba5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="7"></p>
<p>可以看见 上面 <strong>vm.msg</strong> 数据是<strong>响应式</strong>的</p>
<h2 id="2-defineProperty修改多个参数为响应式"><a href="#2-defineProperty修改多个参数为响应式" class="headerlink" title="2.defineProperty修改多个参数为响应式"></a>2.defineProperty修改多个参数为响应式</h2><blockquote>
<p>修改多个参数</p>
</blockquote>
<p>看了上面的方法只能修改一个属性，实际上我们 <strong>data</strong> 中数据不可能只有一个,我们何不定义一个方法把<strong>data</strong>中的数据进行遍历都修改成响应式呢</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;哈哈&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">proxyData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">configurable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> data\[key\]</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (newValue === data\[key\]) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        data\[key\] = newValue</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">textContent</span> = data\[key\]</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">proxyData</span>(data)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-Proxy"><a href="#3-Proxy" class="headerlink" title="3.Proxy"></a>3.Proxy</h2><blockquote>
<p>在<strong>Vue3</strong> 中使用 <strong>Proxy</strong> 来设置响应式的属性</p>
</blockquote>
<p>先来了解下 <strong>Proxy</strong> 的两个参数</p>
<p><code>new Proxy(target,handler)</code></p>
<ul>
<li><code>target</code> ：要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li>
<li><code>handler</code>：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code> 的行为</li>
</ul>
<p>其实 和 Vue2.X实现的逻辑差不多，不过实现的方法不一样</p>
<p>那么就放上代码了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> data = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">return</span> target\[key\]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">set</span>(<span class="params">target, key, newValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span> (target\[key\] === newValue) <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    target\[key\] = newValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">textContent</span> = target\[key\]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>触发<strong>set</strong> 和 <strong>get</strong> 的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.<span class="property">msg</span> = <span class="string">&#x27;haha&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">msg</span>)</span><br></pre></td></tr></table></figure>
<h2 id="4-发布订阅模式"><a href="#4-发布订阅模式" class="headerlink" title="4.发布订阅模式"></a>4.发布订阅模式</h2><blockquote>
<p>在Vue 响应式中应用到了 发布订阅模式 我们先来了解下</p>
</blockquote>
<p>首先来说简单介绍下 一共有三个角色</p>
<p><strong>发布者</strong>、 <strong>订阅者</strong>、 <strong>信号中心</strong> 举个现实中例子 作者(发布者)写一篇文章 发到了掘金(信号中心) ,掘金可以处理文章然后推送到了首页，然后各自大佬(订阅者)就可以订阅文章</p>
<p>在Vue 中的例子 就是<strong>EventBus</strong><code>$on``$emit</code></p>
<blockquote>
<p>那么我们就简单模仿一下 Vue 的事件总线吧</p>
</blockquote>
<p>之前代码缩进4个单位有点宽，这里改成2个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">subs</span> = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      $on(type, fn) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">subs</span>\[type\]) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">subs</span>\[type\] = \[\]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">subs</span>\[type\].<span class="title function_">push</span>(fn)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      $emit(type) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">subs</span>\[type\]) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">subs</span>\[type\].<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(...args))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> eventHub = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    eventHub.$on(<span class="string">&#x27;sum&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = \[...<span class="variable language_">arguments</span>\].<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    eventHub.$emit(<span class="string">&#x27;sum&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-观察者模式"><a href="#5-观察者模式" class="headerlink" title="5.观察者模式"></a>5.观察者模式</h2><blockquote>
<p>与 发布订阅 的差异</p>
</blockquote>
<p>与发布订阅者不同 观察者中 发布者和订阅者(观察者)是相互依赖的 必须要求观察者订阅内容改变事件 ，而发布订阅者是由调度中心进行调度，那么看看观察者模式 是如何相互依赖，下面就举个简单例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">observerLists</span> = \[\]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">addObs</span>(<span class="params">obs</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (obs &amp;&amp; obs.<span class="property">update</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">observerLists</span>.<span class="title function_">push</span>(obs)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">observerLists</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">obs</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          obs.<span class="title function_">update</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">empty</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">observerLists</span> = \[\]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">update</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目标更新了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> sub = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obs1 = <span class="keyword">new</span> <span class="title class_">Observer</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obs2 = <span class="keyword">new</span> <span class="title class_">Observer</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    sub.<span class="title function_">addObs</span>(obs1)</span></span><br><span class="line"><span class="language-javascript">    sub.<span class="title function_">addObs</span>(obs2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    sub.<span class="title function_">notify</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-模拟Vue的响应式原理"><a href="#6-模拟Vue的响应式原理" class="headerlink" title="6.模拟Vue的响应式原理"></a>6.模拟Vue的响应式原理</h2><blockquote>
<p>这里来实现一个小型简单的 <strong>Vue</strong> 主要实现以下的功能</p>
</blockquote>
<ul>
<li>接收初始化的参数，这里只举几个简单的例子 <strong>el**</strong>data<strong>**options</strong></li>
<li>通过私有方法 <strong>_proxyData</strong> 把<strong>data</strong> 注册到 <strong>Vue</strong> 中 转成<strong>getter**</strong>setter**</li>
<li>使用 <strong>observer</strong> 把 <strong>data</strong> 中的属性转为 响应式 添加到 自身身上</li>
<li>使用 <strong>observer</strong> 方法监听 <strong>data</strong> 的所有属性变化来 通过观察者模式 更新视图</li>
<li>使用 <strong>compiler</strong> 编译元素节点上面指令 和 文本节点差值表达式</li>
</ul>
<h3 id="1-vue-js"><a href="#1-vue-js" class="headerlink" title="1.vue.js"></a>1.vue.js</h3><p>在这里获取到 <code>el``data</code></p>
<p>通过 <strong>_proxyData</strong> 把 <strong>data</strong>的属性 注册到<strong>Vue</strong> 并转成 <strong>getter**</strong>setter**</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> =</span><br><span class="line">      <span class="keyword">typeof</span> options.<span class="property">el</span> === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">        ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>)</span><br><span class="line">        : options.<span class="property">el</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span> || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_proxyData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> data\[key\]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (newValue === data\[key\]) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">          data\[key\] = newValue</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-observer-js"><a href="#2-observer-js" class="headerlink" title="2.observer.js"></a>2.observer.js</h3><p>在这里把 <strong>data</strong> 中的 属性变为响应式加在自身的身上，还有一个主要功能就是 观察者模式在 第 <code>4.dep.js</code> 会有详细的使用</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data, key, data\[key\])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">defineReactive</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newValue === value) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        value = newValue</span><br><span class="line"></span><br><span class="line">        self.<span class="title function_">walk</span>(newValue)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在html中引入的话注意顺序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在<strong>vue.js</strong> 中使用 <strong>Observer</strong></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_proxyData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这里为什么做了两个重复性的操作呢？重复性两次把 <strong>data</strong>的属性转为响应式</p>
<p>在<strong>obsever.js</strong> 中是把 <strong>data</strong> 的所有属性 加到 <strong>data</strong> 自身 变为响应式 转成 <strong>getter**</strong>setter**方式</p>
<p>在<strong>vue.js</strong> 中 也把 <strong>data</strong>的 的所有属性 加到 <strong>Vue</strong> 上,是为了以后方面操作可以用 <strong>Vue</strong> 的实例直接访问到 或者在 <strong>Vue</strong> 中使用 <strong>this</strong> 访问</p>
<blockquote>
<p>使用例子</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;123&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>: <span class="number">21</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/792a2a311f044c3a8d153c4fad2f0c46~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210725162744305"></p>
<p>这样在<code>Vue</code> 和 <code>$data</code> 中都存在了 所有的<strong>data</strong> 属性了 并且是响应式的</p>
<h3 id="3-compiler-js"><a href="#3-compiler-js" class="headerlink" title="3.compiler.js"></a>3.compiler.js</h3><p><strong>comilper.js</strong>在这个文件里实现对文本节点 和 元素节点指令编译 主要是为了举例子 当然这个写的很简单 指令主要实现 <strong>v-text**</strong>v-model**</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = vm.<span class="property">$el</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">el</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> childNodes = \[...el.<span class="property">childNodes</span>\]</span><br><span class="line">    childNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isTextNode</span>(node)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">childNodes</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> val = node.<span class="property">textContent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> key = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">trim</span>()</span><br><span class="line"></span><br><span class="line">      node.<span class="property">textContent</span> = val.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">vm</span>\[key\])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line"></span><br><span class="line">    !\[...node.<span class="property">attributes</span>\].<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123;</span><br><span class="line"></span><br><span class="line">        attrName = attrName.<span class="title function_">substr</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> key = attr.<span class="property">value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(node, key, attrName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">node, key, attrName</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>\[attrName + <span class="string">&#x27;Updater&#x27;</span>\]</span><br><span class="line"></span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, key, <span class="variable language_">this</span>.<span class="property">vm</span>\[key\])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">textUpdater</span>(<span class="params">node, key, value</span>) &#123;</span><br><span class="line">    node.<span class="property">textContent</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">modelUpdater</span>(<span class="params">node, key, value</span>) &#123;</span><br><span class="line">    node.<span class="property">value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">attr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> attr.<span class="title function_">startsWith</span>(<span class="string">&#x27;v-&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isTextNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-dep-js"><a href="#4-dep-js" class="headerlink" title="4.dep.js"></a>4.dep.js</h3><p>写一个<strong>Dep</strong>类 它相当于 观察者中的发布者 每个响应式属性都会创建这么一个 <strong>Dep</strong> 对象 ，负责收集该依赖属性的<strong>Watcher</strong>对象 （是在使用响应式数据的时候做的操作）</p>
<p>当我们对响应式属性在 <strong>setter</strong> 中进行更新的时候，会调用 <strong>Dep</strong> 中 <strong>notify</strong> 方法发送更新通知</p>
<p>然后去调用 <strong>Watcher</strong> 中的 <strong>update</strong> 实现视图的更新操作（是当数据发生变化的时候去通知观察者调用观察者的update更新视图）</p>
<p>总的来说 在<strong>Dep</strong>(这里指发布者) 中负责收集依赖 添加观察者(这里指<strong>Wathcer</strong>)，然后在 <strong>setter</strong> 数据更新的时候通知观察者</p>
<p>说的这么多重复的话，大家应该知道是在哪个阶段 收集依赖 哪个阶段 通知观察者了吧，下面就来实现一下吧</p>
<blockquote>
<p>先写<strong>Dep</strong>类</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = \[\]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sub &amp;&amp; sub.<span class="property">update</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span><br><span class="line">      sub.<span class="title function_">update</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 <strong>obsever.js</strong> 中使用<strong>Dep</strong></p>
</blockquote>
<p>在 <strong>get</strong> 中添加 <strong>Dep.target</strong> (观察者)</p>
<p>在 <strong>set</strong> 中 触发 <strong>notify</strong> (通知)</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">defineReactive</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">	  ...</span><br><span class="line"></span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue === value) <span class="keyword">return</span></span><br><span class="line">        value = newValue</span><br><span class="line">        self.<span class="title function_">walk</span>(newValue)</span><br><span class="line"></span><br><span class="line">        dep.<span class="title function_">notify</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-watcher-js"><a href="#5-watcher-js" class="headerlink" title="5.watcher.js"></a>5.watcher.js</h3><p>**watcher **的作用 数据更新后 收到通知之后 调用 <strong>update</strong> 进行更新</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, key, cb</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldValue</span> = vm\[key\]</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newValue = <span class="variable language_">this</span>.<span class="property">vm</span>\[<span class="variable language_">this</span>.<span class="property">key</span>\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newValue === <span class="variable language_">this</span>.<span class="property">oldValue</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cb</span>(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么去哪里创建 <strong>Watcher</strong> 呢？还记得在 <strong>compiler.js</strong>中 对文本节点的编译操作吗</p>
<p>在编译完文本节点后 在这里添加一个 <strong>Watcher</strong></p>
<p>还有 <strong>v-text**</strong>v-model<strong> 指令 当编译的是元素节点 就添加一个 </strong>Watcher**</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = vm.<span class="property">$el</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> childNodes = \[...el.<span class="property">childNodes</span>\]</span><br><span class="line">    childNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isTextNode</span>(node)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line">       ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\\&#123;\\&#123;(.+)\\&#125;\\&#125;/</span></span><br><span class="line">    <span class="keyword">let</span> val = node.<span class="property">textContent</span></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">      <span class="keyword">let</span> key = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">trim</span>()</span><br><span class="line">      node.<span class="property">textContent</span> = val.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">vm</span>\[key\])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span><br><span class="line">        node.<span class="property">textContent</span> = newValue</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">textUpdater</span>(<span class="params">node, key, value</span>) &#123;</span><br><span class="line">    node.<span class="property">textContent</span> = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      node.<span class="property">textContent</span> = newValue</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">modelUpdater</span>(<span class="params">node, key, value</span>) &#123;</span><br><span class="line">    node.<span class="property">value</span> = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      node.<span class="property">value</span> = newValue</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vm</span>\[key\] = node.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当 我们改变 响应式属性的时候 触发了 <strong>set()</strong> 方法 ，然后里面 发布者 <strong>dep.notify</strong> 方法启动了，拿到了 所有的 观察者 <strong>watcher</strong> 实例去执行 <strong>update</strong> 方法调用了回调函数 <strong>cb(newValue)</strong> 方法并把 新值传递到了 <strong>cb()</strong> 当中 <strong>cb</strong>方法是的具体更新视图的方法 去更新视图</p>
<p>比如上面的例子里的第三个参数 <strong>cb</strong>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span><br><span class="line">    node.<span class="property">textContent</span> = newValue</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>还有一点要实现<strong>v-model</strong>的双向绑定</p>
<p>不仅要通过修改数据来触发更新视图，还得为<strong>node</strong>添加 <strong>input</strong> 事件 改变 <strong>data</strong>数据中的属性</p>
<p>来达到双向绑定的效果</p>
<h2 id="7-测试下自己写的"><a href="#7-测试下自己写的" class="headerlink" title="7.测试下自己写的"></a>7.测试下自己写的</h2><blockquote>
<p>到了目前为止 响应式 和 双向绑定 都基本实现了 那么来写个例子测试下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;age&#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/dep.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/compiler.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&#x27;123&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">21</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1e875a85d8845f7b6a92e98ba7d1f3a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="8"></p>
<p>OK 基本实现了 通过 观察者模式 来 实现 响应式原理</p>
<h2 id="8-五个文件代码"><a href="#8-五个文件代码" class="headerlink" title="8.五个文件代码"></a>8.五个文件代码</h2><p>这里直接把5个文件个代码贴出来 上面有的地方省略了,下面是完整的方便大家阅读</p>
<blockquote>
<p>vue.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> =</span><br><span class="line">      <span class="keyword">typeof</span> options.<span class="property">el</span> === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">        ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>)</span><br><span class="line">        : options.<span class="property">el</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span> || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Compiler</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_proxyData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> data\[key\]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (newValue === data\[key\]) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">          data\[key\] = newValue</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>obsever.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data, key, data\[key\])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">defineReactive</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newValue === value) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        value = newValue</span><br><span class="line"></span><br><span class="line">        self.<span class="title function_">walk</span>(newValue)</span><br><span class="line"></span><br><span class="line">        dep.<span class="title function_">notify</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>compiler.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = vm.<span class="property">$el</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">el</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> childNodes = \[...el.<span class="property">childNodes</span>\]</span><br><span class="line">    childNodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isTextNode</span>(node)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">childNodes</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\\&#123;\\&#123;(.+?)\\&#125;\\&#125;/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> val = node.<span class="property">textContent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> key = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">trim</span>()</span><br><span class="line"></span><br><span class="line">      node.<span class="property">textContent</span> = val.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">vm</span>\[key\])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        node.<span class="property">textContent</span> = newValue</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line"></span><br><span class="line">    !\[...node.<span class="property">attributes</span>\].<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123;</span><br><span class="line"></span><br><span class="line">        attrName = attrName.<span class="title function_">substr</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> key = attr.<span class="property">value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(node, key, attrName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">node, key, attrName</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>\[attrName + <span class="string">&#x27;Updater&#x27;</span>\]</span><br><span class="line"></span><br><span class="line">    updateFn &amp;&amp; updateFn.<span class="title function_">call</span>(<span class="variable language_">this</span>, node, key, <span class="variable language_">this</span>.<span class="property">vm</span>\[key\])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">textUpdater</span>(<span class="params">node, key, value</span>) &#123;</span><br><span class="line">    node.<span class="property">textContent</span> = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      node.<span class="property">textContent</span> = newValue</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">modelUpdater</span>(<span class="params">node, key, value</span>) &#123;</span><br><span class="line">    node.<span class="property">value</span> = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      node.<span class="property">value</span> = newValue</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vm</span>\[key\] = node.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">attr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> attr.<span class="title function_">startsWith</span>(<span class="string">&#x27;v-&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isTextNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>dep.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = \[\]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sub &amp;&amp; sub.<span class="property">update</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span><br><span class="line">      sub.<span class="title function_">update</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>watcher.js</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, key, cb</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldValue</span> = vm\[key\]</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newValue = <span class="variable language_">this</span>.<span class="property">vm</span>\[<span class="variable language_">this</span>.<span class="property">key</span>\]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newValue === <span class="variable language_">this</span>.<span class="property">oldValue</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cb</span>(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>响应式原理</tag>
      </tags>
  </entry>
  <entry>
    <title>手写简单vue3响应式原理</title>
    <url>/xiaolangwiki/2022/08/21/24/</url>
    <content><![CDATA[<h2 id="手写简单-vue3-响应式原理"><a href="#手写简单-vue3-响应式原理" class="headerlink" title="手写简单 vue3 响应式原理"></a>手写简单 vue3 响应式原理</h2><p>原文：<a href="https://juejin.cn/post/7134281691295645732">https://juejin.cn/post/7134281691295645732</a></p>
<blockquote>
<p>在之前的文章里小浪介绍过<a href="https://juejin.cn/post/6989106100582744072" title="https://juejin.cn/post/6989106100582744072">Vue2 的响应式原理</a>，评论中有掘友评论想让我介绍 Vue3 的响应式原理，那么在这篇文章中小浪来带大家来简单手写一下 Vue3 中的几个响应式 api</p>
</blockquote>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><blockquote>
<p>首先得先来介绍一下 Proxy 这个强大的 API：</p>
<p>在 Vue3 中使用 Proxy 对象来代替 Vue 2 中基于 Object.defineProperty，消除了 Vue 2 中基于 Object.defineProperty 所存在的一些局限，比如无法监听数组索引，length 属性等等</p>
<p>在 Proxy 中默认监听动态添加属性和属性的删除操作，就很方便</p>
</blockquote>
<p><strong>Proxy</strong>配合<strong>Reflect</strong>使用，<strong>Reflect</strong>是<strong>ES6</strong>出现的新特性，代码运行期间用来设置或获取对象成员（操作对象成员），<strong>Reflect</strong>没有出现前使用<strong>Object</strong>的一些方法比如 <code>Object.getPrototypeOf,</code><strong>Reflect</strong>也有对应的方法 <code>Reflect.getPrototypeOf</code>,两者都是一样的，不过<strong>Reflect</strong>更有语义。</p>
<p>下面来看一下基本的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小浪&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取对象属性<span class="subst">$&#123;key&#125;</span>值`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`设置对象属性<span class="subst">$&#123;key&#125;</span>值`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除对象属性<span class="subst">$&#123;key&#125;</span>值`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">age</span>);</span><br><span class="line">proxy.<span class="property">age</span> = <span class="number">21</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> proxy.<span class="property">age</span>);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">获取对象属性age值</span><br><span class="line">22</span><br><span class="line">设置对象属性age值</span><br><span class="line">删除对象属性age值</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>target：参数表示所要拦截的目标对象</p>
<p>handler：参数也是一个对象，用来定制拦截行为</p>
</blockquote>
<p>注意：</p>
<ul>
<li><strong>this</strong> 关键字表示的是代理的 handler 对象，<strong>所以不能使用 this 而是要用 receiver 传递</strong>，<code>receiver</code>代表当前 proxy 对象 或者 继承 proxy 的对象，它保证传递正确的 this 给 getter，setter</li>
<li><code>set</code> 和 <code>deleteProperty</code> 也需要返回（添加<code>return</code> ），返回的是一个布尔值，设置/删除成功返回 true，反之返回 false</li>
</ul>
<h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p>了解了上面的 Proxy 和 Reflect，我们来看一下 reactive 的实现，reactive，返回 proxy 对象，这个 reactive 可以深层次递归，如果发现子元素存在引用类型，递归处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">val</span>) =&gt; val !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hasOwn</span> = (<span class="params">target, key</span>) =&gt;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(target, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取对象属性<span class="subst">$&#123;key&#125;</span>值`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isObject</span>(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reactive</span>(result);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`设置对象属性<span class="subst">$&#123;key&#125;</span>值`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, reactive);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> result = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (oldValue !== value) &#123;</span><br><span class="line">        result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除对象属性<span class="subst">$&#123;key&#125;</span>值`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> hadKey = <span class="title function_">hasOwn</span>(target, key);</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (hadKey &amp;&amp; result) &#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;../src/reactive.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;小浪&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">test</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">test1</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">test2</span>: <span class="number">21</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> proxy = <span class="title function_">reactive</span>(obj);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">      proxy.<span class="property">test</span>.<span class="property">test1</span>.<span class="property">test2</span> = <span class="number">22</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> proxy.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55627152ac1843feb5bec13dc3641bb0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p>
<h2 id="收集依赖-触发更新"><a href="#收集依赖-触发更新" class="headerlink" title="收集依赖/触发更新"></a>收集依赖/触发更新</h2><p>上面我们还有 get 中收集依赖没有完成，收集依赖涉及道 track , effect 还有依赖地图，下面我给出一张图先介绍一下 effect 和 track 是如何收集依赖的</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/faf059ee41664a69a4fcd89f471c20f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p>
<p>响应式顺序：effect &gt; track &gt; trigger &gt; effect</p>
<p>在组件渲染过程中，一个 effect 会会触发 get，从而对值进行 track，当值发生改变，就会进行 trigge，执行 effect 来完成一个响应</p>
<p>那么先来实现 effect</p>
<h3 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h3><blockquote>
<p>effect 的实现很简单</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> activeEffect = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  activeEffect = callback;</span><br><span class="line">  <span class="title function_">callback</span>();</span><br><span class="line">  activeEffect = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="track"><a href="#track" class="headerlink" title="track"></a>track</h3><blockquote>
<p>然后就是对 track 的实现</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, (dep = <span class="keyword">new</span> <span class="title class_">Set</span>()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!dep.<span class="title function_">has</span>(activeEffect)) &#123;</span><br><span class="line">    dep.<span class="title function_">add</span>(activeEffect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后添加到 hander 里 get 中</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">track</span>(target, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="触发更新"><a href="#触发更新" class="headerlink" title="触发更新"></a>触发更新</h3><p>通过上面的图，我们知道在 set 中使用 trigger 函数来触发更新，我们来实现一下吧</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (dep) &#123;</span><br><span class="line">    dep.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effect</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">effect</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后添加到 hander 的 set 和 deleteProperty 中</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldValue !== value) &#123;</span><br><span class="line">        result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">        <span class="title function_">trigger</span>(target, key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hadKey &amp;&amp; result) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">trigger</span>(target, key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>把一个基础类型包装成一个有 value 响应式对象（这里是使用<code>get/set</code> 存取器，来进行追踪和触发），如果是普通对象就调用 reactive 来创建响应式对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">convert</span> = val =&gt; (<span class="title function_">isObject</span>(val) ? <span class="title function_">reactive</span>(val) : val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">_rawValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.\_rawValue = \_rawValue</span><br><span class="line">        <span class="variable language_">this</span>.\_\_v\_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.\_value = <span class="title function_">convert</span>(\_rawValue)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">track</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newValue !== <span class="variable language_">this</span>.<span class="property">_value</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newValue</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.\_value = <span class="title function_">convert</span>(<span class="variable language_">this</span>.\_rawValue)</span><br><span class="line"></span><br><span class="line">            <span class="title function_">trigger</span>(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">rawValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(rawValue) &amp;&amp; rawValue.\_\_v\_isRef) <span class="keyword">return</span> rawValue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(rawValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><blockquote>
<p><code>toRef</code>传入两个参数，<strong>目标对象</strong>，<strong>对象当中的属性名</strong>，它的返回结果就是<strong>属性名</strong>的可响应式数据，就是将对象中的某个值转化为响应式数据 toRef(obj,key)</p>
<p>那么简单来实现一下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectRefImpl</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">proxy, _key</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_proxy</span> = proxy</span><br><span class="line">        <span class="variable language_">this</span>.\_key = \_key</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.\_\_v\_isRef = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.\_proxy\[<span class="variable language_">this</span>.\_key\]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.\_proxy\[<span class="variable language_">this</span>.\_key\] = newVal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">toRef</span>(<span class="params">proxy, key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectRefImpl</span>(proxy, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, effect, toRef, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;../src/reactive.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小浪&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> age = <span class="title function_">toRef</span>(obj, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">age.<span class="property">value</span> = <span class="number">21</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  age.<span class="property">value</span> = <span class="number">22</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原来的 obj 对象没有 age 属性，使用 toRef 添加了 age， 并且是响应式的</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee07b1e766e64986b287d07acffb96e3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p>
<blockquote>
<p><strong>区别于 ref:</strong></p>
</blockquote>
<p>ref 是对原始数据的拷贝，当修改 ref 数据时，模板中的视图会发生改变，但是原始数据并不会改变。 toRef 是对原始数据的引用，修改 toRef 数据时，原始数据也会发生改变，但是视图并不会更新。</p>
<h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><blockquote>
<p>想必这个大家经常使用吧，平时如果使用 reactive 创建对象，我们不能直接进行解构，我们要使用 toRefs 帮助我们进行解构， 把整个 reactive 创建的对象变成 普通对象， 然后把每个属性变成 ref 响应式对象。那么直接上手写一下吧， 其实它的核心还是使用了 toRef</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">toRefs</span>(<span class="params">proxy</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ret = proxy <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? <span class="keyword">new</span> <span class="title class_">Array</span>(proxy.<span class="property">length</span>) : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> proxy) &#123;</span><br><span class="line"></span><br><span class="line">        ret\[key\] = <span class="title function_">toRef</span>(proxy, key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;../src/reactive.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小浪&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = <span class="title function_">toRefs</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">name.<span class="property">value</span> = <span class="string">&quot;小云&quot;</span>;</span><br><span class="line">age.<span class="property">value</span> = <span class="number">21</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试成功，toRefs 解构后的属性也是响应式</p>
</blockquote>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd0857b0aa1341b590f7632cdeed8e64~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FLianTianNo1%2Fvue3_reactive_demo" title="https://github.com/LianTianNo1/vue3_reactive_demo">github</a></p>
<blockquote>
<p>结语: 身边的小伙伴们都在准备秋招，这段时间除了实习之外的时间我也在慢慢准备，好久没更文了，感谢大家一直以来对小浪的支持，继续加油努力学习！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>响应式原理</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你在Webpack写一个Loader</title>
    <url>/xiaolangwiki/2022/05/22/26/</url>
    <content><![CDATA[<h2 id="手把手教你在-Webpack-写一个-Loader"><a href="#手把手教你在-Webpack-写一个-Loader" class="headerlink" title="手把手教你在 Webpack 写一个 Loader"></a>手把手教你在 Webpack 写一个 Loader</h2><p>原文：<a href="https://juejin.cn/post/7100534685134454815">https://juejin.cn/post/7100534685134454815</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有的时候，你可能在从零搭建 <code>Webpack</code> 项目很熟悉，配置过各种 <code>loader</code> ,面试官在 <code>Webpack</code> 方面问你，是否自己实现过一个<code>loader</code>?如果没有去了解过如果去实现，确实有点尴尬，其实呢，<code>loader</code>实现其实很简单的。下面说下<code>loader</code>是什么？</p>
<h3 id="为什么需要-Loader"><a href="#为什么需要-Loader" class="headerlink" title="为什么需要 Loader?"></a>为什么需要 Loader?</h3><blockquote>
<p><code>Webpack</code> 它只能处理 <code>js</code> 和 <code>JSON</code> 文件。面对 <code>css</code> 文件还有一些图片等等，<code>Webpack</code> 它自己是不能够处理的，它需要<code>loader</code> 处理其他类型的文件并将它们转换为有效的模块以供应用程序使用并添加到依赖关系图中，</p>
</blockquote>
<h3 id="Loader-是什么？"><a href="#Loader-是什么？" class="headerlink" title="Loader 是什么？"></a>Loader 是什么？</h3><blockquote>
<p><code>loader</code>本质上是一个<code>node</code>模块，符合<code>Webpack</code>中一切皆模块的思想。由于它是一个 <code>node</code> 模块，它必须导出一些东西。<code>loader</code>本身就是一个函数，在该函数中对接收到的内容进行转换，然后返回转换后的结果</p>
</blockquote>
<p>下面小浪为你简单介绍下<code>webpack</code>中的<code>loader</code></p>
<h2 id="常见的-loader"><a href="#常见的-loader" class="headerlink" title="常见的 loader"></a>常见的 loader</h2><p>我们先来回顾下常见的 <code>Loader</code> 基础的配置和使用吧（仅仅只是常见的，<code>npm</code>上面开发者大佬们发布的太多了）</p>
<p>那么开始吧，首先先介绍 处理 <code>CSS</code> 相关的 <code>Loader</code></p>
<h3 id="css-loader-和-style-loader"><a href="#css-loader-和-style-loader" class="headerlink" title="css-loader 和 style-loader"></a>css-loader 和 style-loader</h3><blockquote>
<p>安装依赖</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install css-loader style-loader</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用加载器</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: \[<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>\],</span><br><span class="line">        &#125;\],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>
<p>其中<code>module.rules</code>代表模块的处理规则。 每个规则可以包含很多配置项</p>
<p><code>test</code> 可以接收正则表达式或元素为正则表达式的数组。 只有与正则表达式匹配的模块才会使用此规则。 在此示例中，<code>/\\.css$/</code> 匹配所有以 <code>.css</code> 结尾的文件。</p>
<p><code>use</code> 可以接收一个包含规则使用的加载器的数组。 如果只配置了一个<code>css-loader</code>，当只有一个<code>loader</code>时也可以为字符串</p>
<p><code>css-loader</code> 的作用只是处理 <code>CSS</code> 的各种加载语法（<code>@import</code> 和 <code>url()</code> 函数等），如果样式要工作，则需要 <code>style-loader</code> 将样式插入页面</p>
<p><code>style-loader</code>加到了<code>css-loader</code>前面，这是因为在<code>Webpack</code>打包时是按照数组从后往前的顺序将资源交给<code>loader</code>处理的，因此要把最后生效的放在前面</p>
<blockquote>
<p>还可以这样写成对象的形式，里面<code>options</code>传入配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: \[</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line"></span><br><span class="line">                	&#125;,</span><br><span class="line">            	  &#125;</span><br><span class="line">            \],</span><br><span class="line">        &#125;\],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>exclude</code>与<code>include</code></p>
<p><code>include</code>代表该规则只对正则匹配到的模块生效</p>
<p><code>exclude</code>的含义是，所有被正则匹配到的模块都排除在该规则之外</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: \[<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>\],</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">include</span>: <span class="regexp">/src/</span>,</span><br><span class="line">    &#125;</span><br><span class="line">\],</span><br></pre></td></tr></table></figure>
<p>是否都还记得呢，现在有现成的脚手架，很多人都很少自己去配置这些了，欸~当然还有相关的 <code>sass/less</code>等等预处理器<code>loader</code>这里就不一一介绍了。</p>
<h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><p><code>babel-loader</code> 这个<code>loader</code>十分的重要，把高级语法转为<code>ES5</code>，常用于处理 <code>ES6+</code> 并将其编译为 <code>ES5</code>。 它允许我们在项目中使用最新的语言特性（甚至在提案中），而无需特别注意这些特性在不同平台上的兼容性。</p>
<blockquote>
<p>介绍下主要的三个模块</p>
</blockquote>
<ul>
<li>babel-loader：使 <code>Babel</code> 与 <code>Webpack</code> 一起工作的模块</li>
<li>@babel/core：<code>Babel</code>核心模块。</li>
<li>@babel/preset-env：是<code>Babel</code>官方推荐的<code>preseter</code>，可以根据用户设置的目标环境，自动添加编译<code>ES6+</code>代码所需的插件和补丁</li>
</ul>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: \[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="attr">use</span>: &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">presets</span>: \[\[</span><br><span class="line">          <span class="string">&#x27;env&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        \]\],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">\],</span><br></pre></td></tr></table></figure>
<h3 id="html-loader"><a href="#html-loader" class="headerlink" title="html-loader"></a>html-loader</h3><p><code>Webpack</code> 可不认识 <code>html</code>，直接报错，需要<code>loader</code>转化</p>
<p><code>html-loader</code> 用于将 <code>HTML</code> 文件转换为字符串并进行格式化，它允许我们通过 <code>JS</code> 加载一个 <code>HTML</code> 片段。</p>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install html-loader</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.html$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">\],</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> otherHtml <span class="keyword">from</span> <span class="string">&quot;./other.html&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(otherHtml);</span><br></pre></td></tr></table></figure>
<p>这样你可以在 js 中加载另一个页面，写刀当前 index.html 里面</p>
<h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>用于打包文件类型的资源，比如对<code>png</code>、<code>jpg</code>、<code>gif</code>等图片资源使用<code>file-loader</code>，然后就可以在<code>JS</code>中加载图片了</p>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install file-loader</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\\.(png|jpg|gif)$/</span>,</span><br><span class="line">                <span class="attr">use</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        \],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>
<h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p>既然介绍了 <code>file-loader</code> 就不得不介绍 <code>url-loader</code>，它们很相似，但是唯一的区别是用户可以设置文件大小阈值。 大于阈值时返回与<code>file-loader</code>相同的<code>publicPath</code>，小于阈值时返回文件<code>base64</code>编码。</p>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install url-loader</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.(png|jpg|gif)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">limit</span>: <span class="number">1024</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;\[name\].\[ext\]&#x27;</span>,</span><br><span class="line">                <span class="attr">publicPath</span>: <span class="string">&#x27;./assets/&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">\],</span><br></pre></td></tr></table></figure>
<h3 id="ts-loader"><a href="#ts-loader" class="headerlink" title="ts-loader"></a>ts-loader</h3><p><code>TypeScript</code>使用得越来越多，对于我们平时写代码有了更好的规范，项目更加利于维护…等等好处，我们也在<code>Webpack</code>中来配置 loader,本质上类似于 <code>babel-loader</code>，是一个连接 <code>Webpack</code> 和 <code>Typescript</code> 的模块</p>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install ts-loader typescript</span><br></pre></td></tr></table></figure>
<blockquote>
<p>loader 配置，主要的配置还是在 <code>tsconfig.json</code> 中</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.ts$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">\],</span><br></pre></td></tr></table></figure>
<h3 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h3><p>用来处理<code>vue</code>组件,还要安装<code>vue-template-compiler</code>来编译<code>Vue</code>模板，估计大家大部分都用脚手架了</p>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-loader  vue-template-compiler</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.vue$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">\],</span><br></pre></td></tr></table></figure>
<h2 id="写一个简单的-Loader"><a href="#写一个简单的-Loader" class="headerlink" title="写一个简单的 Loader"></a>写一个简单的 Loader</h2><p>介绍了几个常见的 loader 的安装配置，我们在具体的业务的实现的时候，可能遇到各种需求，上面介绍的或者 npm 上都没有的加载器都不适合当前的业务场景，那我们可以自己去实现一个自己的<code>loader</code>来满足自己的需求，小浪下面介绍一下如何自定义一个<code>loader</code></p>
<h3 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1.初始化项目"></a>1.初始化项目</h3><blockquote>
<p>初始化项目</p>
</blockquote>
<p>先创建一个项目文件夹（名字可以随意，当然肯定是英文名）后进行初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装依赖</p>
</blockquote>
<p>安装依赖： <code>Webpack</code> 和 <code>Webpack</code>脚手架 和 热更新服务器</p>
<p>不同的版本 <code>Webpack</code> 可能有些差异，如果你跟着我的这个例子写的话，小浪建议和我装一样的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack@4.39.2 webpack-cli@3.3.6 webpack-dev-server@3.11.0 -D</span><br></pre></td></tr></table></figure>
<blockquote>
<p>新建一个<code>index.html</code>文件</p>
</blockquote>
<p><code>dist/index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>新建一个入口文件 <code>index.js</code> 文件</p>
</blockquote>
<p><code>src/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建 <code>webpack.config.js</code> 配置文件</p>
</blockquote>
<p>配置出口和入口文件</p>
<p>配置<code>devServer</code>服务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">warnings</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 <code>package.json</code> 中配置启动命令</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Webpack-dev-server&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>启动 <code>npm run dev</code></p>
</blockquote>
<p><code>devServer</code>帮我们启动一个服务器，每次修改<code>index.js不</code>需要自己在去打包，而是自动帮我们完成这项任务</p>
<p>页面内容就是我们<code>index.js</code>编写的内容被打包成在<code>dist/bundle.js</code>引入到<code>index.html</code>了</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da2abd89712944d6a81877f7af8a6d54~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p>
<blockquote>
<p>当前的文件目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Webpack-demo</span><br><span class="line"> ├── dist</span><br><span class="line"> │   └── index.html</span><br><span class="line"> ├── package-lock.json</span><br><span class="line"> ├── package.json</span><br><span class="line"> ├── src</span><br><span class="line"> │   └── index.js</span><br><span class="line"> └── Webpack.config.js</span><br></pre></td></tr></table></figure>
<h3 id="2-实现一个简单的-loader"><a href="#2-实现一个简单的-loader" class="headerlink" title="2.实现一个简单的 loader"></a>2.实现一个简单的 loader</h3><blockquote>
<p>在 <code>src/MyLoader/my-loader.js</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">replace</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;, I am Xiaolang&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>返回其它结果 <code>this.callback</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">callback</span>(</span><br><span class="line"></span><br><span class="line">    <span class="attr">err</span>: <span class="title class_">Error</span> | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">content</span>: string | <span class="title class_">Buffer</span>,</span><br><span class="line"></span><br><span class="line">    sourceMap?: <span class="title class_">SourceMap</span>,</span><br><span class="line"></span><br><span class="line">    abstractSyntaxTree?: <span class="variable constant_">AST</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>打开代码对应的<code>source-map</code>，方便调试源代码。<code>source-map</code> 可以方便实际开发者在浏览器控制台查看源代码。 如果不处理<code>source-map</code>，最终将无法生成正确的<code>map</code>文件，在浏览器的开发工具中可能会看到混乱的源代码。</p>
<p>为了在使用 <code>this.callback</code> 返回内容时将 <code>source-map</code> 返回给 <code>Webpack</code></p>
<p><code>loader</code> 必须返回 <code>undefined</code> 让 <code>Webpack</code> 知道 <code>loader</code> 返回的结果在 <code>this.callback</code> 中，而不是在 <code>return</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source, sourceMaps</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">callback</span>(<span class="literal">null</span>, source.<span class="title function_">replace</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;, I am Xiaolang&quot;</span>), sourceMaps);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用加载本地 <code>loader</code> 两种方式</p>
</blockquote>
<p>1.<code>path.resolve</code></p>
<p>使用 <code>path.resolve</code> 指向这个本地文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;./src/myLoader/my-loader.js&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        \],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.<code>ResolveLoader</code></p>
<p>先去 <code>node_modules</code> 项目下寻找 <code>my-loader</code>，如果找不到，会再去 <code>./src/myLoader/</code> 目录下寻找。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>: \[<span class="string">&#x27;my-loader&#x27;</span>\],</span><br><span class="line">            &#125;,</span><br><span class="line">        \],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolveLoader</span>: &#123;</span><br><span class="line">        <span class="attr">modules</span>: \[<span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;./src/myLoader&#x27;</span>\],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个 <code>loader</code>的职责是单一的，使每个<code>loader</code>易维护。</p>
<p>如果源文件需要分多步转换才能正常使用，通过多个 Loader 进行转换。当调用多个<code>loader</code>进行文件转换时，每个<code>loader</code>都会链式执行。</p>
<p>第一个<code>loader</code>会得到要处理的原始内容，将前一个 loader 处理的结果传递给下一个。 处理完毕，最终的 Loader 会将处理后的最终结果返回给 <code>Webpack</code></p>
<p>所以，当你写<code>loader</code>记得保持它的职责单一，你只关心输入和输出。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96657df8c0484e4b9c915bbbb58fed5c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20220522142823507"></p>
<h3 id="3-option参数"><a href="#3-option参数" class="headerlink" title="3.option参数"></a>3.<code>option</code>参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: \[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">            <span class="attr">use</span>: \[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;my-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">flag</span>: <span class="literal">true</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            \],</span><br><span class="line">        &#125;,</span><br><span class="line">    \],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>那么我们如何在 loader 中获取这个写入配置信息呢？</p>
<p><code>Webpack</code> 提供了<code>loader-utils</code>工具</p>
<blockquote>
<p>在之前写的 loader 修改</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">&quot;loader-utils&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> options = loaderUtils.<span class="title function_">getOptions</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;options--&gt;&quot;</span>, options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">replace</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;, I am Xiaolang&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>控制台也打印了出来</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ff214671bba483da8487233a4c70357~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20220522143828316"></p>
<h3 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4.缓存"></a>4.缓存</h3><p>如果为每个构建重新执行重复的转换操作，这样<code>Webpack</code>构建可能会变得非常慢。</p>
<p><code>Webpack</code> 默认会缓存所有<code>loader</code>的处理结果，也就是说，当待处理的文件或者依赖的文件没有变化时，不会再次调用对应的<code>loader</code>进行转换操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cacheable</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">cacheable</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">replace</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;, I am Xiaolang&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>一般默认开启缓存，如果不想<code>Webpack</code>这个<code>loader</code>进行缓存，也可以关闭缓存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">cacheable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">replace</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;, I am Xiaolang&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="5-同步与异步"><a href="#5-同步与异步" class="headerlink" title="5.同步与异步"></a>5.同步与异步</h3><p>在某些情况下，转换步骤只能异步完成。</p>
<p>例如，您需要发出网络请求以获取结果。 如果使用同步方式，网络请求会阻塞整个构建，导致构建非常缓慢。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="variable language_">this</span>.<span class="title function_">async</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">someAsyncOperation</span>(source, <span class="keyword">function</span> (<span class="params">err, result, sourceMaps, ast</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(err, result, sourceMaps, ast);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="6-处理二进制数据"><a href="#6-处理二进制数据" class="headerlink" title="6.处理二进制数据"></a>6.处理二进制数据</h3><p>默认情况下，<code>Webpack</code> 传递给 <code>Loader</code> 的原始内容是一个 <code>UTF-8</code> 格式编码的字符串。 但是在某些场景下，加载器处理的不是文本文件，而是二进制文件</p>
<p>官网例子 通过 <code>exports.raw</code> 属性告诉 <code>Webpack</code> 该 <code>Loader</code> 是否需要二进制数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">  source <span class="keyword">instanceof</span> <span class="title class_">Buffer</span> === <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">raw</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<h3 id="7-实现一个渲染-markdown-文档-loader"><a href="#7-实现一个渲染-markdown-文档-loader" class="headerlink" title="7.实现一个渲染 markdown 文档 loader"></a>7.实现一个渲染 markdown 文档 loader</h3><blockquote>
<p>安装依赖 <code>md</code> 转 <code>html</code> 的依赖，当然可以选择另外一个模块 <code>marked</code></p>
<p>我这里使用的 <code>markdown-it</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install markdown-it@12.0.6 -D</span><br></pre></td></tr></table></figure>
<blockquote>
<p>辅助工具 用来添加 <code>div</code> 和 <code>class</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">ModifyStructure</span>(<span class="params">html</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> htmlList = html</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&lt;h3/g</span>, <span class="string">&quot;$*(&lt;h3&quot;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&lt;h2/g</span>, <span class="string">&quot;$*(&lt;h2&quot;</span>)</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;$*(&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> htmlList</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;h3&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;card card-3&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;h2&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;card card-2&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>新建一个 loader</p>
</blockquote>
<p><code>/src/myLoader/md-loader.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; getOptions &#125; = <span class="built_in">require</span>(<span class="string">&#x27;loader-utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MarkdownIt</span> = <span class="built_in">require</span>(<span class="string">&#x27;markdown-it&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> beautify = <span class="built_in">require</span>(<span class="string">&#x27;./beautify&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="title function_">getOptions</span>(<span class="variable language_">this</span>) || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> md = <span class="keyword">new</span> <span class="title class_">MarkdownIt</span>(&#123;</span><br><span class="line">        <span class="attr">html</span>: <span class="literal">true</span>,</span><br><span class="line">        ...options,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> html = <span class="title function_">beautify</span>(md.<span class="title function_">render</span>(source))</span><br><span class="line">    html = \<span class="string">`module.exports = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(html)&#125;</span>\`</span></span><br><span class="line"><span class="string">    this.callback(null, html)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样<code>loader</code>也写完了，<code>this.callback(null, html)</code> 和 <code>return</code> 在这里差不多哈。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">html = \<span class="string">`module.exports = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(html)&#125;</span>\`</span></span><br></pre></td></tr></table></figure>
<p>这里解析的结果是一个 <code>HTML</code> 字符串。 如果直接返回，也会面临<code>Webpack</code>无法解析模块的问题。 正确的做法是把这个<code>HTML</code>字符串拼接成一段<code>JS</code>代码。</p>
<p>这时候我们要返回的代码就是通过<code>module.exports</code>导出这个<code>HTML</code>字符串，这样外界在导入模块的时候就可以接收到这个<code>HTML</code>字符串。</p>
<blockquote>
<p>然后在<code>webpack.config.js</code>使用这个加载器</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>: \[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;my-loader&#x27;</span>,</span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">flag</span>: <span class="literal">true</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                \],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\\.md$/</span>,</span><br><span class="line">                <span class="attr">use</span>: \[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;md-loader&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                \],</span><br><span class="line">            &#125;,</span><br><span class="line">        \],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolveLoader</span>: &#123;</span><br><span class="line">        <span class="attr">modules</span>: \[<span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;./src/myLoader&#x27;</span>\],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">        <span class="attr">overlay</span>: &#123;</span><br><span class="line">            <span class="attr">warnings</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用</p>
<p>最后在<code>index.js</code>中加载一个<code>md</code>文件，我这里随便整个，新建<code>github</code>的<code>readme.md</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mdHtml <span class="keyword">from</span> <span class="string">&quot;./test.md&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">content.<span class="property">className</span> = <span class="string">&quot;content&quot;</span>;</span><br><span class="line">content.<span class="property">innerHTML</span> = mdHtml;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(content);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果图</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4ced26d90c4fb0b91e484856af5019~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20220522165928553"></p>
<blockquote>
<p>目录结构</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Webpack-demo</span><br><span class="line"> ├── dist</span><br><span class="line"> │   └── index.html</span><br><span class="line"> ├── package-lock.json</span><br><span class="line"> ├── package.json</span><br><span class="line"> ├── src</span><br><span class="line"> │   ├── index.js</span><br><span class="line"> │   ├── myLoader</span><br><span class="line"> │   │   ├── beautify.js</span><br><span class="line"> │   │   ├── md-loader.js</span><br><span class="line"> │   │   └── my-loader.js</span><br><span class="line"> │   └── test.md</span><br><span class="line"> └── webpack.config.js</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FLianTianNo1%2Fwebpack-loader-demo" title="https://github.com/LianTianNo1/webpack-loader-demo">github 仓库地址</a></p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>感谢大家能看到这里哈~ ，现在打包构建工具也慢慢增多了<code>vue-cli</code>，<code>vite</code>等等，但是 <code>webpack</code> 仍然有一席之地，很多值得学习的地方，继续努力学习~~</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>loader</tag>
      </tags>
  </entry>
  <entry>
    <title>打印排版小技巧：pt、px、mm 之间的神秘转换 🪄</title>
    <url>/xiaolangwiki/2024/07/23/26/</url>
    <content><![CDATA[<h2 id="打印排版小技巧：pt、px、mm-之间的神秘转换-🪄"><a href="#打印排版小技巧：pt、px、mm-之间的神秘转换-🪄" class="headerlink" title="打印排版小技巧：pt、px、mm 之间的神秘转换 🪄"></a>打印排版小技巧：pt、px、mm 之间的神秘转换 🪄</h2><p>原文：<a href="https://juejin.cn/post/7394652965908693043">https://juejin.cn/post/7394652965908693043</a></p>
<p>大家好，我是小浪，前几天在修改一个打印功能的 bug 的时候，突然发现了一个有趣的问题：打印出来的文字宽度和预期不符，导致排版错乱，需要重新换行。</p>
<p>仔细查看代码，发现之前同事们是根据每个字符的类型手动设置了一个大概的宽度，这显然不够精确，尤其是在涉及到不同字体、不同字号的时候，这种方法很容易出现问题。</p>
<p>为了解决这个问题，我决定深入研究一下打印排版中常用的单位：<strong>pt、px 和 mm</strong>，以及它们之间的转换关系。</p>
<h3 id="pt、px、mm-是什么？-🤔"><a href="#pt、px、mm-是什么？-🤔" class="headerlink" title="pt、px、mm 是什么？ 🤔"></a>pt、px、mm 是什么？ 🤔</h3><ul>
<li><strong>pt (point)</strong>：点，是印刷术语中常用的单位，1pt 等于 1/72 英寸。在网页设计中，pt 主要用于设置字体大小。</li>
<li><strong>px (pixel)</strong>：像素，是屏幕上最小的显示单元。在网页设计中，px 是最常用的长度单位，用于设置元素的宽度、高度、边距等。</li>
<li><strong>mm (millimeter)</strong>：毫米，是国际通用的长度单位。在打印设计中，mm 是常用的单位，用于设置纸张大小、边距等。</li>
</ul>
<h3 id="如何转换它们？-🔄"><a href="#如何转换它们？-🔄" class="headerlink" title="如何转换它们？ 🔄"></a>如何转换它们？ 🔄</h3><p>在过去，我们需要知道设备的 <strong>dpi (dots per inch)</strong>，也就是每英寸的像素密度，才能准确地将 pt、px 和 mm 之间进行转换。</p>
<p>例如，如果设备的 dpi 是 300，那么 1pt 就等于 300 / 72 = 4.17 px。</p>
<p>但是，这种方法比较麻烦，而且需要根据不同的设备进行调整。</p>
<p>好在，我们可以利用浏览器提供的 API 来直接获取 pt、px 和 mm 之间的转换关系，省去了很多麻烦。</p>
<h3 id="利用浏览器-API-实现转换-💻"><a href="#利用浏览器-API-实现转换-💻" class="headerlink" title="利用浏览器 API 实现转换 💻"></a>利用浏览器 API 实现转换 💻</h3><p>我们可以利用 JavaScript 和 DOM API 来实现 pt、px 和 mm 之间的转换。</p>
<p><strong>1. 获取每毫米的像素值</strong></p>
<p>首先，我们需要获取当前设备每毫米的像素值。我们可以创建一个 1mm 宽的 div 元素，插入到页面中，然后获取它的宽度，就可以得到每毫米的像素值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cachedMmPx = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getOneMmsPx</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (cachedMmPx !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedMmPx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;1mm&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; width &#125; = div.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">  <span class="keyword">const</span> mm1 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(width * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line">  div.<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line">  cachedMmPx = mm1;</span><br><span class="line">  <span class="keyword">return</span> mm1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>2. 将 px 转换为 mm</strong></p>
<p>有了每毫米的像素值，我们就可以将 px 转换为 mm 了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">pxToMm</span> = (<span class="params">px</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> mmPerPx = <span class="number">1</span> / <span class="title function_">getOneMmsPx</span>();</span><br><span class="line">  <span class="keyword">return</span> px * mmPerPx;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>3. 获取每 pt 的像素值</strong></p>
<p>类似地，我们可以创建一个 1pt 宽的 div 元素，获取它的宽度，就可以得到每 pt 的像素值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cachedPtPx = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getOnePtPx</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (cachedPtPx !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedPtPx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;1pt&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; width &#125; = div.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">  <span class="keyword">const</span> pt1 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(width * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line">  div.<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line">  cachedPtPx = pt1;</span><br><span class="line">  <span class="keyword">return</span> pt1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>4. 将 pt 转换为 px</strong></p>
<p>有了每 pt 的像素值，我们就可以将 pt 转换为 px 了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ptToPx</span> = (<span class="params">pt</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pxPerPt = <span class="title function_">getOnePtPx</span>();</span><br><span class="line">  <span class="keyword">return</span> pt * pxPerPt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>5. 我实际用到的代码获取指定字符的 mm 宽度</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getCharWidthInMm</span> = (<span class="params">char, ptSize = <span class="number">10.5</span>, fontFamily = <span class="string">&quot;宋体&quot;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!ctx) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">font</span> = <span class="string">`<span class="subst">$&#123;ptToPx(ptSize)&#125;</span>px <span class="subst">$&#123;fontFamily&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width &#125; = ctx.<span class="title function_">measureText</span>(char);</span><br><span class="line">  <span class="keyword">const</span> mmWidth = <span class="title function_">pxToMm</span>(width);</span><br><span class="line"></span><br><span class="line">  canvas.<span class="title function_">remove</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(mmWidth * <span class="number">10000</span>) / <span class="number">10000</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="解决打印排版问题-🚀"><a href="#解决打印排版问题-🚀" class="headerlink" title="解决打印排版问题 🚀"></a>解决打印排版问题 🚀</h3><p>有了这些代码，我就可以轻松地将模板上的 pt 值转换为 mm，从而判断字符是否超出预设的范围，解决打印排版错乱的问题。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在解决打印排版问题的时候，我在网上查询了 pt、px 和 mm 之间的转换关系，涉及到比值计算、DPI 等，认为无法对每个设备都适配，于是利用浏览器 API 实现了一套转换工具。</p>
<p>工作中经常会遇到一些看似复杂的问题，但通过深入研究和探索，往往可以找到简单有效的解决方案。希望我的经验能够帮助到大家，也希望大家在工作中遇到有趣的问题时，可以像我一样记录下来，并与大家分享！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>打印排版</tag>
        <tag>单位转换</tag>
      </tags>
  </entry>
  <entry>
    <title>还不会TS？带你TypeScript快速入门TS</title>
    <url>/xiaolangwiki/2021/08/23/10/</url>
    <content><![CDATA[<h2 id="还不会TS？-带你-TypeScript-快速入门TS"><a href="#还不会TS？-带你-TypeScript-快速入门TS" class="headerlink" title="还不会TS？ 带你 TypeScript 快速入门TS"></a>还不会TS？ 带你 TypeScript 快速入门TS</h2><p>原文：<a href="https://juejin.cn/post/6999440503712251935">https://juejin.cn/post/6999440503712251935</a></p>
<blockquote>
<p>前言</p>
</blockquote>
<p>TS 现在使用地越来越多，学计算机的就得不断的学习，才能更好的追逐这个时代，这是小浪以前学习TS时候的总结，能快速的帮助大家入门 TS，这里列举不是很全列举一些常用的，但是能满足平时的需求，具体的可以看官方的文档哈，这里只是简单的入门，希望能够帮助到大家</p>
<blockquote>
<p>往期精彩：</p>
<p><a href="https://juejin.cn/post/6994337441314242590" title="https://juejin.cn/post/6994337441314242590">快速上手Vuex 到 手写简易 Vuex</a></p>
<p><a href="https://juejin.cn/post/6990582632270528525" title="https://juejin.cn/post/6990582632270528525">从了解到深入虚拟DOM和实现diff算法</a></p>
<p><a href="https://juejin.cn/post/6989106100582744072" title="https://juejin.cn/post/6989106100582744072">手写一个简易vue响应式带你了解响应式原理</a></p>
<p><a href="https://juejin.cn/post/6988316779818778631" title="https://juejin.cn/post/6988316779818778631">从使用到自己实现简单Vue Router看这个就行了</a></p>
<p><a href="https://juejin.cn/post/6983934602196811789" title="https://juejin.cn/post/6983934602196811789">前端面试必不可少的基础知识，虽然少但是你不能不知道</a></p>
</blockquote>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><code>TS</code> 的优点和缺点就不一一赘述了，下面直接进入正题</p>
<blockquote>
<p>进行全局安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>
<h2 id="2-原始数据类型"><a href="#2-原始数据类型" class="headerlink" title="2.原始数据类型"></a>2.原始数据类型</h2><p>掘金代码高亮我觉得和主题有冲突，这里代码代码都是比较简单，我就直接截图了哈</p>
<blockquote>
<p>我们在变量后面添加 <code>: 类型</code> 就可以规定数据的类型，设置其他类型就会报错</p>
<p>我们这里先来了解下基础的类型</p>
</blockquote>
<h3 id="1-字符串-string"><a href="#1-字符串-string" class="headerlink" title="1.字符串 string"></a>1.字符串 <code>string</code></h3><blockquote>
<p>双引号（<code>&quot;</code>）或单引号（<code>&#39;</code>）表示字符串</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41ea8b9ef5f1447a8a247fb03764c170~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809093951818"></p>
<h3 id="2-数字-number"><a href="#2-数字-number" class="headerlink" title="2.数字 number"></a>2.数字 <code>number</code></h3><blockquote>
<p>支持 十/十六/二/八 进制</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55a20a97c3b6463ca7e278c7330620da~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809094238590"></p>
<h3 id="3-布尔-boolean"><a href="#3-布尔-boolean" class="headerlink" title="3.布尔 boolean"></a>3.布尔 <code>boolean</code></h3><blockquote>
<p>只能是 <code>true</code>/<code>false</code></p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68898b41d2a248aa9c6b6afa39fe8bad~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809094357439"></p>
<h3 id="4-undefined"><a href="#4-undefined" class="headerlink" title="4.undefined"></a>4.<code>undefined</code></h3><blockquote>
<p>用处不是很大</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4adbd43b75849fc9d01b4a6008e9da7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809094430315"></p>
<h3 id="5-null"><a href="#5-null" class="headerlink" title="5.null"></a>5.<code>null</code></h3><blockquote>
<p>用处不是很大</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16172c44cf944880b314d28b20470663~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809094458172"></p>
<h3 id="6-空-void"><a href="#6-空-void" class="headerlink" title="6.空 void"></a>6.空 <code>void</code></h3><blockquote>
<p>没有任何类型，函数的没用返回值的使用 <code>void</code> ,返回值为空（ <code>undefined</code> ）</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/534b91390cb1492bbc462b152d5682d7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210810194819203"></p>
<h3 id="7-任意类型-any"><a href="#7-任意类型-any" class="headerlink" title="7.任意类型 any"></a>7.任意类型 <code>any</code></h3><blockquote>
<p>这里当类型不确定的时候，就可以使用 <code>any</code> 任意类型，不到万不得已不使用</p>
<p><code>Unknow</code> 类型和 <code>any</code> 一样可以容纳任意类型比 <code>any</code> 安全</p>
<p>平时用的不多，就不介绍了</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdbd6793bacc4e9da6c199f3a312469f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809094624551"></p>
<h3 id="7-字面量"><a href="#7-字面量" class="headerlink" title="7.字面量"></a>7.字面量</h3><blockquote>
<p>定义什么就只能赋值什么</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/678078f02de34b5fb5c56bd9eb06ca9c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809154738126"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1d0fb316f0248bf872054508e89de4f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809154921672"></p>
<h2 id="3-复杂类型"><a href="#3-复杂类型" class="headerlink" title="3.复杂类型"></a>3.复杂类型</h2><h3 id="1-数组-array"><a href="#1-数组-array" class="headerlink" title="1.数组 array"></a>1.数组 <code>array</code></h3><blockquote>
<p>设置数组的类型 比如这个例子 <code>true</code> 这个就会报错，不属于<code>number</code>，数组的元素必须是规定好的类型 其他类型同理</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/689ff60c586342f9b8789a4e67eabf73~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808213454745"></p>
<h3 id="2-元组-tuple"><a href="#2-元组-tuple" class="headerlink" title="2.元组 tuple"></a>2.元组 <code>tuple</code></h3><blockquote>
<p>学习过 <code>Python</code> 的同学应该不太陌生，其实可以把它看做一个数组，可以声明多个类型的数组，这样就能插入多个数据类型的数据，就是长度固定的数组</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cc91183e9954989b20f51d3a94d01f3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808214401857"></p>
<h3 id="3-接口-interface"><a href="#3-接口-interface" class="headerlink" title="3.接口 interface"></a>3.接口 <code>interface</code></h3><blockquote>
<p>它能很方便的帮我们定义 <code>Ojbect</code> 类型，它是非常的灵活可以描述对象的各种类型</p>
</blockquote>
<p>与 <code>java</code> 的 <code>interface</code> 有些区别，下面简单了看下，具体的下面有介绍</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af7ba1b2e9a2457ca6838804c421dd97~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808215444817"></p>
<blockquote>
<p>在 <code>interface</code> 属性中添加 <code>？</code>可以<strong>省略</strong></p>
</blockquote>
<p>下面我们给 <code>height</code> 添加 <code>?</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c096e986c2ad491280a6679cecadb753~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808215805574"></p>
<blockquote>
<p><code>readonly</code> 不可改变的，定义完后就不能修改，是不是和 <code>const</code> 有点像，不过 <code>const</code> 是针对变量， <code>readonly</code> 是针对属性</p>
</blockquote>
<p>下面我们把 <code>id</code> 添加上 <code>readonly</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25cd6d6c64b14e21996955f12f45b33c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808220259826"></p>
<h3 id="4-函数-funtion"><a href="#4-函数-funtion" class="headerlink" title="4.函数 funtion"></a>4.函数 <code>funtion</code></h3><blockquote>
<p>我们要规定函数的 <strong>输入类型</strong> 和 <strong>返回类型</strong></p>
<p>在<strong>形参后面</strong>接冒号声明 形参的类型，在 <code>()后面</code>冒号声明 返回值类型</p>
</blockquote>
<p>传入多余的参数会报错</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63e8e40c28bc46bc9921e922820f1126~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808221913660"></p>
<p>我们也可以为函数添加<strong>可选参数</strong> 这里用 <code>?</code> 即可，这样我们就可以调用两个参数或者三个参数不报错</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/faa3922132a24f9fba068c2c82019387~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808221628843"></p>
<p>可选参数之后不能再加规定类型的形参</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cabe6ec6e988433ebb31d567865ef40b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808222057869"></p>
<p>我们可以把它添加个 <code>？</code>变为可选参数</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f52ec760d2e1416daa2fdd2fad66866d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808222200172"></p>
<p>除了上面这种声明式写法还有一种表达式写法</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1083fbd7400e4e12a755bc472050e818~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808222347710"></p>
<blockquote>
<p>有了上面的了解后我们来说下 <strong>定义函数类型</strong> 的变量</p>
</blockquote>
<p>这里这个函数还是上面那个</p>
<p>我们定义<code>mysum</code> 指定它 的类型 来接收 我们上面定义的函数</p>
<p><code>()</code> 里面是输入的形参的 类型</p>
<p><code>=&gt;</code> 代表是 <strong>返回值</strong> 的类型</p>
<p><code>:</code> 后面的都是声明类型，和代码逻辑没有什么关系</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6c6a8e940be4b32af49d561abf47f4c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808223036183"></p>
<blockquote>
<p>我们刚才说了 <code>interface</code> 可以描述各种类型，那么我们用 <code>interface</code> 来描述下函数类型</p>
</blockquote>
<p>注意一点 之前用的 <code>=&gt;</code> 来表示返回值类型</p>
<p>这里是在 <code>()</code>后 <code>: 返回值类型</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43b0ca286db34783b0d0609b8083fbbd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210808223626451"></p>
<h3 id="5-联合类型-union-types"><a href="#5-联合类型-union-types" class="headerlink" title="5.联合类型 union types"></a>5.联合类型 <code>union types</code></h3><blockquote>
<p>但对于一个变量的类型可能是几种类型的时候我们可以使用 <code>any</code> ，但是 <code>any</code> 的范围是不是有点大了，不到<strong>万不得已</strong>不使用，</p>
<p>我们如果知道是其中的哪几种类型的话，我们就可以使用 <strong>联合类型</strong> 用 <code>|</code> 分隔</p>
</blockquote>
<p>比如下面的例子，<code>haha</code> 可能是 <code>number</code> 或者 <code>string</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0c6c42d49bf415290f1e4bf5be2263b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809090557218"></p>
<p><strong>注意</strong>：在没有赋值之前，只能访问<strong>共同的方法、属性</strong>，比如下面的例子,<code>number</code> 没有<code>length</code> 属性</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/200ea90d1743410c9234f98644aa7238~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809091710353"></p>
<h3 id="6-对象-object"><a href="#6-对象-object" class="headerlink" title="6.对象 object"></a>6.对象 <code>object</code></h3><blockquote>
<p>我们 直接 <code>let a: object;</code> 是不是没有什么意义，因为 <code>js</code> 中对象太多了。。</p>
</blockquote>
<p>我们可以这样来用</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8656e57cf2984664a4de36aa97e764f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809113126137"></p>
<p>属性必须在类型 <code>&#123; name: string; age: number; &#125;</code> 中</p>
<h2 id="4-断言-type-inference"><a href="#4-断言-type-inference" class="headerlink" title="4.断言 type inference"></a>4.断言 <code>type inference</code></h2><blockquote>
<p>当在上面联合类型的变量传入的时候，我们声明了这个类型为 <code>number | string</code> 它不能不能调用 <code>length</code> 方法</p>
<p>机器没法判断这个类型，但是我们比机器更了解这个类型，我们人为可以指定类型 <code>string</code> 这里我们就可以用到 <strong>类型断言</strong></p>
</blockquote>
<h3 id="1-我们就用-as-来进行断言"><a href="#1-我们就用-as-来进行断言" class="headerlink" title="1.我们就用 as 来进行断言"></a>1.我们就用 <code>as</code> 来进行断言</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/763c3ce74ada44f98a4fd99b12e2ce02~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809093348502"></p>
<h3 id="2-还有一种写法-lt-类型-gt-两者的功能都是一样的"><a href="#2-还有一种写法-lt-类型-gt-两者的功能都是一样的" class="headerlink" title="2.还有一种写法 &lt;类型&gt; 两者的功能都是一样的"></a>2.还有一种写法 <code>&lt;类型&gt;</code> 两者的功能都是一样的</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f334abbe81545dd8830b65ad21a7bb0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809093854727"></p>
<h2 id="5-类型守卫-type-guard"><a href="#5-类型守卫-type-guard" class="headerlink" title="5.类型守卫 type guard"></a>5.类型守卫 <code>type guard</code></h2><blockquote>
<p>遇到联合类型的时候，使用 类型守卫可以 缩小范围</p>
</blockquote>
<p>实现以下和上面一样的方法</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4682cf9bc4ae407abd342a06a211bda4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809101137657"></p>
<p>类型守卫 除了 <code>typeof</code> 之外 ，还有 <code>instanceof</code>、 <code>in</code></p>
<h2 id="6-类-class"><a href="#6-类-class" class="headerlink" title="6.类 class"></a>6.类 <code>class</code></h2><p>在 <code>ES6</code> 中就有 类的概念了，在 <code>TS</code> 中对类添加一些功能，这里只说下几个常用的</p>
<blockquote>
<p>先写个基础的 类</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4b2d90218ed46cbad97df2377f99170~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809115531683"></p>
<blockquote>
<p>我们先来说下 3个访问修饰符</p>
</blockquote>
<p><code>Public</code>:修饰的属性或方法是共有的 在 <strong>任何地方</strong> 都能访问</p>
<p><code>Private</code>:修饰的属性或方法是私有的 只有 <strong>本类</strong> 中访问</p>
<p><code>Protected</code>:修饰的属性或方法是受保护的 在 <strong>本类</strong> 和 <strong>子类中</strong> 能够访问</p>
<p>比如指定父类中 <code>money</code> 访问权限为 <code>private</code> ,只能在 <code>Parent</code> 访问，子类访问会出错</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2c9b4551ad74c868d8f0ac0207bc4b2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809121311868"></p>
<p>我们可以设置访问权限为 <code>protected</code> ，这样子类就能访问</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fbf27f0252a40dc996c6d9c7d6c4bf9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809121140659"></p>
<blockquote>
<p>静态属性 <code>static</code></p>
</blockquote>
<p>上面的 <code>name``money</code> 这两个属性都是通过 实例 去访问的</p>
<p>使用 <code>static</code> 修饰的属性是通过 类 去访问，是每个实例共有的</p>
<p>同样 <code>static</code> 可以修饰 方法，用 <code>static</code> 修饰的方法称为 类方法，可以使用类直接调用</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1b4ced0010547dd8f6e1aa9218a001e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809121921373"></p>
<blockquote>
<p>只读 <code>readonly</code></p>
</blockquote>
<p>我们给属性添加上 <code>readonly</code> 就能保证该属性<strong>只读</strong>，<strong>不能修改</strong>，如果存在 <code>static</code> 修饰符，写在其后</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/262d1bbd34a24c2cb01a7b94e39450b6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809122359082"></p>
<blockquote>
<p>抽象类 <code>abstract</code></p>
</blockquote>
<p><code>TS</code> 新增的抽象类，还是简单说下概念吧，我们写一个类的时候，不希望直接使用该类创建实例<strong>（不能被new）</strong>那么我们把它设置为抽象类，让它不能被实例化</p>
<p>只能被继承</p>
<p>在 <code>class</code> 前面 添加 <code>abstract</code> 修饰符，</p>
<p>在抽象类中 可以写 <strong>抽象方法</strong> ，抽象类没有方法体</p>
<p>举个例子：一个动物的抽象类，有个叫的方法，不可能 每个动物的叫声一样吧，我们可以把它设置为抽象方法，具体功能子类进行实现（该怎么叫就由子类来写）</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88c739a6e6854eab9ac07c5ec02bb356~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809124627979"></p>
<p>属性的封装和 <code>java</code> 一样，这里就不说了…</p>
<h2 id="7-接口-interface"><a href="#7-接口-interface" class="headerlink" title="7.接口 interface"></a>7.接口 <code>interface</code></h2><blockquote>
<p>为什么会出现接口</p>
</blockquote>
<p>为了解决 继承 的困境(一个类只能继承另一个类不能实现多继承)</p>
<p>还有一种情况，<strong>人</strong>能够洗衣服，<strong>洗衣机</strong>也能洗衣服，洗衣机和人找不到一个共同的父类，我们可以把洗衣服这个功能抽离出来写成接口，<strong>人</strong> 和 <strong>洗衣机</strong> 去实现这个接口就行</p>
<blockquote>
<p>我们可以用 <code>implements</code> 来实现接口</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78fa2ff70b50464b94b89b08797eae53~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809130103041"></p>
<blockquote>
<p>接口可以多实现</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cd58b7a85bd4d1a9b6bc26ff7e188a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809130403175"></p>
<blockquote>
<p>接口之前可以继承</p>
</blockquote>
<p>下面这个例子接口继承了另一个接口，这样人类只需实现一个接口就行</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44f273eeece14d24be94b6131b84d977~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809130537563"></p>
<h2 id="8-枚举-enum"><a href="#8-枚举-enum" class="headerlink" title="8.枚举 enum"></a>8.枚举 <code>enum</code></h2><blockquote>
<p>常量是在项目中经常使用，虽然 <code>const</code> 可以声明常量，但是有的常量取值是在一个范围里的，这里我们就需要使用 <code>enum</code> 来进行处理</p>
</blockquote>
<h3 id="1-数字枚举"><a href="#1-数字枚举" class="headerlink" title="1.数字枚举"></a>1.数字枚举</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63548257df9d4b21bae08e82b5799450~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809132958670"></p>
<blockquote>
<p>可以修改枚举中的初始值</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38e0a36b9d8145deba2e99edbe329911~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809133132496"></p>
<h3 id="2-字符串枚举"><a href="#2-字符串枚举" class="headerlink" title="2.字符串枚举"></a>2.字符串枚举</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be606dacb6ad4cbd8c6f72421222dfb6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809133851968"></p>
<h3 id="3-常量枚举"><a href="#3-常量枚举" class="headerlink" title="3.常量枚举"></a>3.常量枚举</h3><p>在 <code>enum</code> 前面添加一个 <code>const</code> 即可，它提高了性能</p>
<p>为什么这么说呢，我就把上面字符串枚举编译成 <code>js</code> 例子，和 常量枚举编译 贴出来对比一下</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26a0909e7ab940ae9dc280e3407d96ac~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809135017124"></p>
<p>常量枚举直接找出 <code>Week.Tuesday</code> 上面一截都没了</p>
<h2 id="9-泛型"><a href="#9-泛型" class="headerlink" title="9.泛型"></a>9.泛型</h2><blockquote>
<p>泛型就像一个占位符一个变量，在使用的时候我们可以将定义好的类型像参数一样传入，原封不动的输出</p>
</blockquote>
<p>比如这个例子我们就想返回一个值，在这里我写死是 <code>number</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b1314d6d7704533bc7faa49c1a81fba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809140308402"></p>
<p>在实际中，未必就是 <code>number</code>，我们就可以通过泛型来解决，定义好的类型传入进去，返回什么类型出来</p>
<blockquote>
<p>泛型简单介绍</p>
</blockquote>
<p>这里 <code>T</code> 是相当于一个占位符,在方法(变量，接口….等等)后面添加 <code>&lt;T&gt;</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d74cce6b3334748a7fac4123d5682ac~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809140625111"></p>
<p>是不是看起来这么简单，其实还真是</p>
<p>然后我在使用 getValue这个方法的时候 只需要在 <strong>实参</strong> 规定好类型，编译器它也不笨，能够知道我们的参数类型，并将它们赋值给 <code>T</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f32f6b469fbf42888e7161cd3831df05~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809141357325"></p>
<blockquote>
<p>多个参数</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d526a01bd72840b99b9563aa289a972f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809141619617"></p>
<p>在使用的时候，聪明的就判断出 传入的类型，并修改了 <code>T</code>,<code>U</code>，真的很方便</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e322ee42d054492db39710761cda5f57~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809141716507"></p>
<blockquote>
<p>我们可以使用 <code>interface</code> 来约束 泛型</p>
</blockquote>
<p>在 <code>T</code> 后面 <code>extends Ilen</code> ，定义 <code>Ilen</code> 里面代码表示，<code>T</code> 必须要有 <code>length</code> 属性</p>
<p>这样在 方法里面调用 <code>params.length</code> 就不会报错</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffcaa4d26f164af690b0a3ec35687bd2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809151050324"></p>
<blockquote>
<p>在 <strong>类</strong>使用泛型</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b956da6a7f504af2baaafa45be79a88c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809152239297"></p>
<blockquote>
<p>在 <strong>接口</strong> 使用泛型</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ba740d5d0d144f3b97581d308271fae~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809152813026"></p>
<blockquote>
<p>在 <strong>数组</strong> 使用泛型</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf14ea4ef16b42d3bf21186fb1245119~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809153225159"></p>
<p>其实泛型还有很多很多使用方法，这里就简单地入门下</p>
<h2 id="10-类型别名"><a href="#10-类型别名" class="headerlink" title="10.类型别名"></a>10.类型别名</h2><blockquote>
<p>使用 <code>type</code> 给类型取别名</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/023c42358ecb40e995422df4febe9067~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809154354725"></p>
<h2 id="11-交叉类型"><a href="#11-交叉类型" class="headerlink" title="11.交叉类型"></a>11.交叉类型</h2><blockquote>
<p>用 <code>&amp;</code> 进行连接</p>
</blockquote>
<p>把类型都组合起来，变量赋值必须满足 交叉类型</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d117a98220c64842b191bfd52bc87b0a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210809155259634"></p>
<h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><blockquote>
<p>这篇文章是小浪3月多学TS时做的总结，写的不全面写的都是一些经常用到的，全面的话还得写很多很多。。。官方的文档 yyds ，不过大家可以通过这篇文章进行快速入门，，其实小浪用了TS一段时间了，感觉就是有些泛型写的很复杂，规范性很强，很多第三方库隐藏的类型搞不清楚，刚写的完全看不懂，每次写一个东西都要想着去定义类型，恨不得把电脑砸了…开玩笑的，还是得耐心</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a31f26491f7948689a2919d10e902e4a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p>
<p>参考资料：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.tslang.cn%2Fdocs%2Fhandbook%2Fbasic-types.html" title="https://www.tslang.cn/docs/handbook/basic-types.html">TS官方文档</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>还不会Vue3？一篇笔记带你快速入门</title>
    <url>/xiaolangwiki/2021/09/11/12/</url>
    <content><![CDATA[<h2 id="还不会Vue3？一篇笔记带你快速入门"><a href="#还不会Vue3？一篇笔记带你快速入门" class="headerlink" title="还不会Vue3？一篇笔记带你快速入门"></a>还不会Vue3？一篇笔记带你快速入门</h2><p>原文：<a href="https://juejin.cn/post/7006518993385160711">https://juejin.cn/post/7006518993385160711</a></p>
<blockquote>
<p>前言：</p>
</blockquote>
<p>一直都没有去接触 Vue3，在之前暑假的时间，就趁这个机会去好好的学习一下，这篇文章就是我之前学习 Vue3 做的笔记，做笔记一方面让自己更加理解和掌握新的特性这些知识点，另一方面也希望能让大家入门Vue3，自己学到了才是赚到了，结语注明参考资料</p>
<h2 id="Vue3简介"><a href="#Vue3简介" class="headerlink" title="Vue3简介"></a>Vue3简介</h2><p><strong>面临的问题</strong>：随着功能的增长，复杂组件的代码变得难以维护，<code>Vue3</code> 就随之而来，<code>TypeScript</code> 使用的越来越多，<code>Vue3</code>就是 <code>TS</code> 写的所以能够更好的支持 <code>TypeScript</code></p>
<p>在这里介绍就这么简单</p>
<p><code>vue2</code> 的绝大多数的特性 在 <code>Vue3</code> 都能使用，毕竟 <code>Vue</code> 是渐进式的</p>
<p>响应式原理进行使用 <code>Proxy</code> 实现，<code>v-model</code> 可以传参了等等新特性</p>
<h2 id="基础工作"><a href="#基础工作" class="headerlink" title="基础工作"></a>基础工作</h2><p>使用<code>Vue3</code>的话，那么必须通过使用构建工具创建一个 <code>Vue3</code> 项目</p>
<h3 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure>
<h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><p>使用 <code>create</code> 命令行创建 或者 用 <code>ui</code> 可视化创建</p>
<p>大家用 <code>Vue</code> 都用了这么久，我就不一一说怎么去创建了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create 项目名</span><br><span class="line"></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure>
<p>当然也可以选择 <code>vite</code> ，<code>vite</code> 创建的速度比 上面的方法快了一些</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vite-app 项目名</span><br><span class="line"><span class="built_in">cd</span> 项目名</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h2 id="Vue3入门"><a href="#Vue3入门" class="headerlink" title="Vue3入门"></a>Vue3入门</h2><h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a><code>Composition API</code></h3><blockquote>
<p><code>Vue3</code> 提出了 <code>Composition API</code></p>
</blockquote>
<p>在 <strong>Vue2.X</strong> 我们使用的是 <strong>OptionAPI</strong> 里面有我们熟悉的 <code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>…</p>
<p>在 <code>Vue3</code> 中，我们依旧可以使用 <strong>OptionAPI</strong>当然不建议 和 <code>Vue3</code> 混用</p>
<p>在 <code>Vue2</code> 中，我们实现一个功能得分到不同的地方，把数据放在 <code>data</code> ,<code>computed</code> 方法放在 <code>methods</code> 里面，分开的太散乱了，几个功能还好，几十个上百个，那就有点…</p>
<p>所以 <code>Vue3</code> 提出了 <strong>Composition API</strong> ，它可以把 <code>一个逻辑的代码都收集在一起</code> 单独写个<code>hook</code>,然后再引入，这样就不到处分布，显得很乱了</p>
<h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a><code>Fragment</code></h3><blockquote>
<p>在 <code>template</code> 中不再需要一个根元素包裹</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js + TypeScript App&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实际上内部会将多个标签包含在一个<code>Fragment</code>虚拟元素中</p>
<p>好处: 减少标签层级, 减小内存占用</p>
<h3 id="script-差异"><a href="#script-差异" class="headerlink" title="script 差异"></a><code>script</code> 差异</h3><blockquote>
<p>来看看 <code>script</code> 和 <code>Vue2</code> 的区别</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以再 <code>script</code> 使用 <code>ts</code> 只需 设置 <code>lang</code> 即可</li>
<li><code>defineComponent</code> 方法创建一个组件</li>
<li><code>export default</code> 直接导出一个组件</li>
</ul>
<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a><code>setup</code></h3><blockquote>
<p><code>setup</code> 是 <code>Composition API</code>的入口</p>
</blockquote>
<h4 id="setup-执行顺序"><a href="#setup-执行顺序" class="headerlink" title="setup 执行顺序"></a><code>setup</code> 执行顺序</h4><p>它在<code>beforeCreate</code><strong>之前执行一次</strong>，<code>beforeCreate</code>这个钩子 的任务就是初始化，在它之前执行，那么 <code>this</code> 就没有被初始化 <code>this = undefined</code> 这样就不能通过 <code>this</code> 来调用方法 和 获取属性</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b06890efbd304516b23df723ad9352dd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811132514039"></p>
<h4 id="setup-返回值"><a href="#setup-返回值" class="headerlink" title="setup 返回值"></a><code>setup</code> 返回值</h4><p><code>setup</code> 返回的是一个<strong>对象</strong>，这个对象的属性会与组件中 <code>data</code> 函数返回的对象进行<strong>合并</strong>，返回的方法和 <code>methods</code> 合并，合并之后直接可以在模板中使用，如果有重名的情况，会使用 <code>setup</code> 返回的<strong>属性</strong>和<strong>方法</strong>，<code>methods</code> 和 <code>data</code> 能够拿到 <code>setup</code> 中的方法应该进行了合并，反之 <code>setup</code> 不能拿到它们的属性和方法，因为这个时候 <code>this</code> = <code>undefined</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8635a4c729ac41d281020edc5c9569e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811134028917"></p>
<h4 id="Suspense-组件"><a href="#Suspense-组件" class="headerlink" title="Suspense 组件"></a><code>Suspense</code> 组件</h4><blockquote>
<p><code>setup</code> 使用 <code>async</code>/<code>await</code></p>
</blockquote>
<p>我们需要 <code>setup</code> 返回数据那么它肯定就不能使用 <code>async</code> 修饰，这样返回 <code>promise</code> 是我们不想看见情况，如果我们硬要用 <code>async</code> 修饰，我们就得用的在它的父组件外层需要嵌套一个<code>suspense</code>(不确定)内置组件，里面放置一些不确定的操作，比如我们就可以把异步组件放入进去</p>
<h5 id="1-子组件"><a href="#1-子组件" class="headerlink" title="1.子组件"></a>1.子组件</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; res &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Son&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;地址&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      res,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-父组件"><a href="#2-父组件" class="headerlink" title="2.父组件"></a>2.父组件</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="setup-参数"><a href="#setup-参数" class="headerlink" title="setup 参数"></a><code>setup</code> 参数</h4><blockquote>
<p><code>setup</code>(<code>props</code>, <code>context</code>)</p>
</blockquote>
<p><code>setup</code> 函数中的第一个参数是 <code>props</code>。它接收父组件传递的值，是的就是父子组件信息传递的 <code>props</code></p>
<p>第二个参数是 <code>context</code> 里面包含3个属性 <code>&#123; attrs, slots, emit &#125;</code>，这三个属性大家看名字就应该知道是什么吧 分别对应 <code>this.$attrs</code>，<code>this.$slots</code>，<code>this.$emit</code></p>
<ul>
<li><code>attrs</code>: 除了 <code>props</code> 中的其他属性</li>
<li><code>slots</code>: 父组件传入插槽内容的对象</li>
<li><code>emit</code>: 和用于父子组件通信</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a><code>ref</code></h3><blockquote>
<p>定义/转为 响应式</p>
</blockquote>
<p>在上面 <code>setup</code> 写的数据都<strong>不是响应式的</strong>，修改了数据，视图并不会更新</p>
<p>在 <code>Vue3</code> 中提供了两种方式定义响应式数据，先来介绍下 <code>ref</code></p>
<p>导入 <code>ref</code> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>你可以先声明一个<strong>基本类型</strong>变量后再当做 <code>ref</code> 的形参穿进去</li>
<li><p>或者直接在 <code>ref</code> 中传入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> number1 = <span class="title function_">ref</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> number2 = <span class="title function_">ref</span>(num)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>来查看一下 <code>number1</code> 是什么吧</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6225b7f5b79d4f4cb1431c64518be657~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811183344632"></p>
<p>可以看见的是 <code>number1</code> 是一个 <code>Ref</code> 对象，我们设置的 <code>10</code> 这个值在这个对象的 <code>value</code> 属性上</p>
<p>也就是说我们修改的时候必须要修改的是 <code>number1.value</code></p>
<p>通过给<code>value</code>属性添加 <code>getter</code>/<code>setter</code> 来实现对数据的劫持</p>
<p>但是在模板上使用的时候 不用写 <code>number1.value</code> 直接写 <code>number1</code> 即可</p>
<p>在模板编译的时候回自动加上 <code>value</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; number1 &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateNum&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Son&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> number1 = <span class="title function_">ref</span>(<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateNum</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      number1.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      number1,</span></span><br><span class="line"><span class="language-javascript">      updateNum,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5b9e88c52c84261aa28e6cc5cd74bf5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="35"></p>
<p>使用起来完全没有问题</p>
<p>刚才强调了说 <code>ref</code> 接收 基本类型的数据，那么它可以接收 复杂类型吗，<code>object</code> 类型等，当然可以</p>
<p>给 <code>ref</code> 传入复杂类型，其实它是调用 <code>reactive</code> 来实现的</p>
<p><code>reactive</code> 下面会提到</p>
<h3 id="ref-获取元素"><a href="#ref-获取元素" class="headerlink" title="ref 获取元素"></a><code>ref</code> 获取元素</h3><p>同样的 <code>ref</code> 还可以用了获取元素</p>
<p>大家在 <code>Vue2.X</code> 中是怎么获取的呢，先在 标签上定义 <code>:ref=&#39;XXX&#39;</code> 然后 <code>this.$refs.XXX</code> 来获取</p>
<p>在 <code>Vue3</code> 上获取元素就有些许不同了</p>
<blockquote>
<p>1.首先在 模板元素上 <code>ref=&#39;XXX&#39;</code> 这里不用 <code>v-bind</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;haha&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.在 <code>setup</code> 中</p>
</blockquote>
<p>得给 <code>ref</code> 指定类型 <code>HTMLElement</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> haha = ref&lt;<span class="title class_">HTMLElement</span>|<span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(haha)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    haha,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>如果在组件中需要使用到 <code>haha</code> ，就必须把 <code>haha``return</code> 出去合并 <code>data</code></p>
<p>我们来看看打印的是什么</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c17d2e13f4941d7a37281eef673cfcf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811230220185"></p>
<p>可以看见的是 <code>haha</code> 是个 <code>Ref</code> 对象，<code>value</code> 值就是我们想要获取到的元素</p>
<p>然后我们可以对 <code>haha</code> 这个 <code>DOM</code> 元素进行操作，比如这个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">haha.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;20px&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a><code>reactive</code></h3><p><code>reactive</code> 接收一个普通对象然后返回该普通对象的响应式<code>代理对象</code></p>
<p>没错 它的底层就是使用 <code>Proxy</code> 进行代理</p>
<blockquote>
<p>简单写个Vue3响应式例子来说下 <code>Proxy</code></p>
</blockquote>
<p><code>new Proxy(target, handler)</code></p>
<ul>
<li><code>target</code> ：要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li>
<li><code>handler</code>：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target\[key\]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, newValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (target\[key\] === newValue) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        target\[key\] = newValue</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">textContent</span> = target\[key\]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>reactive</code> 基础用法</p>
</blockquote>
<p>导入，当然写的时候，<code>vscode</code> 会自动帮你引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>
<p>简单使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        obj,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看看返回的 <code>Proxy</code> 对象吧</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/596efb4256c74cc19feb6f6b365bdb90~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811191209064"></p>
<p>数据都在 <code>target</code> 中，</p>
<p>在模板使用直接 <code>&#123;&#123;obj.name&#125;&#125;</code> 即可</p>
<p>修改直接修改 <code>obj\[name\]``=``‘xxx’</code></p>
<p>操作代理对象,obj中的数据也会随之变化，同时如果想要在操作数据的时候,界面也要跟着重新更新渲染,那么也是操作代理对象</p>
<blockquote>
<p>响应式的数据是深层次的（递归深度响应式）</p>
</blockquote>
<p>对于多层嵌套的数据也是响应式的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">phone</span>: &#123;</span><br><span class="line">            <span class="attr">p_name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">            <span class="attr">p_apps</span>: &#123;</span><br><span class="line">                <span class="attr">app_name</span>: <span class="string">&#x27;小米运动&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upadateName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        obj.<span class="property">phone</span>.<span class="property">p</span>\_apps.<span class="property">app</span>\_name = <span class="string">&#x27;掘金&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        obj,</span><br><span class="line">        upadateName,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa30d692e14e40cf962235006245e4c5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="36"></p>
<blockquote>
<p><code>shallowReactive</code></p>
</blockquote>
<p>它是一个简单的 reactive ，只把第一层的对象改为响应式，这里就不多说了</p>
<blockquote>
<p>使用 <code>ref</code> 传入对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title function_">ref</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        obj,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/782b587ab1384163a505b3694b4eaab8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811191739873"></p>
<p>实际上是 <code>ref</code> 使用 <code>reactive</code> 来进行操作的</p>
<h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a><code>toRefs</code></h3><p>这个方法可以把 <code>reactive</code> 响应式对象，转化为 普通对象，普通对象的每个属性都是 <code>Ref</code> 对象，这样的话保证了 <code>reactive</code> 的每个属性还是响应式的，我们还可以把每个属性进行分解使用，这样在组件就不用 <strong>obj[属性]</strong>，代码量减轻了，yyds</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> userObj = <span class="title function_">toRefs</span>(user)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(userObj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d44ff7b5950843c781ead5e0d1d64f2b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811223510320"></p>
<p>可以看见 <code>name</code> 和 <code>age</code> 已经变成了 <code>Ref</code> 对象</p>
<p>我们可以解构 出 <code>name</code> 和 <code>age</code> 单独使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> userObj = <span class="title function_">toRefs</span>(user)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...userObj,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a><code>toRef</code></h3><p>还有一个 <code>toRef</code> 方法，它的作用和 <code>toRefs</code> 差不多，但是它只能把响应式对象/普通对象的<strong>某一个</strong>属性变为 <code>Ref</code> 对象</p>
<blockquote>
<p>可以用来为源响应式对象上的 <code>property</code> 性创建一个 <code>ref</code>。然后可以将 <code>ref</code> 传递出去，从而保持对其源 <code>property</code> 的响应式连接。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="title function_">useSomeFeature</span>(<span class="title function_">toRef</span>(props, <span class="string">&#x27;foo&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useSomeFeature</span>(<span class="params">foo: Ref</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拷贝了一份新的数据值单独操作, 更新时相互不影响</p>
<p>当您要将 <code>prop</code> 的 <code>ref</code> 传递给复合函数时，<code>toRef</code> 很有用</p>
<p>可以从官方文档看出，用于在于组件之前的传递数据 从 <code>props</code> 拿出 <code>&#39;foo&#39;</code> 属性给复合函数，复合函数 <code>useSomeFeature</code>，接收的参数 <code>foo</code> 为 <code>Ref</code> 类型，刚好可以使用<code>toRef</code> 来进行转化</p>
<h3 id="判断响应式"><a href="#判断响应式" class="headerlink" title="判断响应式"></a>判断响应式</h3><blockquote>
<p>几个判断是否哪种响应式创建的方法</p>
</blockquote>
<p>1.<code>isRef</code>: 检查一个值是否为一个 ref 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ref1 = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(ref1))</span><br></pre></td></tr></table></figure>
<p>2.<code>isReactive</code>: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ref2 = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(ref2))</span><br></pre></td></tr></table></figure>
<p>3.<code>isReadonly</code>: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ref3 = <span class="title function_">readonly</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReadonly</span>(ref3))</span><br></pre></td></tr></table></figure>
<p>4.<code>isProxy</code>: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ref2 = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isProxy</span>(ref2))</span><br><span class="line"><span class="keyword">let</span> ref3 = <span class="title function_">readonly</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isProxy</span>(ref3))</span><br></pre></td></tr></table></figure>
<h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a><code>customRef</code></h3><p>上面提到了这么多的 <code>Ref</code> 都是 Vue 帮我们内置的，</p>
<p>我们可以通过 <code>customRef</code> 实现我们自己的 <code>Ref</code></p>
<blockquote>
<p>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 <code>track</code> 和 <code>trigger</code> 函数作为参数，并应返回一个带有 <code>get</code> 和 <code>set</code> 的对象。</p>
</blockquote>
<p>官方文档给了一个防抖的例子，我们也写个来看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;keyword&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  customRef</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> useDebouncedRef&lt;T&gt;(<span class="attr">value</span>: T, delay = <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> <span class="attr">timeout</span>: number</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">track</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> value</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">set</span>(<span class="params">newValue: T</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearTimeout</span>(timeout)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          value = newValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">trigger</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, delay)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span> () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> keyword = <span class="title function_">useDebouncedRef</span>(<span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      keyword</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="shallowRef-和-shallowReactive"><a href="#shallowRef-和-shallowReactive" class="headerlink" title="shallowRef 和 shallowReactive"></a><code>shallowRef</code> 和 <code>shallowReactive</code></h3><p>浅的响应式，一般用的不多，我们使用 <code>ref</code> 和 <code>reactive</code> 比较多</p>
<blockquote>
<p><code>shallowReactive</code></p>
</blockquote>
<p>对象结构多层嵌套，但是我们的需求只需要修改最外层的数据，就不用把里面的嵌套结构都转为响应式，这样使用浅的响应式提高性能，只有最外一层是响应式</p>
<p>比较容易理解，我这就里就不举例子了</p>
<blockquote>
<p><code>shallowRef</code></p>
</blockquote>
<p>我们之前说过 <code>ref</code> 也能传入一个对象，实际上还是调用 <code>reactive</code> 返回 <code>Proxy</code> 代理对象，如果内层还有对象，还是使用 <code>reactive</code> 进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">reactive</span>(&#123; <span class="attr">value</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>
<p>同样的 <code>shallowRef</code> 处理 对象类型，是交给 <code>shallowReactive</code> 去完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shallowRef</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">shallowReactive</span>(&#123; <span class="attr">value</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>
<p>这样子我们就明白了，为啥 只处理了 <code>value</code> 的响应式，不进行对象的 <code>reactive</code>处理，适用于会被替换的数据</p>
<p><code>【注意】</code>：<code>shallowRef</code> 创建一个 <code>ref</code> ，将会追踪它的 <code>value</code> 更改操作，但是并不会对变更后的 <code>value</code> 做响应式代理转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> info1 = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">notebook</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小米笔记本&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> info2 = <span class="title function_">shallowRef</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">notebook</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小米笔记本&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info1, info2)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    info1,</span><br><span class="line">    info2,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>我们来打印下两个对象</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d3bce8ea859452dbea0388766f8308c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210812113721281"></p>
<p>可以看见的是 <code>Ref</code> 的 <code>value</code> 值是用 <code>reactive</code> 返回的 <code>Proxy</code> 对象，</p>
<p><code>shallowRef</code> 的 <code>value</code> 是普通对象</p>
<h3 id="readonly-和-shallowReadonly"><a href="#readonly-和-shallowReadonly" class="headerlink" title="readonly 和 shallowReadonly"></a><code>readonly</code> 和 <code>shallowReadonly</code></h3><blockquote>
<p><code>readonly</code> 深度只读</p>
</blockquote>
<p>设置普通对象或者是响应式对象为只读，不能进行修改，看上面的名字就知道是深度的，深度是什么概念大家差不多都清楚，递归把内层的每一个属性都设置为只读，进行修改操作就会报错，提高了安全性</p>
<p>基本使用：</p>
<p>用什么就导入什么</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>
<p>果然在编译之前就报错了 <code>Error</code>: <code>无法分配到 &quot;name&quot; ，因为它是只读属性</code></p>
<p>无论是内层还是外层都只读，是深度检测的</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44875ed772764e8c9ccbf2eefc863c0e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210812121429275"></p>
<blockquote>
<p><code>shallowReadonly</code> 浅度只读</p>
</blockquote>
<p>浅度的话只针对最外面一层不关心 内层</p>
<p>可以看下面的例子 只有外层的 <code>name</code> 报错，修改内层没有错误</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6262c6d96b44fcdb7012bd7f8da863e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210812121747662"></p>
<h3 id="toRaw-和-markRaw"><a href="#toRaw-和-markRaw" class="headerlink" title="toRaw 和 markRaw"></a><code>toRaw</code> 和 <code>markRaw</code></h3><blockquote>
<p>这两个用的还是比较少</p>
</blockquote>
<p>我这里就简单的过一下</p>
<blockquote>
<p><code>toRaw</code>: 将一个响应式对象转为普通对象</p>
</blockquote>
<p>简单使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> info1 = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">notebook</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小米笔记本&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> rawInfo = <span class="title function_">toRaw</span>(info1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rawInfo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d99a9bfaa684c269495f99a48945ae7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210812123328497"></p>
<p>两个打印出来，一个是响应式对象，通过 <code>toRaw</code> 后变成了普通对象</p>
<blockquote>
<p><code>markRaw</code>: 标记一个对象，让它永远不会转为响应式对象，返回值是本身</p>
</blockquote>
<p>比如： 一些不变的数据死数据，还有一些第三方类实例，不用转为响应式对象，提高性能</p>
<p>简单使用：</p>
<p>这里使用 两个一样的对象，一个进行 <code>markRaw</code> 处理，一个不进行 <code>markRaw</code> 处理</p>
<p>然后同样使用 <code>reactive</code> 转为 响应式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">notebook</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小米笔记本&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> markRawObj = <span class="title function_">markRaw</span>(obj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> reactObj = <span class="title function_">reactive</span>(markRawObj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">notebook</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小米笔记本&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> reactObj2 = <span class="title function_">reactive</span>(obj2)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reactObj)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reactObj2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看看打印的，被标记过的 <code>obj</code> 并没有转为 <code>Proxy</code> 响应式代理对象</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04c6d80e6fb74a4d81b5e3167010ef79~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210812124720404"></p>
<h3 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a><code>computed</code> 计算属性</h3><p>在<code>Vue3</code>中使用<code>computed</code> 和<code>Vue2.X</code> 有些不同，这里 <code>computed</code>是一个方法</p>
<blockquote>
<p>首先还是得导入 <code>computed</code> 方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数为一个回调 默认为 <code>get</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;getInfo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;小浪&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> getInfo = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`我的名字：<span class="subst">$&#123;name.value&#125;</span>,今年<span class="subst">$&#123;age.value&#125;</span>，请多多指教`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        getInfo,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/336f33d348ed4e908e016a8c9eacb796~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="37"></p>
<p>这里没有实现 <code>set</code> 方法，所以修改下面没有用</p>
<blockquote>
<p>参数为一个<strong>对象</strong> 在这里写 <code>get``set</code></p>
</blockquote>
<p>模板和上面一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;小浪&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> getInfo = <span class="title function_">computed</span>(&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name.value&#125;</span>,<span class="subst">$&#123;age.value&#125;</span>`</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">val: string</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> arr = val.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            name.<span class="property">value</span> = arr\[<span class="number">0</span>\]</span><br><span class="line">            age.<span class="property">value</span> = <span class="built_in">parseInt</span>(arr\[<span class="number">1</span>\])</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        getInfo,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb1487dddb3f425e9d9aa2460d202b5c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="38"></p>
<h3 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch 侦听器"></a><code>watch</code> 侦听器</h3><p>和 Vue2.X 的 Watch 使用方法差不多</p>
<blockquote>
<p>介绍</p>
</blockquote>
<p>watch(data,handler,object)</p>
<ol>
<li><code>data</code>：可以是返回值的 <code>getter</code> 函数，也可以是 <code>ref</code></li>
<li><code>handler</code>：回调函数</li>
<li><code>object</code>：可选配置项 <code>&#123; immediate: true &#125;</code></li>
</ol>
<blockquote>
<p>引入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>data</code> 为一个 <code>ref</code></p>
</blockquote>
<p>回调函数的参数是 (新值,旧值)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;小浪&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> watchName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="title function_">watch</span>(name, <span class="function">(<span class="params">newName, oldName</span>) =&gt;</span> &#123;</span><br><span class="line">        watchName.<span class="property">value</span> = <span class="string">`我是新姓名<span class="subst">$&#123;newName&#125;</span></span></span><br><span class="line"><span class="string">		我是老姓名<span class="subst">$&#123;oldName&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        watchName,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7d69bf6172f4f68be61571853880c41~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210811204502523"></p>
<p>可以看见页面第三栏没有显示，因为 <code>name</code> 值没有变化，所以就不用改变，<code>watch</code>的第三个参数是 配置对象，我们在里面可以设置 立即执行 <code>&#123; immediate: true &#125;</code></p>
<p>就会执行一次 当然这个时候 <code>oldName</code> 为 <code>undefined</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  name,</span><br><span class="line">  <span class="function">(<span class="params">newName, oldName</span>) =&gt;</span> &#123;</span><br><span class="line">    watchName.<span class="property">value</span> = <span class="string">`我是新姓名<span class="subst">$&#123;newName&#125;</span></span></span><br><span class="line"><span class="string">  我是老姓名<span class="subst">$&#123;oldName&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e35c8ce9360449e9edaa4bbaa00336a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="39"></p>
<blockquote>
<p><code>data</code> 为一个 <code>getter</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>haha,<span class="function">(<span class="params">newName, oldName</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>()=\&gt; haha</code> 直接返回一个值，相当于 <code>getter</code> 简写,<code>haha</code>可以不是响应式数据</p>
<blockquote>
<p><code>data</code> 为多个 <code>ref</code></p>
</blockquote>
<p>模板还是之前那个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;getInfo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以把多个 <code>ref</code> 放进一个数组里面</p>
<p><code>newNameAndAge</code>，<code>oldNameAndAge</code>为一个数组保存着 新 和 旧的 [name,age]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;小浪&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> watchName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      \[name, age\],</span><br><span class="line">      <span class="function">(<span class="params">newNameAndAge, oldNameAndAge</span>) =&gt;</span> &#123;</span><br><span class="line">        watchName.<span class="property">value</span> = <span class="string">`new: <span class="subst">$&#123;newNameAndAge&#125;</span></span></span><br><span class="line"><span class="string">        old: <span class="subst">$&#123;oldNameAndAge&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        watchName,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60adfa12c0dc42239985d630a0a9e46d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="40"></p>
<blockquote>
<p><code>data</code> 为 <code>reactive</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> watchInfo = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="title function_">watch</span>(</span><br><span class="line">    user,</span><br><span class="line">    <span class="function">(<span class="params">newInfo, oldInfo</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newInfo === oldInfo)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是对象 会出现问题，立即执行后，</p>
<p>如果加上 立即执行 除了第一次 <code>newInfo</code>为 <code>&#123;name: &#39;小浪&#39;,age: 21&#125;</code></p>
<p><code>oldInfo</code> 为 <code>undefined</code> ，之后<strong>始终返回该对象的当前值</strong></p>
<p>所以 <code>newInfo</code> = <code>oldInfo</code></p>
<p>对于这个问题，我们得加上配置对象 <code>&#123;deep: true&#125;</code>进行深度检测</p>
<p>深度检测还可以判断多重嵌套</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  user,</span><br><span class="line">  <span class="function">(<span class="params">newInfo, oldInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newInfo === oldInfo)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a><code>watchEffect</code></h3><p>这个也是用来监听数据变化，默认就会执行一次所以这里就不需要配置，而且不用指定 <code>data</code>,使用哪些响应式数据就监听哪些</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小浪&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h3><p>提供 和 注入 是很简单理解的</p>
<blockquote>
<p>实现跨层级组件(祖孙)间通信</p>
</blockquote>
<p>在多层嵌套组件中使用，不需要将数据一层一层地向下传递</p>
<p>可以实现 跨层级组件 通信</p>
<p>在 父组件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> info = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Vue3学习&#x27;</span></span><br><span class="line">        <span class="attr">date</span>: <span class="string">&#x27;2021/7/23&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;info&#x27;</span>, info)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        info</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 子孙 层级组件使用注入就能够获取到了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> color = <span class="title function_">inject</span>(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        info</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Teleport-传送组件"><a href="#Teleport-传送组件" class="headerlink" title="Teleport 传送组件"></a><code>Teleport</code> 传送组件</h3><p>这个组件特别有趣，可以把组件进行传送</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">to</span>=<span class="string">&quot;.test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dog&quot;</span>&gt;</span>狗子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>to</code> 是目标的地址 <code>body</code> , <code>#XXX</code> , <code>.XXX</code> 这些都是 <code>css</code> 选择器</p>
<p>下面写个例子大家看下就明白了</p>
<blockquote>
<p>模板</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">:to</span>=<span class="string">&quot;target&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img0.baidu.com/it/u=3077713857,1222307962&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnGroup&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;target = &#x27;.li_1&#x27;&quot;</span>&gt;</span>传送1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;target = &#x27;.li_2&#x27;&quot;</span>&gt;</span>传送2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;target = &#x27;.li_3&#x27;&quot;</span>&gt;</span>传送3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>setup</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> target = <span class="title function_">ref</span>(<span class="string">&#x27;.li_1&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    target,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>利用 按钮 点击来控制 <code>teleport</code> 是否显示， <code>teleport</code> 一渲染，就会跑到 <code>li</code> 下面</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/083b7f7bcd8b46179188e4a5cfc31454~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="42"></p>
<h3 id="Vue3-生命周期"><a href="#Vue3-生命周期" class="headerlink" title="Vue3 生命周期"></a><code>Vue3</code> 生命周期</h3><blockquote>
<p><code>Vue2.X</code> 对应 <code>Vue3</code>组合API</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th><code>Vue2.X</code></th>
<th><code>Vue3</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeCreate</td>
<td>—-&gt;</td>
<td><code>setup()</code></td>
</tr>
<tr>
<td>created</td>
<td>—-&gt;</td>
<td><code>setup()</code></td>
</tr>
<tr>
<td>beforeMount</td>
<td>—-&gt;</td>
<td>onBeforeMount</td>
</tr>
<tr>
<td>mounted</td>
<td>—-&gt;</td>
<td>onMounted</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>—-&gt;</td>
<td>onBeforeUpdate</td>
</tr>
<tr>
<td>updated</td>
<td>—-&gt;</td>
<td>onUpdated</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>—-&gt;</td>
<td><code>onBeforeUnmount</code></td>
</tr>
<tr>
<td>destroyed</td>
<td>—-&gt;</td>
<td><code>onUnmounted</code></td>
</tr>
<tr>
<td>activated</td>
<td>—-&gt;</td>
<td>onActivated</td>
</tr>
<tr>
<td>deactivated</td>
<td>—-&gt;</td>
<td>onDeactivated</td>
</tr>
<tr>
<td>errorCaptured</td>
<td>—-&gt;</td>
<td>onErrorCaptured</td>
</tr>
<tr>
<td>onRenderTriggered</td>
</tr>
<tr>
<td>onRenderTracked</td>
</tr>
</tbody>
</table>
</div>
<p>可以看出</p>
<p><code>beforeCreate</code> 和 <code>created</code> 在Vu3还是能正常使用，在Vue3我们可以用更好更快的 <code>setup</code> 代替</p>
<p><code>on</code>开头的 生命周期需要 通过 <code>import</code> 导入，在 <code>setup</code> 函数中使用</p>
<p><code>Vue3</code> 的生命周期 比 <code>Vue2.X</code> 的生命周期快</p>
<p>举个例子: <code>onBeforeMount</code> 比 <code>beforeMount</code> 快 其他同理</p>
<p>还多个两个钩子:</p>
<ul>
<li><code>onRenderTriggered</code> 跟踪虚拟 DOM 重新渲染时调用</li>
<li><code>onRenderTracked</code> 当虚拟 DOM 重新渲染被触发时调用</li>
</ul>
<h3 id="全局API-转移"><a href="#全局API-转移" class="headerlink" title="全局API 转移"></a>全局<code>API</code> 转移</h3><p><code>Vue2.X</code> 中 <code>Vue</code> 上面的全局API ，比如自定义指令 <code>Vue.directive</code>，全局组件 <code>Vue.component</code> 在Vue3都进行改变，不再提供 <code>Vue</code> ，而是提供 <code>app</code></p>
<p>具体改变可以看下面</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Vue2.X</th>
<th>Vue3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vue.config</td>
<td>app.config</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td>移除</td>
</tr>
<tr>
<td>Vue.config.ignoredElements</td>
<td>app.config.isCustomElement</td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>app.config.globalProperties</td>
</tr>
<tr>
<td>new Vue().$mount(‘#app’)</td>
<td>createApp(App).mount(‘#app’)</td>
</tr>
</tbody>
</table>
</div>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到了这里我们基本都了解了 <code>Vue3</code> 的一些特性</p>
<ul>
<li>新的脚手架工具<code>vite</code></li>
<li>在 <code>Vue3</code> 仍然支持 <code>Vue2</code> 中的大多数特性</li>
<li><code>Vue</code> 组合<code>APi</code>代替了<code>Vue2</code>中的<code>option API</code> ，同一逻辑集中起来，复用性更强了</li>
<li><code>Vue3</code> 使用 <code>TS</code> 编写更好的支持TS</li>
<li><code>Vue3</code> 使用<code>Proxy</code> 代替了<code>Vue2</code>中<code>Object.defineProperty()</code> 实现响应式原理</li>
<li>介绍了新的组件: <code>Fragment``Teleport``Suspense</code></li>
</ul>
<p>这里还没有提到的 <code>Vue3</code> 重写了 <strong>虚拟DOM</strong> ，提高了性能</p>
<p>希望这篇笔记能够帮助到大家，如果我写的不清楚，具体的还得看 <code>官方文档</code> yyds，最近开学了，学校里面的事情也多了…</p>
<p>(o゜▽゜)o☆</p>
<blockquote>
<p>参考资料：</p>
</blockquote>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fvue3js.cn%2Fdocs%2Fzh" title="https://vue3js.cn/docs/zh">Vue3官网文档</a></p>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Zy4y1K7SH%3Fp%3D156" title="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=156">B站资料</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
</search>
