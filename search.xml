<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个基本的拦截器实现示例：Axios 拦截器</title>
    <url>/xiaolangwiki/2022/01/12/interceptor/</url>
    <content><![CDATA[<h2 id="一个基本的拦截器实现示例："><a href="#一个基本的拦截器实现示例：" class="headerlink" title="一个基本的拦截器实现示例："></a>一个基本的拦截器实现示例：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterceptorManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fulfilled, rejected</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      fulfilled,</span><br><span class="line">      rejected</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eject</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>[id]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handlers</span>[id] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">      <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span><br><span class="line">      <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建 Promise 链</span></span><br><span class="line">    <span class="keyword">let</span> chain = [</span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sending Request:&#x27;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">undefined</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加请求拦截器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">interceptor</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (interceptor !== <span class="literal">null</span>) &#123;</span><br><span class="line">        chain.<span class="title function_">unshift</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加响应拦截器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">interceptor</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (interceptor !== <span class="literal">null</span>) &#123;</span><br><span class="line">        chain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行 Promise 链</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">      promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request Interceptor 1&#x27;</span>);</span><br><span class="line">    config.<span class="property">headers</span> = &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Response Interceptor 1&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">axios.<span class="title function_">request</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Final Response:&#x27;</span>, response))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>
<p>这个简化版本包含了以下关键部分：</p>
<ol>
<li><code>InterceptorManager</code> 类：管理拦截器的添加和移除。</li>
<li><code>Axios</code> 类：包含请求方法和拦截器管理。</li>
<li><code>request</code> 方法：<ul>
<li>创建一个包含实际请求处理函数的初始 Promise 链。</li>
<li>将请求拦截器添加到链的开头。</li>
<li>将响应拦截器添加到链的末尾。</li>
<li>使用 <code>while</code> 循环执行整个 Promise 链。</li>
</ul>
</li>
<li>使用示例：展示了如何添加拦截器和发送请求。</li>
</ol>
<p>这个实现展示了拦截器的基本工作原理：</p>
<ul>
<li>拦截器被存储在数组中。</li>
<li>请求时，创建一个 Promise 链，包含所有拦截器和实际的请求处理。</li>
<li>Promise 链按顺序执行，允许每个拦截器修改请求或响应。</li>
</ul>
<p>实际的 Axios 库更加复杂</p>
<h2 id="拦截器实现的核心"><a href="#拦截器实现的核心" class="headerlink" title="拦截器实现的核心"></a>拦截器实现的核心</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line"><span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">  promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码是拦截器实现的核心，它创建了一个 Promise 链来依次执行所有的拦截器和实际的请求。让我们逐步分析：</p>
<ol>
<li><code>let promise = Promise.resolve(config);</code><ul>
<li>这行创建了一个立即解决（resolve）的 Promise，初始值是 config 对象。</li>
<li>这个 Promise 将作为整个链的起点。</li>
</ul>
</li>
<li><code>while (chain.length) &#123; ... &#125;</code><ul>
<li>这个循环会一直执行，直到 chain 数组为空。</li>
<li>chain 数组包含了所有的拦截器函数和实际的请求处理函数。</li>
</ul>
</li>
<li><code>promise = promise.then(chain.shift(), chain.shift());</code><ul>
<li><code>chain.shift()</code> 移除并返回数组的第一个元素。</li>
<li>这里每次调用 <code>shift()</code> 两次，分别获取成功回调和失败回调。</li>
<li><code>promise.then()</code> 将这两个回调添加到当前 Promise 的后面，形成一个新的 Promise。</li>
<li>新的 Promise 被赋值回 <code>promise</code> 变量，准备下一次循环。</li>
</ul>
</li>
</ol>
<p>工作流程示例：</p>
<p>假设我们有以下拦截器和请求处理函数：</p>
<ul>
<li>请求拦截器 1: requestInterceptor1</li>
<li>请求拦截器 2: requestInterceptor2</li>
<li>实际请求处理: sendRequest</li>
<li>响应拦截器 1: responseInterceptor1</li>
<li>响应拦截器 2: responseInterceptor2</li>
</ul>
<p>初始的 chain 数组可能如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  requestInterceptor2, errorHandler2,</span><br><span class="line">  requestInterceptor1, errorHandler1,</span><br><span class="line">  sendRequest, <span class="literal">undefined</span>,</span><br><span class="line">  responseInterceptor1, errorHandler3,</span><br><span class="line">  responseInterceptor2, errorHandler4</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>循环执行过程：</p>
<ol>
<li>第一次循环：<code>promise.then(requestInterceptor2, errorHandler2)</code></li>
<li>第二次循环：<code>promise.then(requestInterceptor1, errorHandler1)</code></li>
<li>第三次循环：<code>promise.then(sendRequest, undefined)</code></li>
<li>第四次循环：<code>promise.then(responseInterceptor1, errorHandler3)</code></li>
<li>第五次循环：<code>promise.then(responseInterceptor2, errorHandler4)</code></li>
</ol>
<p>这样，通过不断地将拦截器和请求处理函数添加到 Promise 链中，我们创建了一个完整的执行序列，确保了所有操作按照正确的顺序执行。</p>
<p>这种实现方式的优点是：</p>
<ol>
<li>灵活性：可以轻松添加或移除拦截器。</li>
<li>异步支持：每个拦截器都可以是异步的。</li>
<li>错误处理：每个步骤都有相应的错误处理机制。</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
        <category>Axios</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>React 无缝滚动跑马灯组件</title>
    <url>/xiaolangwiki/2022/02/16/banner/</url>
    <content><![CDATA[<h2 id="React-无缝滚动跑马灯组件"><a href="#React-无缝滚动跑马灯组件" class="headerlink" title="React 无缝滚动跑马灯组件"></a>React 无缝滚动跑马灯组件</h2><p>最近在做一个电商平台的项目，其中一个需求是在首页顶部展示一些重要的通知公告，比如物流赔付信息、促销活动预告等。为了吸引用户的注意力，UI决定采用跑马灯的形式来展示这些信息，并且要实现无缝滚动，避免出现停顿或跳跃的视觉效果。</p>
<p>由于公司老项目限制，我们没有采用现成的轮播图组件，于是决定自己动手开发一个 React 无缝滚动跑马灯组件。</p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>我们的跑马灯组件需要满足以下几个需求：</p>
<ol>
<li><strong>无缝滚动</strong>: 文案滚动流畅，首尾衔接自然，没有明显的停顿或跳跃。</li>
<li><strong>可配置</strong>: 可以自定义滚动速度、文案内容、字体颜色等样式。</li>
<li><strong>易用</strong>: 使用简单，只需要传入文案数组即可。</li>
</ol>
<h3 id="组件设计与实现"><a href="#组件设计与实现" class="headerlink" title="组件设计与实现"></a>组件设计与实现</h3><h4 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h4><p>实现无缝滚动的关键在于复制第一条文案到最后一条，形成一个循环。当滚动到最后一条文案时，瞬间回到第一条文案，由于视觉上第一条文案已经在最后一条文案后面，所以看起来像是继续滚动，从而达到无缝衔接的效果。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>首先，我们定义了组件的 Props 和 State：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeProps</span> &#123;</span><br><span class="line">    <span class="attr">texts</span>: <span class="built_in">string</span>[]; <span class="comment">// 轮播文案</span></span><br><span class="line">    interval?: <span class="built_in">number</span>; <span class="comment">// 轮播间隔，单位毫秒，默认1000毫秒（每秒滚动一组文案）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeState</span> &#123;</span><br><span class="line">    <span class="attr">translateY</span>: <span class="built_in">number</span>; <span class="comment">// 滚动距离</span></span><br><span class="line">    <span class="attr">currentTextIndex</span>: <span class="built_in">number</span>; <span class="comment">// 当前显示的文案索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在组件的 <code>componentDidMount</code> 生命周期方法中启动定时器，开始滚动：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span> () &#123;</span><br><span class="line">    <span class="comment">// 开始滚动</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">startMarquee</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>startMarquee</code> 方法中，我们使用 <code>setInterval</code> 定时调用 <code>rollAnimation</code> 方法，实现滚动动画：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">rollAnimation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ... 动画逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startMarquee = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; interval = <span class="number">1000</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">marqueeInterval</span> = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">rollAnimation</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), interval);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>rollAnimation</code> 方法中，我们首先复制第一条文案到最后一条，然后计算下一个文案索引和滚动距离，最后更新组件的 State，触发重新渲染：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">rollAnimation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ... 复制文案、计算索引和滚动距离</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">translateY</span>: nextTranslateY,</span><br><span class="line">        <span class="attr">currentTextIndex</span>: nextTextIndex,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在 <code>render</code> 方法中，我们使用 <code>ul</code> 元素来包裹文案列表，并通过 <code>transform: translateY</code> 来实现滚动效果：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;ul</span><br><span class="line">    className=<span class="string">&quot;marquee-content&quot;</span></span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">        <span class="attr">transform</span>: <span class="string">`translateY(<span class="subst">$&#123;translateY&#125;</span>px)`</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    &#123;textsWithFirst.<span class="title function_">map</span>(<span class="function">(<span class="params">text, index</span>) =&gt;</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;marquee-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;text&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    ))&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>为了让滚动效果更加自然，我们还添加了一个渐变遮罩，遮挡住文案列表的上下边缘：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.marquee-mask &#123;</span><br><span class="line">    background-image: linear-gradient(to bottom, #fff 0%, transparent 50%, transparent 50%, #fff 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h3><p>使用起来非常简单，只需要传入文案数组即可：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">SeamlessMarquee</span> texts=&#123;warningArr&#125; interval=&#123;<span class="number">3000</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="源码全览"><a href="#源码全览" class="headerlink" title="源码全览"></a>源码全览</h3><p><strong>SeamlessMarquee.tsx:</strong></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeProps</span> &#123;</span><br><span class="line">    <span class="attr">texts</span>: <span class="built_in">string</span>[]; <span class="comment">// 轮播文案</span></span><br><span class="line">    interval?: <span class="built_in">number</span>; <span class="comment">// 轮播间隔，单位毫秒，默认1000毫秒（每秒滚动一组文案）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SeamlessMarqueeState</span> &#123;</span><br><span class="line">    <span class="attr">translateY</span>: <span class="built_in">number</span>; <span class="comment">// 滚动距离</span></span><br><span class="line">    <span class="attr">currentTextIndex</span>: <span class="built_in">number</span>; <span class="comment">// 当前显示的文案索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeamlessMarquee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;</span><br><span class="line">    <span class="title class_">SeamlessMarqueeProps</span>,</span><br><span class="line">    <span class="title class_">SeamlessMarqueeState</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">    <span class="comment">// 滚动容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">setMarqueeContentRef</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">marqueeInterval</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params"><span class="attr">props</span>: <span class="title class_">SeamlessMarqueeProps</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">translateY</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">currentTextIndex</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span> () &#123;</span><br><span class="line">        <span class="comment">// 开始滚动</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">startMarquee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentWillUnmount</span> () &#123;</span><br><span class="line">        <span class="comment">// 停止滚动</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">marqueeInterval</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * desc 动画逻辑抽离</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> <span class="variable">Lang</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2024-06-04 16:24:17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    rollAnimation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; texts &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制第一个文案到最后一个，实现无缝衔接</span></span><br><span class="line">        <span class="keyword">const</span> textsWithFirst = [...texts, texts[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; currentTextIndex &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="comment">// 计算下一个文案索引</span></span><br><span class="line">        <span class="keyword">const</span> nextTextIndex = (currentTextIndex + <span class="number">1</span>) % textsWithFirst.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算滚动距离</span></span><br><span class="line">        <span class="keyword">const</span> nextTranslateY = nextTextIndex * -<span class="number">36</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果滚动到最后一个文案，需要瞬间回到第一个文案</span></span><br><span class="line">        <span class="keyword">if</span> (currentTextIndex === textsWithFirst.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 瞬间回到第一个文案 - 关闭过渡动画</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">setMarqueeContentRef</span>.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">setMarqueeContentRef</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateY(0)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待回到第一个文案后，再开启过渡动画</span></span><br><span class="line">            <span class="comment">// window.setTimeout 的作用是确保在 translateY 设置为 0 之后，再开启过渡动画，避免视觉上“回拉”的感觉</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 第一个文案在最后一个文案的后面，所以在视觉上已经是第二个文案了</span></span><br><span class="line">                <span class="comment">// 设置第二个文案为当前文案，用于过渡动画</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                    <span class="attr">translateY</span>: -<span class="number">36</span>,</span><br><span class="line">                    <span class="attr">currentTextIndex</span>: <span class="number">1</span>,</span><br><span class="line">                &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">setMarqueeContentRef</span>.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;transform 0.5s&#x27;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">translateY</span>: nextTranslateY,</span><br><span class="line">            <span class="attr">currentTextIndex</span>: nextTextIndex,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始滚动</span></span><br><span class="line">    startMarquee = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; interval = <span class="number">1000</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">marqueeInterval</span> = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">rollAnimation</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), interval);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span> () &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; texts &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123; translateY &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制第一个文案到最后一个，实现无缝衔接</span></span><br><span class="line">        <span class="keyword">const</span> textsWithFirst = [...texts, texts[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;seamless-marquee&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;marquee-mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">className</span>=<span class="string">&quot;marquee-content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">ref</span>=<span class="string">&#123;ref</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                        this.setMarqueeContentRef = ref;</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                    style=&#123;&#123;</span></span><br><span class="line"><span class="language-xml">                        transform: `translateY($&#123;translateY&#125;px)`</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                &gt;</span></span><br><span class="line"><span class="language-xml">                    &#123;textsWithFirst.map((text, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;marquee-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            &#123;text&#125;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    ))&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SeamlessMarquee</span>;</span><br></pre></td></tr></table></figure>
<p><strong>SeamlessMarquee.scss:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.seamless-marquee &#123;</span><br><span class="line">    width: 380px;</span><br><span class="line">    height: 36px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: relative;</span><br><span class="line">    font-size: 12px;</span><br><span class="line"></span><br><span class="line">    .marquee-mask &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        content: &#x27;&#x27;;</span><br><span class="line">        display: block;</span><br><span class="line">        background-image: linear-gradient(to bottom, #fff 0%, transparent 50%, transparent 50%, #fff 100%);</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        z-index: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .marquee-content &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: auto;</span><br><span class="line">        transition: transform .5s;</span><br><span class="line"></span><br><span class="line">        .marquee-item &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            height: 36px;</span><br><span class="line">            line-height: 36px;</span><br><span class="line">            color: #FF4D4A;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，我们成功开发了一个 React 无缝滚动跑马灯组件，满足了项目的需求，并且代码简洁易懂，方便维护。在实际项目中，我们可以根据具体需求，对组件进行进一步的扩展和优化，比如添加自定义样式、暂停/继续滚动等功能。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>跑马灯</tag>
      </tags>
  </entry>
  <entry>
    <title>husky的原理是什么</title>
    <url>/xiaolangwiki/2022/01/09/hello-world/</url>
    <content><![CDATA[<p>一个简化的代码示例,展示 husky 的基本实现原理。这个例子会展示 husky 如何拦截 Git hooks 并执行自定义脚本。请注意,这只是一个概念性的示例,真实的 husky 实现要复杂得多。</p>
<p>以下是一个简化的 JavaScript 代码示例,展示了 husky 的核心原理:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; execSync &#125; = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleHusky</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hooksDir</span> = path.<span class="title function_">join</span>(<span class="string">&quot;.git&quot;</span>, <span class="string">&quot;hooks&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = <span class="variable language_">this</span>.<span class="title function_">loadConfig</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载husky配置</span></span><br><span class="line">  <span class="title function_">loadConfig</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> packageJson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> packageJson.<span class="property">husky</span> || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 安装Git hooks</span></span><br><span class="line">  <span class="title function_">install</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(<span class="variable language_">this</span>.<span class="property">hooksDir</span>)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(<span class="variable language_">this</span>.<span class="property">hooksDir</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">hooks</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">hookName</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> hookPath = path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">hooksDir</span>, hookName);</span><br><span class="line">      <span class="keyword">const</span> hookContent = <span class="variable language_">this</span>.<span class="title function_">generateHookScript</span>(hookName);</span><br><span class="line">      fs.<span class="title function_">writeFileSync</span>(hookPath, hookContent, &#123; <span class="attr">mode</span>: <span class="number">0o755</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Husky hooks installed successfully!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成hook脚本</span></span><br><span class="line">  <span class="title function_">generateHookScript</span>(<span class="params">hookName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`#!/bin/sh</span></span><br><span class="line"><span class="string"># Husky</span></span><br><span class="line"><span class="string"># 运行配置的脚本</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;<span class="variable language_">this</span>.config.hooks[hookName]&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 运行hook</span></span><br><span class="line">  <span class="title function_">runHook</span>(<span class="params">hookName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">hooks</span>[hookName];</span><br><span class="line">    <span class="keyword">if</span> (script) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Running <span class="subst">$&#123;hookName&#125;</span> hook...`</span>);</span><br><span class="line">        <span class="title function_">execSync</span>(script, &#123; <span class="attr">stdio</span>: <span class="string">&quot;inherit&quot;</span> &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;hookName&#125;</span> hook completed successfully.`</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;hookName&#125;</span> hook failed. Git operation aborted.`</span>);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> husky = <span class="keyword">new</span> <span class="title class_">SimpleHusky</span>();</span><br><span class="line">husky.<span class="title function_">install</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟触发pre-commit hook</span></span><br><span class="line">husky.<span class="title function_">runHook</span>(<span class="string">&quot;pre-commit&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这个简化的实现展示了 husky 的几个核心概念:</p>
<ol>
<li>配置加载: 从 package.json 文件中读取 husky 配置。</li>
<li>Hook 安装: 在.git/hooks 目录中创建对应的 hook 脚本文件。</li>
<li>Hook 脚本生成: 生成可执行的 shell 脚本,其中包含用户配置的命令。</li>
<li>Hook 执行: 当 Git 操作触发 hook 时,执行相应的脚本。</li>
<li>错误处理: 如果脚本执行失败,则阻止 Git 操作继续进行。</li>
</ol>
<p>使用这个简化版的 husky,你可以在 package.json 中添加类似这样的配置:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint &amp;&amp; npm test&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pre-push&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后,当你尝试提交代码时,它会先运行 lint 和测试,只有在这些检查都通过后,提交才会成功。</p>
<p>请注意,实际的 husky 实现要复杂得多,包括更多的错误处理、跨平台兼容性、与不同版本的 Git 的兼容性等。这个示例仅用于说明基本原理。如果您需要在实际项目中使用,我强烈建议使用官方的 husky 包,因为它经过了充分的测试和优化。</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>husky</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员效率大挑战：别让&quot;偶然复杂度&quot;坑了你！</title>
    <url>/xiaolangwiki/2022/02/18/read-2022-02-18/</url>
    <content><![CDATA[<h1 id="程序员效率大挑战：别让”偶然复杂度”坑了你！"><a href="#程序员效率大挑战：别让”偶然复杂度”坑了你！" class="headerlink" title="程序员效率大挑战：别让”偶然复杂度”坑了你！"></a>程序员效率大挑战：别让”偶然复杂度”坑了你！</h1><p>嘿，大家好！我是一名22岁的大三计算机系学生，最近读到了一篇超级有意思的文章，讲的是程序员工作效率的问题。说实话，这篇文章真的让我有点震惊，也让我对未来的程序员生涯有了新的认识。我想跟大家分享一下我的想法，希望能给同样即将踏入IT圈的小伙伴们一些启发。</p>
<p>首先，这篇文章提到了一个叫”偶然复杂度”的概念。说白了，就是我们程序员经常忙得要死要活，结果解决的问题根本不是程序本身的问题，而是因为选错了工具或方法导致的额外麻烦。我当时就想，我靠，这不就是在搬起石头砸自己的脚吗？</p>
<p>想想看，我们每天加班加点，以为自己在攻克什么技术难关，结果可能只是在解决自己制造的问题。这就好比你本来要做一道简单的炒饭，结果非要用高压锅，搞得自己手忙脚乱，最后还把厨房炸了（别笑，我室友就干过这种事）。</p>
<p>文章里还说，业界其实有很多提高效率的最佳实践，但问题是这些实践之间没什么明显联系，搞得人很难全面掌握。我听了直呼太真实了！想想我们上课学的那些编程范式、设计模式、敏捷开发…老师讲的时候头头是道，到了实际项目里，我就傻眼了，根本不知道该怎么用。</p>
<p>不过，这篇文章的作者也不是光吐槽，人家给出了四个超实用的原则：以终为始、任务分解、沟通反馈、自动化。乍一看，这四个原则简单得像是小学生都懂的道理。但仔细想想，在实际工作中做到这些，还真不容易。</p>
<p>拿”以终为始”来说吧。我在做课程项目的时候，经常是看到题目就开始狂敲代码，结果写到一半发现理解错题目意思，白忙活一场。如果一开始就花点时间想清楚最终要达到什么效果，再倒推着设计每一步，肯定能少走不少弯路。</p>
<p>“任务分解”这个我倒是有点体会。我大一刚入学的时候，就被老师教导过，要把一个大项目分解成多个小任务，然后每个人负责一个任务。结果我当时就被教导得头头是道，觉得这可真是一件很有意思的事情。后来我参加过一个学校项目，光是看项目描述就觉得头大。但是项目负责人特别厉害，把整个项目分解成一个个小任务，分配给不同班级的学生。结果我们这群素未谋面的人，愣是合作得挺顺畅。</p>
<p>至于”沟通反馈”和”自动化”，老实说，在学校里接触得不多。但我暑假实习的时候，可算是见识到了它们的威力。经常沟通真的能避免很多不必要的返工，而自动化测试和部署，简直是懒人福音啊！要是早点学会这些，指不定我的期末项目能少掉几根头发呢。</p>
<p>不过，文章里也说了，这些原则看着简单，做起来可不容易。比如说，在项目一开始就花大力气做规划和自动化，总觉得是在浪费时间。但是经历过几次”补漏洞”的痛苦之后，我才明白，早做准备真的能省下后面的不少事。</p>
<p>作为一个马上就要进入职场的准程序员，这篇文章给了我一记当头棒喝。它让我意识到，成为一个牛逼的程序员，不只是要会写代码，更重要的是要学会高效工作。我们得学会避开那些自己给自己设的坑，把精力花在真正有价值的问题上。</p>
<p>所以，咱们以后写代码的时候，可得擦亮眼睛啊！别让那个什么”偶然复杂度”把咱们坑了。让我们一起努力，用聪明的方式工作，创造出真正牛逼的软件，改变这个世界！</p>
<p>好了，我的碎碎念就到这里。</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>读书</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>解密10x程序员的思考方式:一个大三学生的领悟</title>
    <url>/xiaolangwiki/2022/07/23/read-2022-07-23/</url>
    <content><![CDATA[<h1 id="解密10x程序员的思考方式-一个大三学生的领悟"><a href="#解密10x程序员的思考方式-一个大三学生的领悟" class="headerlink" title="解密10x程序员的思考方式:一个大三学生的领悟"></a>解密10x程序员的思考方式:一个大三学生的领悟</h1><p>大家好,我是一名大三的计算机系学生。最近,我在实习中遇到了一位被同事们称为”10x程序员”的大神。这让我开始思考:到底什么是10x程序员?他们是如何思考的?经过一段时间的观察和学习,我有了一些新的认识,今天就和大家分享一下。</p>
<p>首先,我们得搞清楚什么是10x程序员。简单来说,就是能够创造10倍于普通程序员价值的超级开发者。但这并不意味着他们要比别人多写10倍的代码,而是他们的思考方式和解决问题的能力远超常人。</p>
<p>那么,这些10x程序员是如何思考的呢?</p>
<ol>
<li>系统化思考:降低偶然复杂度</li>
</ol>
<p>记得有一次,我们团队接到一个看似简单的需求:给APP添加一个新的功能按钮。大多数人二话不说就开始coding了,但是我们团队的10x大神却先停下来思考。他说:”等等,我们先来分析一下这个需求背后的真正目的。”</p>
<p>他提出了一个通用的思考框架:</p>
<ul>
<li>第一步:确定现状</li>
<li>第二步:明确目标</li>
<li>第三步:制定实现路径</li>
</ul>
<p>这个框架看似简单,但却能帮助我们快速理清思路,避免陷入不必要的复杂性中。</p>
<ol>
<li>明确真实目标</li>
</ol>
<p>大神并不满足于表面的需求描述。他开始追问产品经理:”这个新功能的真正目标是什么?我们要解决用户的什么痛点?有没有其他方式可以更好地达成这个目标?”</p>
<p>这些问题让我意识到,作为程序员,我们不应该只是一个代码搬运工。我们需要深入理解需求背后的真实目标,这样才能提供最优解决方案。</p>
<ol>
<li>任务分解</li>
</ol>
<p>确定了目标后,大神开始将整个任务分解成小块。他说:”把大象放进冰箱需要三步,我们也要把复杂的任务拆解成可管理的小任务。”</p>
<p>这种方法不仅让整个开发过程变得清晰可控,也方便了团队协作和进度跟踪。</p>
<ol>
<li>加强沟通反馈</li>
</ol>
<p>在开发过程中,大神特别强调沟通的重要性。他经常组织简短的站会,确保每个人都清楚自己的任务和整个项目的进展。</p>
<p>他说:”代码是写给人看的,顺便能在机器上运行。”这句话让我明白了,良好的沟通不仅能提高开发效率,还能降低代码的维护成本。</p>
<ol>
<li>实现自动化</li>
</ol>
<p>最让我惊讶的是,大神总能在短时间内完成看似不可能的任务。他的秘诀就是:自动化。</p>
<p>从代码部署到测试,他都尽可能地实现自动化。他说:”重复的工作交给机器,我们的大脑应该专注于创造性的思考。”</p>
<p>这让我想起了自己曾经熬夜手动部署代码的经历,顿时感觉自己还有很长的路要走。</p>
<ol>
<li>持续学习和反思</li>
</ol>
<p>大神总是在学习新东西。无论是新的编程语言,还是最新的技术趋势,他都保持着强烈的好奇心。</p>
<p>他经常说:”在这个行业,如果你觉得自己已经够厉害了,那就意味着你已经开始落后了。”</p>
<p>这句话深深地触动了我。作为一个即将毕业的学生,我更应该保持学习的热情,不断提升自己。</p>
<p>结语:</p>
<p>通过观察和学习10x程序员的思考方式,我意识到成为一个优秀的程序员不仅仅是技术问题,更重要的是思维方式的转变。</p>
<p>系统化思考、明确目标、任务分解、加强沟通、实现自动化、持续学习,这些原则不仅适用于编程,也适用于我们的学习和生活。</p>
<p>作为一个即将步入职场的准程序员,我决定从现在开始就培养这种思考方式。也许我现在还不是10x程序员,但我相信只要坚持这种思维模式,终有一天我也能成为别人眼中的”大神”。<br>最后,祝大家都能成为10x程序员!</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考方式</tag>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>从&quot;登录&quot;到&quot;人生&quot;:一个准程序员的&quot;以终为始&quot;领悟</title>
    <url>/xiaolangwiki/2022/09/21/read-2022-09-21/</url>
    <content><![CDATA[<h1 id="从”登录”到”人生”-一个准程序员的”以终为始”领悟"><a href="#从”登录”到”人生”-一个准程序员的”以终为始”领悟" class="headerlink" title="从”登录”到”人生”:一个准程序员的”以终为始”领悟"></a>从”登录”到”人生”:一个准程序员的”以终为始”领悟</h1><p>大家好,我是小浪,一个即将毕业的软件工程专业学生。最近在做项目的时候,我突然对”以终为始”这个概念有了全新的认识,感觉整个人都升级了,忍不住想和大家分享一下。</p>
<p>还记得大二那会儿,我们上软件工程课时做过一个设计登录功能的小练习。那时候的我,满脑子都是炫酷的界面设计、花里胡哨的动画效果,甚至还想着加个人脸识别啥的。结果呢?老师看完我的设计后,只说了一句话:”你有考虑过用户真正需要的是什么吗?”</p>
<p>我懵了。是啊,我设计了半天,好像真的没想过用户到底需要什么。这个小小的挫折让我开始思考:我们做事情的时候,是不是应该先想想最终要达到什么效果,而不是一头扎进去就开始干?</p>
<p>后来在实习的时候,我遇到了一个特别厉害的mentor。有一次我们在讨论一个新功能,我又开始滔滔不绝地说起实现方案。他听了一会儿,打断我说:”小浪,先别急着谈怎么做。咱们先想想,如果这个功能做好了,会给用户带来什么样的体验?它会解决用户什么问题?”</p>
<p>这一刻,我仿佛被打开了新世界的大门。原来,真正高明的程序员,不是写代码最快的,而是最懂得思考目标和结果的。</p>
<p>从那以后,我开始尝试用”以终为始”的方式来做事。比如在做毕业设计的时候,我没有急着写代码,而是先花了两周时间去调研用户需求,设想产品上线后的场景。这个过程让我发现了很多之前忽视的细节,最后做出来的作品不仅得到了老师的肯定,还真的解决了一些同学的实际问题。</p>
<p>现在回想起来,我发现”以终为始”其实不只是一种工作方法,更是一种生活态度。它让我学会了在行动之前先思考目标,在忙碌之中不忘初心。</p>
<p>就拿找工作来说吧。很多同学一头扎进各种面试题海里,但我选择先想清楚自己理想的职业发展路径。结果是,虽然我可能刷题没他们多,但在面试的时候能够清晰地表达自己的职业规划,反而得到了面试官的青睐。</p>
<p>当然,实践”以终为始”并不总是容易的。有时候,我也会陷入日常琐事,忘记了最初的目标。但每当我感到迷茫或者压力山大的时候,我就会停下来问自己:”我最终想要达到什么样的结果?”这个简单的问题总能让我重新找到方向。</p>
<p>对于我们这些即将踏入职场的准程序员来说,”以终为始”的思维方式尤为重要。因为我们的工作本质上是在将想象变为现实,如果连自己想要的结果都不清楚,又怎么能写出好的代码呢?</p>
<p>所以,我想对所有和我一样的学弟学妹们说:不要急着埋头苦干,先抬头看看你要到达的方向。无论是学习、工作还是生活,都要先想清楚你想要的结果是什么,然后再规划你的行动。这样,你的每一分努力都不会白费,每一步都会离你的目标更近一些。</p>
<p>最后,我想用我们专业常说的一句话来结束这篇文章:”代码是怎么写的不重要,重要的是它能不能解决问题。”同样,生活也是如此,重要的不是你多么忙碌,而是你是否在朝着自己想要的方向前进。</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>思考</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack模块化原理解析 - 大一新生的前端工程化初探</title>
    <url>/xiaolangwiki/2019/10/19/webpack%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>webpack模块化原理解析 - 大一新生的前端工程化初探</p>
<p>大家好!我是小浪,一名刚刚踏入大学校园的软件工程专业新生。虽然才大一,但我已经对前端开发产生了浓厚的兴趣。最近,我开始接触前端工程化,尤其是webpack这个强大的工具。说实话,一开始我完全被各种概念和术语搞晕了。不过,经过一段时间的学习和实践,我逐渐理解了webpack的核心思想。今天,我想以一个新手的视角,和大家分享我对webpack模块化原理的理解。</p>
<p>还记得我第一次听说webpack时的情景吗?那是在一次学校的前端技术分享会上。当时,学长们讨论的内容对我来说简直像天书一样。但是,我被他们描述的前端工程化的魅力深深吸引了。于是,我决定要一探究竟!</p>
<p>首先,让我们来理解webpack的核心 - 模块化。作为一个刚接触编程的新手,我很快就意识到,随着项目规模的增大,代码会变得越来越难以管理。这时,模块化就显得尤为重要了。它可以帮助我们更好地组织代码,提高可维护性和复用性。那么,webpack是如何实现模块化的呢?让我们从一个简单的例子开始:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是webpack打包后的简化版本</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">      (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">        <span class="built_in">eval</span>(code);</span><br><span class="line">      &#125;)(<span class="built_in">exports</span>, list[file]);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;index.js&quot;</span>);</span><br><span class="line">  &#125;)(&#123;</span><br><span class="line">    <span class="string">&quot;index.js&quot;</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      var add = require(&#x27;add.js&#x27;).default</span></span><br><span class="line"><span class="string">      console.log(add(1 , 2))</span></span><br><span class="line"><span class="string">          `</span>,</span><br><span class="line">    <span class="string">&quot;add.js&quot;</span>: <span class="string">`exports.default = function(a,b)&#123;return a + b&#125;`</span>,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>看到这段代码,我第一反应也是一脸懵逼。但是别担心,让我们一步步来解析:</p>
<ol>
<li>最外层是一个自执行函数,它接收一个参数<code>list</code>。这个<code>list</code>其实就是我们所有的模块代码。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">&quot;index.js&quot;</span>: <span class="string">`...`</span>,</span><br><span class="line">  <span class="string">&quot;add.js&quot;</span>: <span class="string">`...`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>在这个函数内部,定义了一个<code>require</code>函数。这个函数就是模块加载的核心:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, code</span>) &#123;</span><br><span class="line">    <span class="built_in">eval</span>(code);</span><br><span class="line">  &#125;)(<span class="built_in">exports</span>, list[file]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>它创建了一个<code>exports</code>对象,用于存储模块导出的内容</li>
<li>然后用一个匿名函数包裹模块代码,并传入<code>exports</code>对象</li>
<li>使用<code>eval</code>执行模块代码</li>
<li>最后返回<code>exports</code>对象,这就是模块的导出内容</li>
</ul>
<ol>
<li>最后,通过<code>require(&quot;index.js&quot;)</code>启动整个应用。</li>
</ol>
<p>现在,让我们看看<code>index.js</code>和<code>add.js</code>的内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;add.js&#x27;</span>).<span class="property">default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span> , <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a + b&#125;</span><br></pre></td></tr></table></figure>
<p>你看,<code>index.js</code>通过<code>require</code>函数引入了<code>add.js</code>,并使用了它导出的<code>add</code>函数。而<code>add.js</code>则通过<code>exports.default</code>导出了一个函数。</p>
<p>这就是webpack模块化的基本原理!它把每个文件都变成了一个模块,通过<code>require</code>和<code>exports</code>实现了模块间的引用和导出。</p>
<p>当我理解了这个原理后,我感觉整个人都不一样了!突然间,那些看起来很高深的前端工程化概念变得清晰起来。我意识到,webpack不仅仅是一个打包工具,它更像是一个强大的模块管理系统。</p>
<p>作为一个大一新生,我开始在我的小项目中尝试使用webpack。虽然还很简单,但我发现,通过合理的模块划分,我的代码变得更加清晰,也更容易维护了。而且,当我需要添加新功能时,只需要编写新的模块,然后通过<code>require</code>引入,就可以轻松集成到现有项目中。</p>
<p>当然,我知道webpack的功能远不止于此。它还有代码分割、懒加载、热模块替换等高级特性。但是,理解了这个基本原理,我感觉自己已经迈出了理解前端工程化的第一步!</p>
<p>最后,我想对和我一样刚开始学习前端的同学们说:不要被那些看似复杂的技术吓到。每个技术背后都有其核心原理,只要我们肯下功夫去理解,就一定能够掌握。就像我从一个对webpack一无所知的小白,变成了能够理解其原理并在小项目中使用的新手。相信你们也一定可以!</p>
<p>学习是一个渐进的过程,保持好奇心和探索精神,我们就能在编程的道路上越走越远。虽然我们还是大一新生,但只要持续学习和实践,未来的路一定会越来越宽广!</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>模块化</tag>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>小浪的C盘大作战：用软链接拯救濒临崩溃的电脑</title>
    <url>/xiaolangwiki/2019/11/06/%E5%B0%8F%E6%B5%AA%E7%9A%84C%E7%9B%98%E5%A4%A7%E4%BD%9C%E6%88%98%EF%BC%9A%E7%94%A8%E8%BD%AF%E9%93%BE%E6%8E%A5%E6%8B%AF%E6%95%91%E6%BF%92%E4%B8%B4%E5%B4%A9%E6%BA%83%E7%9A%84%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<h2 id="小浪的C盘大作战：用软链接拯救濒临崩溃的电脑"><a href="#小浪的C盘大作战：用软链接拯救濒临崩溃的电脑" class="headerlink" title="小浪的C盘大作战：用软链接拯救濒临崩溃的电脑"></a>小浪的C盘大作战：用软链接拯救濒临崩溃的电脑</h2><p>大家好,我是小浪,一个23岁的软件工程专业大一学生。最近,我遇到了一个让我头疼不已的问题——我的笔记本电脑C盘快要爆炸了!作为一个喜欢尝试各种新软件的极客,我的C盘总是很快就被填满。今天,我要和大家分享我是如何用软链接这个神奇的工具来解救我的C盘的。</p>
<p>故事是这样的：前几天,我正准备下载一个新的游戏,突然收到了系统警告:C盘空间不足。我看了看,居然只剩下不到1GB的空间了!我慌了,因为马上就要开始一个重要的编程项目,电脑要是出问题就糟糕了。</p>
<p>我尝试了各种常规的清理方法:删除临时文件、卸载不用的软件、甚至把一些文件移动到D盘。但是效果不太理想,C盘空间还是很紧张。正当我一筹莫展时,我想起了操作系统课上老师曾经提到过的一个概念——软链接。</p>
<p>经过一番研究,我发现软链接简直就是为我这种情况量身定制的解决方案!它可以让我把一些占用大量空间的文件夹”转移”到其他盘,同时保持原来的路径不变,简直太棒了!</p>
<p>下面,我来一步步教大家如何使用软链接来拯救濒临崩溃的C盘:</p>
<p>步骤1：找出占用空间最大的文件夹<br>首先,我们需要找出C盘中占用空间最大的文件夹。在我的电脑上,我发现 <code>C:\Users\小浪\AppData\Local\Microsoft\Windows\WER</code> 这个文件夹占用了将近10GB的空间。这个文件夹存储的是Windows错误报告,可以安全地移动到其他盘。</p>
<p>步骤2：准备目标路径<br>我决定在D盘创建一个新的文件夹来存储这些文件。</p>
<ul>
<li>源路径：<code>C:\Users\小浪\AppData\Local\Microsoft\Windows\WER</code></li>
<li>目标路径：<code>D:\Backups\Windows\WER</code></li>
</ul>
<p>步骤3：移动文件<br>在进行下一步之前,我们需要先把文件移动到新位置。打开命令提示符(以管理员身份运行),输入以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir &quot;D:\Backups\Windows&quot;</span><br><span class="line">move &quot;C:\Users\小浪\AppData\Local\Microsoft\Windows\WER&quot; &quot;D:\Backups\Windows\WER&quot;</span><br></pre></td></tr></table></figure>
<p>这里的代码解释如下:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir &quot;新文件夹路径&quot;  # 创建新的文件夹</span><br><span class="line">move &quot;源路径&quot; &quot;目标路径&quot;  # 移动文件夹</span><br></pre></td></tr></table></figure></p>
<p>步骤4：创建软链接<br>现在,我们来创建软链接。在同一个命令提示符窗口中,输入以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mklink /D &quot;C:\Users\小浪\AppData\Local\Microsoft\Windows\WER&quot; &quot;D:\Backups\Windows\WER&quot;</span><br></pre></td></tr></table></figure>
<p>这里的代码解释如下:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mklink /D &quot;链接路径&quot; &quot;目标路径&quot;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>mklink</code>: Windows系统用于创建符号链接的命令</li>
<li><code>/D</code>: 表示我们要创建一个目录的符号链接</li>
<li><code>&quot;链接路径&quot;</code>: 原来的路径,也是我们要创建链接的地方</li>
<li><code>&quot;目标路径&quot;</code>: 我们实际存储文件的新路径</li>
</ul>
<p>步骤5：验证软链接是否创建成功<br>你可以在文件资源管理器中查看 <code>C:\Users\小浪\AppData\Local\Microsoft\Windows\</code> 目录,应该能看到一个箭头图标的WER文件夹,这就说明软链接创建成功了。</p>
<p>步骤6：测试<br>重启电脑,然后检查C盘空间是否增加了。你会惊喜地发现,C盘空间一下子就空出了10GB!</p>
<p>通过这个方法,我不仅解决了C盘空间不足的问题,还学会了一个非常实用的技能。之后,我又用同样的方法处理了其他一些大文件夹,最终为C盘释放了将近30GB的空间!</p>
<p>使用软链接时,要注意以下几点:</p>
<ol>
<li>总是使用管理员权限执行mklink命令。</li>
<li>在移动文件和创建链接之前,最好先备份重要数据。</li>
<li>不要随意删除或移动已经创建了软链接的文件夹,这可能会导致系统出错。</li>
<li>定期检查链接是否正常工作。</li>
</ol>
<p>软链接不仅可以用于节省C盘空间,还有很多其他有趣的应用。比如,你可以用它来组织你的项目文件,或者管理游戏存档。掌握了这个技能,你就多了一个强大的工具来管理你的文件系统。</p>
<p>希望我的经历和这个教程能对你有所帮助。记住,在遇到问题时不要慌张,仔细思考,总会有解决的方法。作为未来的软件工程师,我们要学会用技术的方法来解决生活中的各种问题。</p>
]]></content>
      <categories>
        <category>电脑</category>
      </categories>
      <tags>
        <tag>软链接</tag>
        <tag>C盘</tag>
        <tag>电脑</tag>
        <tag>清理C盘</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试必不可少的基础知识，虽然少但是你不能不知道这个是小浪学习前端的时候对于一些面试的基础知识的总结</title>
    <url>/xiaolangwiki/2021/07/12/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%8C%E8%99%BD%E7%84%B6%E5%B0%91%E4%BD%86%E6%98%AF%E4%BD%A0%E4%B8%8D%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E8%BF%99%E4%B8%AA%E6%98%AF%E5%B0%8F%E6%B5%AA%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF%E7%9A%84%E6%97%B6%E5%80%99%E5%AF%B9%E4%BA%8E%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%9A%84%E6%80%BB%E7%BB%93%EF%BC%88%E8%BF%99%E9%87%8C%E9%9D%A2%E6%B2%A1%E6%B6%89%E5%8F%8A%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="前端面试必不可少的基础知识，虽然少但是你不能不知道这个是小浪学习前端的时候对于一些面试的基础知识的总结"><a href="#前端面试必不可少的基础知识，虽然少但是你不能不知道这个是小浪学习前端的时候对于一些面试的基础知识的总结" class="headerlink" title="前端面试必不可少的基础知识，虽然少但是你不能不知道这个是小浪学习前端的时候对于一些面试的基础知识的总结"></a>前端面试必不可少的基础知识，虽然少但是你不能不知道这个是小浪学习前端的时候对于一些面试的基础知识的总结</h2><blockquote>
<p>这个是小浪学习前端的时候对于一些面试的基础知识的总结（这里面没涉及框架），不是很全，一方面是和大家一起分享，有错误的地方请大家多多指教我这个新人，另一方面方便自己复习，自己总结做笔记也是加强印象的一种方式，加油喔！小浪努力学前端</p>
</blockquote>
<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="1-如何理解HTML语义化"><a href="#1-如何理解HTML语义化" class="headerlink" title="1.如何理解HTML语义化"></a>1.如何理解HTML语义化</h2><h3 id="为什么要语义化"><a href="#为什么要语义化" class="headerlink" title="为什么要语义化"></a>为什么要语义化</h3><ol>
<li><p>页面不止是给人看的，机器也要看爬虫也要看</p>
</li>
<li><p>如果全部都是div+css布局，有的时候页面因为一些原因加载不出来样式，全部都是div页面对用户不友好</p>
</li>
</ol>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>让人更加容易读懂，有利于构建清晰的结构(增加代码的可读性)</li>
<li>让搜索引擎更加容易读懂(方便SEO)</li>
</ol>
<h2 id="2-语义化的标签有哪些"><a href="#2-语义化的标签有哪些" class="headerlink" title="2.语义化的标签有哪些"></a>2.语义化的标签有哪些</h2><h3 id="html5之前的常用的语义化标签"><a href="#html5之前的常用的语义化标签" class="headerlink" title="html5之前的常用的语义化标签"></a>html5之前的常用的语义化标签</h3><p><code>h1~h6 p br ul ol li dl dt dd em strong table thead tobdy tfoot td th caption</code></p>
<p>注意的点：</p>
<ul>
<li><code>b</code>、<code>font</code>、<code>u</code>等纯样式标签不要使用</li>
<li><code>strong</code>是为了强调重要而加粗（不要用<code>b``b</code>是为了加粗而加粗），<code>em</code>是斜体是强调（不用<code>i``i</code>就是斜体）</li>
<li>每个<code>input</code>标签对应的说明文本都需要使用<code>label</code>标签</li>
<li>表单域要使用<code>fieldset</code>包起来，并使用<code>legend</code>说明表单的用途</li>
</ul>
<h3 id="html5新增的常用的语义化标签"><a href="#html5新增的常用的语义化标签" class="headerlink" title="html5新增的常用的语义化标签"></a>html5新增的常用的语义化标签</h3><p><code>header footer nav aside section artice</code></p>
<h2 id="3-块级元素-和-内联元素"><a href="#3-块级元素-和-内联元素" class="headerlink" title="3.块级元素 和 内联元素"></a>3.块级元素 和 内联元素</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素 :"></a>块级元素 :</h3><p><code>ul li ol dl dd dt table h1-h6 form p</code> 等等 <code>display : block</code></p>
<h3 id="内联元素-："><a href="#内联元素-：" class="headerlink" title="内联元素 ："></a>内联元素 ：</h3><p><code>a span b img input button</code> 等等 <code>display : inline-block</code></p>
<h3 id="样式转换："><a href="#样式转换：" class="headerlink" title="样式转换："></a>样式转换：</h3><ul>
<li><code>display:block</code> 行内元素转换为块级元素</li>
<li><code>display:inline</code> 块级元素转换为行内元素</li>
<li><code>display:inline-block</code> 转为内联元素</li>
</ul>
<h2 id="4-DOM怎么优化"><a href="#4-DOM怎么优化" class="headerlink" title="4.DOM怎么优化"></a>4.DOM怎么优化</h2><ul>
<li><p>可以使用伪元素,阴影实现的内容尽量不使用</p>
</li>
<li><p><code>DOM</code>实现，如清除浮动、样式实现等;按需加载，减少不必要的渲染;</p>
</li>
<li><p>结构合理，语义化标签</p>
</li>
<li><p>使用文档片段</p>
</li>
<li><p><code>DOM</code>缓存</p>
</li>
<li><p><code>innerHTML</code>代替<code>appendChild</code></p>
</li>
<li><p>虚拟<code>DOM</code></p>
</li>
</ul>
<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="1-盒子模型的宽度计算"><a href="#1-盒子模型的宽度计算" class="headerlink" title="1.盒子模型的宽度计算"></a>1.盒子模型的宽度计算</h2><h3 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型:"></a>标准盒子模型:</h3><blockquote>
<p>默认 <code>box-sizing : content-box</code></p>
<p>offsetWidth : 包括 width + border + padding (不包括margin)</p>
<p>比如这个例子</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#box &#123;</span><br><span class="line">	width : 20px;</span><br><span class="line">	padding : 20px;</span><br><span class="line">	margin : 20px;</span><br><span class="line">	border : 2px solid #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里计算就是 offsetWidth :</p>
<p><code>document.getElementById(&#39;box&#39;).offsetWidth``64</code></p>
</blockquote>
<h3 id="弹性盒子的计算"><a href="#弹性盒子的计算" class="headerlink" title="弹性盒子的计算"></a>弹性盒子的计算</h3><blockquote>
<p>加上 <code>box-sizing : border-box</code></p>
<p>总的宽度设置多少就是多少(width 设置多少就是多少)</p>
<p>然后内容的宽度是自己计算的</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#box &#123;</span><br><span class="line">	width : 80px;</span><br><span class="line">	padding : 20px;</span><br><span class="line">	margin : 20px;</span><br><span class="line">	border : 2px solid #ccc;</span><br><span class="line">	box-sizing : border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里计算就是 offsetWidth :</p>
<p><code>document.getElementById(&#39;box&#39;).offsetWidth``80</code></p>
<p>如果padding + border 的宽度大于 width</p>
<p>这个时候的offsetWidth 就是 padding + border了</p>
</blockquote>
<h2 id="2-marign纵向重叠的问题"><a href="#2-marign纵向重叠的问题" class="headerlink" title="2.marign纵向重叠的问题"></a>2.marign纵向重叠的问题</h2><blockquote>
<p>margin重叠是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界</p>
<p>比如就有以下的问题：</p>
</blockquote>
<h3 id="计算第一行和最后一行之间的距离"><a href="#计算第一行和最后一行之间的距离" class="headerlink" title="计算第一行和最后一行之间的距离"></a>计算第一行和最后一行之间的距离</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>末行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>中间的空着的p都没了 ，因为没有高度</p>
<p>最后一行和 第一行之间的距离是 <code>20px</code></p>
<p>因为在<code>margin</code>纵向会有重叠</p>
</blockquote>
<p>计算方法:</p>
<ul>
<li><p>全部都为正值，取最大者；</p>
</li>
<li><p>不全是正值，则都取绝对值，然后用正值的最大值减去绝对值的最大值；</p>
</li>
</ul>
<h2 id="3-margin负值"><a href="#3-margin负值" class="headerlink" title="3.margin负值"></a>3.margin负值</h2><ul>
<li><code>margin-top``margin-left</code>负值，元素向上、向左移动</li>
<li><code>margin-right</code> 负值 ，右侧元素左移(“后续元素”会被拉向指定方向)，元素自身不变</li>
<li><code>margin-bottom</code> 负值，右侧元素上移动(“后续元素”会被拉向指定方向), 元素自身不变</li>
</ul>
<h2 id="4-BFC"><a href="#4-BFC" class="headerlink" title="4.BFC"></a>4.BFC</h2><blockquote>
<p>全称：<code>Block Formatting Context</code>， 名为 “块级格式化上下文”。</p>
<p><code>BFC</code>是一个完全独立的空间（一块独立的渲染区域），让空间里的子元素不会影响到外面的布局</p>
</blockquote>
<h3 id="BFC规则"><a href="#BFC规则" class="headerlink" title="BFC规则"></a>BFC规则</h3><ul>
<li><code>BFC</code>就是一个块级元素，块级元素会在垂直方向一个接一个的排列</li>
<li><code>BFC</code>就是页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签</li>
<li>垂直方向的距离由margin决定， 属于同一个<code>BFC</code>的两个相邻的标签外边距会发生重叠</li>
<li>计算<code>BFC</code>的高度时，浮动元素也参与计算</li>
</ul>
<h3 id="形成BFC常见条件"><a href="#形成BFC常见条件" class="headerlink" title="形成BFC常见条件"></a>形成BFC常见条件</h3><ul>
<li><code>float</code> 不为 <code>none</code></li>
<li><code>position</code> 为 <code>absolute``fixed</code></li>
<li><code>overflow</code> 不是 <code>visible</code></li>
<li><code>display</code> 为 <code>flex``inline-block``table-cell</code>等</li>
</ul>
<blockquote>
<p>常用的情景 <code>清除浮动``margin重叠</code></p>
</blockquote>
<h2 id="5-float布局"><a href="#5-float布局" class="headerlink" title="5.float布局"></a>5.float布局</h2><blockquote>
<p>双飞翼布局 和 圣杯布局是PC端的经典布局了</p>
<p>两侧的宽度写死，中间的宽度自适应</p>
<p>公共结构如下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>公共样式</p>
<p>给<code>main</code>设置<code>width: 100%</code>,让它始终占满窗口，这样才有自适应的效果。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">550px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30vh</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3f906d5913046d194503a0a44bbbc70~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707110318546.png"></p>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><blockquote>
<p>为三个元素的父元素加上<code>padding</code>属性，腾开位置</p>
</blockquote>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30vh</span>;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>left要放到main的左边，设置<code>margin-left: -100%</code>,因为<code>margin</code>的百分比是相对与父元素的，所以需要整整一行的宽度才能补偿这个margin的值，所以left就能到main的位置。</p>
<p>然后再通过相对定位 right自身的宽度就到了最左边</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>right到main的右边，比如<code>margin-right: -200px;</code>，正好使main重叠right的宽度，因为设置了浮动所以right就会到main的右边了。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: -<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2454581fc9c54b79b36a65a13cf243eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707113141261.png"></p>
<h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>双飞翼布局需要更改下布局，因为main设置了100% ,不能直接给main设置margin</p>
<blockquote>
<p>样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">      <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">550px</span>;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">500px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30vh</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79b360649a7746c8b7c4812ec2434b11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707114727855.png"></p>
<blockquote>
<p>再创造一个内容层，将所有要显示的内容放到<code>wrap</code>中，给<code>wrap</code>设置<code>margin</code>就可以了</p>
<p>left要放到main的左边，设置<code>margin-left: -100%</code>,因为<code>margin</code>的百分比是相对与父元素的，所以需要整整一行的宽度才能补偿这个margin的值，所以left就能到main的左边。</p>
<p>接着让right到main的右边，只需要设置<code>margin-left</code>的值为负的right的宽，比如<code>margin-left: -200px;</code>，正好使main重叠right的宽度，因为设置了浮动所以right就会到main的右边了。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95249ccd36fd433da550d0b970518147~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707115153416.png"></p>
<h3 id="使用-flex也可以达到效果"><a href="#使用-flex也可以达到效果" class="headerlink" title="使用 flex也可以达到效果"></a>使用 flex也可以达到效果</h3><blockquote>
<p>css样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>html结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1266420a5def4c099915268a2f697a50~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210712104451124"></p>
<h3 id="使用定位来实现"><a href="#使用定位来实现" class="headerlink" title="使用定位来实现"></a>使用定位来实现</h3><blockquote>
<p>最常使用的是定位来实现</p>
<p>css样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构和上面一样</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b4aaf02bb14a789b34f660da77eabf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210712111146802"></p>
<h2 id="6-手写clearfix"><a href="#6-手写clearfix" class="headerlink" title="6.手写clearfix"></a>6.手写clearfix</h2><blockquote>
<p>一般的话有的时候会要求10s左右 手写clearfix ，写的时候最好熟练不要犹豫</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span> : table;</span><br><span class="line">    <span class="attribute">clear</span> : both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-flex实现一个三点的色子"><a href="#7-flex实现一个三点的色子" class="headerlink" title="7.flex实现一个三点的色子"></a>7.flex实现一个三点的色子</h2><h3 id="flex基础的语法"><a href="#flex基础的语法" class="headerlink" title="flex基础的语法"></a>flex基础的语法</h3><p>介绍几个常用的</p>
<p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<ul>
<li><code>row</code> 表示从左向右排列</li>
<li><code>row-reverse</code> 表示从右向左排列</li>
<li><code>column</code> 表示从上向下排列</li>
<li><code>column-reverse</code> 表示从下向上排列</li>
</ul>
<p><code>flex-wrap</code>可以让Flex项目换行排列。</p>
<ul>
<li><code>nowrap</code>(缺省)：所有Flex项目单行排列</li>
<li><code>wrap</code>：所有Flex项目多行排列，按从上到下的顺序</li>
<li><code>wrap-reverse</code>：所有Flex项目多行排列，按从下到上的顺序</li>
</ul>
<p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p>
<p><code>justify-content</code>属性定义了项目在主轴上的对齐方式及额外空间的分配方式。</p>
<ul>
<li><code>flex-start</code>(缺省)：从启点线开始顺序排列</li>
<li><code>flex-end</code>：相对终点线顺序排列</li>
<li><code>center</code>：居中排列</li>
<li><code>space-between</code>：项目均匀分布，第一项在启点线，最后一项在终点线</li>
<li><code>space-around</code>：项目均匀分布，每一个项目两侧有相同的留白空间，相邻项目之间的距离是两个项目之间留白的和</li>
<li><code>space-evenly</code>：项目均匀分布，所有项目之间及项目与边框之间距离相等</li>
</ul>
<p><code>align-items</code>属性定义项目在交叉轴上的对齐方式。</p>
<ul>
<li><code>stretch</code>(缺省)：交叉轴方向拉伸显示</li>
<li><code>flex-start</code>：项目按交叉轴起点线对齐</li>
<li><code>flex-end</code>：项目按交叉轴终点线对齐</li>
<li><code>center</code>：交叉轴方向项目中间对齐</li>
<li><code>baseline</code>：交叉轴方向按第一行文字基线对齐</li>
</ul>
<p><code>align-content</code>属性定义了在交叉轴方向的对齐方式及额外空间分配，类似于主轴上<code>justify-content</code>的作用。</p>
<ul>
<li><code>stretch</code> (缺省)：拉伸显示</li>
<li><code>flex-start</code>：从启点线开始顺序排列</li>
<li><code>flex-end</code>：相对终点线顺序排列</li>
<li><code>center</code>：居中排列</li>
<li><code>space-between</code>：项目均匀分布，第一项在启点线，最后一项在终点线</li>
<li><code>space-around</code>：项目均匀分布，每一个项目两侧有相同的留白空间，相邻项目之间的距离是两个项目之间留白</li>
</ul>
<h3 id="来实现一个三点的色了-简单"><a href="#来实现一个三点的色了-简单" class="headerlink" title="来实现一个三点的色了(简单)"></a>来实现一个三点的色了(简单)</h3><blockquote>
<p>实现的思路就是使用flex布局。主轴是<code>space-between</code>。</p>
<p>第2个点交叉轴方向是居中对齐。 第3个点项目按交叉轴终点线对齐。</p>
<p>结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>样式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">      <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.item</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">210</span>, <span class="number">225</span>, <span class="number">228</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="attribute">align-self</span>: center;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/881c5ed898de4ea3addde083f9bf757e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707122433924.png"></p>
<h2 id="8-定位"><a href="#8-定位" class="headerlink" title="8.定位"></a>8.定位</h2><blockquote>
<p>absolute relative fixed 相对什么定位</p>
</blockquote>
<ul>
<li><code>static</code>默认的position值,无特殊定位，遵循标准文档流</li>
<li><code>relative</code>相对于自身定位 ，但是还是占据原来的空间，同时可通过<code>z-index</code>定义层叠关系。</li>
<li><code>absolute</code> 相对于该元素最近的已定位的祖先元素，如果没有一个祖先元素设置定位，那么参照物是<code>body</code>层。不占据原来的空间，同时可通过<code>z-index</code>定义层叠关系。</li>
<li><code>fixed</code>相对于浏览器窗口进行固定定位，同时可通过<code>z-index</code>定义层叠关系。如果他的祖先元素有<code>transform</code>这个属性，它会参考他做固定定位</li>
</ul>
<h2 id="9-居中对齐的实现方式"><a href="#9-居中对齐的实现方式" class="headerlink" title="9.居中对齐的实现方式"></a>9.居中对齐的实现方式</h2><blockquote>
<p>水平居中</p>
</blockquote>
<ul>
<li><code>inline</code> 元素 : <code>text-align : center</code></li>
<li><code>block</code> 元素 : <code>margin : auto</code></li>
<li><code>absolute</code> 元素 : <code>left : 50%</code> + <code>margin-left</code> 负自身的一半</li>
</ul>
<blockquote>
<p>垂直居中</p>
</blockquote>
<ul>
<li><code>inline</code> 元素 ：<code>line-heigth</code> 等于 <code>height</code></li>
<li><code>absolute</code> 元素 ： <code>top : 50%</code> + <code>margin-top</code> 负自身的一半 或 <code>transform (-50%,-50%)</code></li>
<li><code>absolute</code> 元素 : <code>top, buttom, left, right = 0</code> + <code>margin : auto</code></li>
</ul>
<blockquote>
<p>flex 父盒子设置</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>table-cell 这个是针对 不是盒子的元素居中，但是可以把里面的盒子<code>display:inline-block</code></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: table-cell;</span><br><span class="line"> <span class="attribute">vertical-align</span>: middle;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-line-height继承"><a href="#10-line-height继承" class="headerlink" title="10.line-height继承"></a>10.line-height继承</h2><ul>
<li>写具体数值，如30px，则继承该值(比较好理解)</li>
<li>写比例，如2/ 1.5 ,则继承该比例(比较好理解)</li>
<li>写百分比， 如200% ,则继承计算出来的值(考点)</li>
</ul>
<blockquote>
<p>比如这么一道题 求p的行高</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;<span class="selector-tag">text</span>/css&quot;&gt;</span><br><span class="line">      <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">200%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是百分比的话，他会先乘起来再继承 16*200%</p>
<p>如果是数字。直接继承，用自己的fontsize*数字</p>
</blockquote>
<h2 id="11-rem-是什么"><a href="#11-rem-是什么" class="headerlink" title="11.rem 是什么"></a>11.rem 是什么</h2><blockquote>
<p>rem是一个长度单位</p>
</blockquote>
<ul>
<li>px,绝对长度单位,最常用</li>
<li>em ,相对长度单位,相对于父元素,不常用</li>
<li>rem ,相对长度单位，相对于根元素，常用于响应式布局</li>
</ul>
<h2 id="12-响应式布局的常用方案"><a href="#12-响应式布局的常用方案" class="headerlink" title="12.响应式布局的常用方案"></a>12.响应式布局的常用方案</h2><ul>
<li>media-query ,根据不同的屏幕宽度设置根元素font-size</li>
<li>rem，基于根元素的相对单位</li>
</ul>
<h2 id="13-rem的弊端-“阶梯”性"><a href="#13-rem的弊端-“阶梯”性" class="headerlink" title="13.rem的弊端:“阶梯”性"></a>13.rem的弊端:“阶梯”性</h2><blockquote>
<p>像下面的媒体查询 ,就比如中间的375~413 ，当屏幕的宽度达到376,378<code>font-size</code>还是100px，不会实时变化</p>
<p>除非超过了这个范围</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@media only screen and (max-width: 374px) &#123;</span><br><span class="line">        /\* iphone5 或者更小的尺寸，以iphone5 的宽度(320px)比例设置font-size */</span><br><span class="line">        html &#123;</span><br><span class="line">          font-size: 86px;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (min-width: 375px) and (max-width: 413px) &#123;</span><br><span class="line">        /\* iphone6/7/8和iphone X */</span><br><span class="line">        html &#123;</span><br><span class="line">          font-size: 100px;</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">@media only screen and (min-width: 414px) &#123;</span><br><span class="line">        /\* iphone6p 或者更大的尺寸，以iphone6p 的宽度(414px) 比例设置font-size */</span><br><span class="line">        html &#123;</span><br><span class="line">          font-size: 110px;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="14-网页视口尺寸"><a href="#14-网页视口尺寸" class="headerlink" title="14.网页视口尺寸"></a>14.网页视口尺寸</h2><blockquote>
<p>网页视口尺寸</p>
</blockquote>
<ul>
<li><code>window.screen.height</code> // 屏幕高度</li>
<li><code>window.innerHeight</code> // 网页视口高度</li>
<li><code>document.body.clientHeight</code> // body高度</li>
</ul>
<blockquote>
<p>vw/vh</p>
</blockquote>
<ul>
<li><code>vh</code>网页视口高度的1/100</li>
<li><code>vw</code>网页视口宽度的1/100</li>
<li><code>vmax</code>取两者最大值; <code>vmin</code>取两者最小值</li>
</ul>
<h2 id="15-重绘和回流"><a href="#15-重绘和回流" class="headerlink" title="15.重绘和回流"></a>15.重绘和回流</h2><blockquote>
<p><strong>重绘</strong>：指的是当页面中的元素不脱离文档流，而简单地进行样式的变化，比如修改颜色、背景等， 浏览器重新绘制样式<strong>回流</strong>：指的是处于文档流中 <code>DOM</code> 的尺寸大小、位置或者某些属性发生变化时，导致浏览器重新渲 染部分或全部文档的情况</p>
</blockquote>
<p>相比之下，回流要比重绘消耗性能开支更大。另外，一些属性的读取也会引起回流，比如读取某个 DOM 的高度和宽度，或者使用 getComputedStyle 方法。</p>
<h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><blockquote>
<p>JS基础知识,规定语法(ECMA262标准)</p>
<p>JSWebAPI，网页操作的API(W3C标准)</p>
<p>前者是后者的基础，两者结合才能真正实际应用</p>
</blockquote>
<h2 id="1-class-和-继承"><a href="#1-class-和-继承" class="headerlink" title="1.class 和 继承"></a>1.class 和 继承</h2><blockquote>
<p>简单的回顾下<code>class``constructor``属性``方法</code> 注：<code>class是ES6语法</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span> = number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>我会学习`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">number</span>)</span><br><span class="line">zhangsan.<span class="title function_">skill</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>继承 <code>extends``super``扩展或重写方法</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 特能吃`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, number</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name + <span class="string">&#x27;【法外狂徒】&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span> = number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>我会学习`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhangsan.<span class="property">number</span>)</span><br><span class="line">zhangsan.<span class="title function_">skill</span>()</span><br><span class="line">zhangsan.<span class="title function_">eat</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>typeof Student</code> “function”<code>typeof People</code> “function”</p>
<p>由此可见 <code>class</code> 也是 <code>function</code></p>
</blockquote>
<h2 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2.变量类型"></a>2.变量类型</h2><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><blockquote>
<p>注意：原始类型不包含 Object。</p>
<p>ECMAScript 中定义了 6 种原始类型：</p>
</blockquote>
<ul>
<li>Boolean</li>
<li>String</li>
<li>Number</li>
<li>Null</li>
<li>Undefined</li>
<li>Symbol（ES6 新定义）</li>
</ul>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof 可以判断以下几种类型：</p>
<ul>
<li>undefined</li>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>object</li>
<li>function</li>
<li>symbol</li>
</ul>
<blockquote>
<p>注意：</p>
<p><code>typeof null</code> 结果是 <code>object</code> ，实际这是 typeof 的一个bug，null是原始值，非引用类型</p>
<p><code>typeof 数组</code> 结果是 <code>object</code> ，结果中没有 <code>array</code> 这一项，引用类型除了 <code>function</code> 其他的全 部都是 <code>object</code></p>
<p><code>typeof Symbol()</code> 用 <code>typeof</code> 获取 <code>symbol</code> 类型的值得到的是 <code>symbol</code> ，这是 ES6 新增的知识点</p>
</blockquote>
<h3 id="类型判断-instanceof"><a href="#类型判断-instanceof" class="headerlink" title="类型判断 - instanceof"></a>类型判断 - instanceof</h3><blockquote>
<p>instanceof 是基于原型链查找</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">zhangsan <span class="keyword">instanceof</span> <span class="title class_">Student</span></span><br><span class="line"></span><br><span class="line">zhangsan <span class="keyword">instanceof</span> <span class="title class_">People</span></span><br><span class="line"></span><br><span class="line">zhangsan <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line">\[\] <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"></span><br><span class="line">\[\] <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br></pre></td></tr></table></figure>
<h2 id="3-原型"><a href="#3-原型" class="headerlink" title="3.原型"></a>3.原型</h2><blockquote>
<p>原型</p>
</blockquote>
<p>原型就是一个对象，实例“继承”那个对象的属性。在原型上定义的属性，通过“继承”，实例也拥有了这个属性。“继承”这个行为是在 new 操作符内部实现的。</p>
<p>构造函数内部有一个名为 prototype 的属性，通过这个属性就能访问到原型</p>
<blockquote>
<p>隐式原型 显示原型</p>
<p><code>Student</code>就是构造函数，<code>Student.prototype</code> 就是原型</p>
<p>实例通过 <code>\_\_proto\_\_</code> 访问到原型</p>
<p>所以这两者是等价的：</p>
</blockquote>
<ul>
<li><code>zhangsan.prototype</code> 显式原型</li>
<li><code>zhangsan.\_\_proto\_\_</code>隐式原型</li>
<li><code>zhangsan.prototype</code> === <code>zhangsan.\_\_proto\_\_</code></li>
</ul>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d08a5a679b8040f2b33803500209564c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707135253242.png"></p>
<h2 id="4-原型链"><a href="#4-原型链" class="headerlink" title="4.原型链"></a>4.原型链</h2><blockquote>
<p>原型链</p>
</blockquote>
<p>原型里面也有个<code>\_\_proto\_\_</code>属性，原型可以通过这个属性访问到原型它自己的原型</p>
<p>举个栗子</p>
<p><code>Student</code> 的一个实例 <code>zhangsan</code> ，当调用它的一个属性或者方法时，他自身没有这个方法或者属性，它就通过<code>\_\_proto\_\_</code>来进行访问原型看看原型上有无该属性和方法，有的话就能直接使用，没有就查找原型的<code>\_\_proto\_\_</code>也就是原型的原型继续找有没有该属性或者方法直到最顶层为<code>null</code>为止，没有查找到就是不存在</p>
<p>这种不断向上搜索形成的链状关系我们就称为原型链</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c854a540c674c2cb21c6fdc85b276fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707165624028"></p>
<h2 id="5-如何准确的判断一个变量是数组"><a href="#5-如何准确的判断一个变量是数组" class="headerlink" title="5.如何准确的判断一个变量是数组"></a>5.如何准确的判断一个变量是数组</h2><blockquote>
<p>显然通过 <code>typeof \[\]</code>判断不能得到想要的结果 “object”</p>
<p>常用的方法就是instanceof 基于原型链查找的方式进行判断</p>
<p>还有就是通过Object.prototype.toString进行判断</p>
</blockquote>
<ul>
<li><code>\[\] instanceof Array</code> 结果 ：<code>true</code></li>
<li><code>Object.prototype.toString.call(\[\])</code> 结果： <code>&quot;\[object Array\]&quot;</code></li>
</ul>
<h2 id="6-手写简易的jQuery-考虑插件和扩展性"><a href="#6-手写简易的jQuery-考虑插件和扩展性" class="headerlink" title="6.手写简易的jQuery 考虑插件和扩展性"></a>6.手写简易的jQuery 考虑插件和扩展性</h2><blockquote>
<p>写个简单的html等下使用</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先先简单的写个jQuery</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jQuery</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector)</span><br><span class="line">        <span class="keyword">const</span> lenght = result.<span class="property">length</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">this</span>\[i\] = result\[i\]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lenght</span> = lenght</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selector</span> = result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>\[index\]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">each</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">lenght</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> ele = <span class="variable language_">this</span>\[i\]</span><br><span class="line">            <span class="title function_">fn</span>(ele)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">            ele.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dialog</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;这是一个dialog&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">$</span> = (<span class="params">selector</span>) =&gt; <span class="keyword">new</span> <span class="title function_">jQuery</span>(selector)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$().<span class="title function_">dialog</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以继续造轮子</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myJQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">jQuery</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(selector)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">css</span>(<span class="params">json</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> json) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">                ele.<span class="property">style</span>\[key\] = json\[key\]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">myJQuery</span>(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="7-作用域和闭包"><a href="#7-作用域和闭包" class="headerlink" title="7.作用域和闭包"></a>7.作用域和闭包</h2><blockquote>
<p>简单来说，<strong>作用域</strong> 指程序中定义变量的区域，它决定了当前执行代码对变量的访问权限。</p>
<p>由于作用域的限制，每段独立的执行代码块只能访问自己作用域和外层作用域中的变量，无法访问到内层作用域的变量。</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/883328d851964552920b41db24f7b224~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210707195902417"></p>
<p><code>javascript</code> 中大部分情况下，只有两种作用域类型：</p>
<ul>
<li><strong>全局作用域</strong>：全局作用域为程序的最外层作用域，一直存在。</li>
<li><strong>函数作用域</strong>：函数作用域只有函数被定义时才会创建，包含在父级函数作用域 / 全局作用域内。</li>
</ul>
<blockquote>
<p>自由变量</p>
</blockquote>
<ul>
<li>一个变量在当前作用域没有定义，但被使用了</li>
<li>向上级作用域，一层一层依次寻找，直至找到为止</li>
<li>如果到全局作用域都没找到,则报错Xx is not defined</li>
</ul>
<blockquote>
<p>作用域链</p>
</blockquote>
<p>如果当前作用域中的使用的自由变量没有定义，就会向外层作用域中寻找，如果外层没有就继续一直寻找下去，如果全局作用域都没有就是没有报错 <code>ReferenceError</code>这种不断向上搜索形成的链状关系称为作用域链</p>
<blockquote>
<p>块级作用域</p>
</blockquote>
<p><code>ES6</code> 标准提出了使用 <code>let</code> 和 <code>const</code> 代替 <code>var</code> 关键字，来“创建块级作用域”</p>
<p>简单来说，花括号内 <code>&#123;...&#125;</code> 的区域就是块级作用域区域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>作用域的一个常见运用场景之一，就是 <strong>模块化</strong>。 全局作用域污染和变量名冲突，代码结构臃肿且复用性不高。</p>
<p>闭包: 能够访问其他函数内部变量的函数，被称为 <strong>闭包</strong>。</p>
<p>是作用域应用的特殊情况</p>
<p>有两种表现:函数作为<strong>参数被传递函数</strong> 和 <strong>作为返回值被返回</strong></p>
<p>应用场景: 大多数是在需要维护内部变量的场景下。</p>
<p>例子一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span></span><br><span class="line"><span class="title function_">test</span>()()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">30</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="number">100</span></span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>(fun)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>所有的自由变量的查找，是在函数定义的地方，向上级作用域查找**</strong>不是在执行的地方!**</p>
<p>由于闭包使用过度而导致的内存占用无法释放的情况，我们称之为：<strong>内存泄露</strong>。</p>
</blockquote>
<h2 id="8-this"><a href="#8-this" class="headerlink" title="8.this"></a>8.this</h2><blockquote>
<p>this取什么值是在函数执行的时候确定不是定义的时候确定</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"></span><br><span class="line">fn1.<span class="title function_">call</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;)</span><br><span class="line">fn1.<span class="title function_">bind</span>(&#123; <span class="attr">b</span>: <span class="number">2</span> &#125;)()</span><br></pre></td></tr></table></figure>
<ol>
<li>普通函数中：this-&gt;window</li>
<li>定时器中：this-&gt;window</li>
<li>构造函数中：this-&gt;当前实例化的对象</li>
<li>事件处理函数中：this-&gt;事件触发对象</li>
<li>在 js 中一般理解就是谁调用这个 this 就指向谁</li>
</ol>
<h2 id="9-创建10个-a-标签，点击的时候弹出对应的序号"><a href="#9-创建10个-a-标签，点击的时候弹出对应的序号" class="headerlink" title="9.创建10个 a 标签，点击的时候弹出对应的序号"></a>9.创建10个 a 标签，点击的时候弹出对应的序号</h2><blockquote>
<p>考察块级作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    a.<span class="property">innerHTML</span> = i + <span class="string">&#x27;&lt;br&gt;&#x27;</span></span><br><span class="line">    a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        <span class="title function_">alert</span>(i)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-实际开发中闭包的应用"><a href="#10-实际开发中闭包的应用" class="headerlink" title="10.实际开发中闭包的应用"></a>10.实际开发中闭包的应用</h2><blockquote>
<p>隐藏数据 只提供API 保证数据安全</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">key, val</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data, key, val)</span><br><span class="line">            data\[key\] = val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data\[key\]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">createCache</span>()</span><br><span class="line">c.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;haha &#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="11-手写call-apply-bind函数"><a href="#11-手写call-apply-bind函数" class="headerlink" title="11.手写call,apply,bind函数"></a>11.手写call,apply,bind函数</h2><h3 id="手写call-apply-bind-比较基础"><a href="#手写call-apply-bind-比较基础" class="headerlink" title="手写call,apply,bind 比较基础"></a>手写call,apply,bind 比较基础</h3><blockquote>
<p>手写<code>call</code> ，<code>call</code>的性能比 <code>apply</code>高</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call1</span> = <span class="keyword">function</span> (<span class="params">obj, ...args</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context = obj</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line">  context\[fn\] = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = context\[fn\](...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context\[fn\]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">base</span> + num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum.<span class="title function_">call1</span>(obj, <span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手写<code>apply</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply1</span> = <span class="keyword">function</span> (<span class="params">obj, args</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context = obj</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line">  context\[fn\] = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = context\[fn\](...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context\[fn\]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">base</span> + num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum.<span class="title function_">apply1</span>(obj, \[<span class="number">100</span>, <span class="number">200</span>\])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手写<code>bind</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mybind</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> myThis = args.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(myThis, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, a + b)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">mybind</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="number">1</span>, <span class="number">2</span>)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>手写完整的<code>bind</code> 支持<code>new</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span>(<span class="params">OThis, ...outherArgs</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> thatFunc = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> fBind = <span class="keyword">function</span>(<span class="params">...innerArgs</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thisFunc.<span class="title function_">apply</span>(</span><br><span class="line">        	<span class="variable language_">this</span> <span class="keyword">instanceof</span> thatFunc ? <span class="variable language_">this</span> : <span class="title class_">OThis</span>, \[...outherArgs, ...innerArgs\]</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fBind.<span class="property">prototeye</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(thatFunc.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBind</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1.<span class="property">call</span>.<span class="title function_">call</span>(fn2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn1.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="property">call</span>.<span class="title function_">call</span>(fn2)</span><br></pre></td></tr></table></figure>
<h2 id="12-异步"><a href="#12-异步" class="headerlink" title="12.异步"></a>12.异步</h2><blockquote>
<p><code>JS</code>是单线程语言，只能同时做一件事儿</p>
<p>浏览器和<code>nodejs</code>已支持JS启动进程，如<code>Web Worker</code></p>
<p><code>JS</code>和<code>DOM</code>渲染共用同一个线程,因为<code>JS</code>可修改<code>DOM</code>结构</p>
</blockquote>
<p>因为是单线程</p>
<p>遇到等待(网络请求,定时任务)不能卡住,需要异步,采用了回调callback函数形式</p>
<blockquote>
<p>同步和异步</p>
</blockquote>
<ul>
<li>基于JS是单线程语言</li>
<li>异步不会阻塞代码执行</li>
<li>同步会阻塞代码执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>)</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>应用场景 ：</p>
</blockquote>
<p>网络请求, 比如ajax图片加载</p>
<p>定时任务,比如 setTimeout</p>
<h2 id="13-callback-hell-回调地狱"><a href="#13-callback-hell-回调地狱" class="headerlink" title="13.callback hell 回调地狱"></a>13.callback hell 回调地狱</h2><blockquote>
<p>比如这个例子，一直往下面嵌套（函数作为参数层层嵌套）</p>
</blockquote>
<p>回调地狱最主要的就是因为功能逻辑代码嵌套的层次太多,导致可读性降低,维护困难,避免回调地狱的最重要的方面是将功能移开,保持代码简单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url1, <span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>. <span class="title function_">log</span>(datal)</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">get</span>(url2，(data2) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>. <span class="title class_">Log</span>(data2)</span><br><span class="line"></span><br><span class="line">        $.<span class="title function_">get</span>(url3, <span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>. <span class="title function_">log</span>(data3)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="14-Promise"><a href="#14-Promise" class="headerlink" title="14.Promise"></a>14.Promise</h2><blockquote>
<p><strong>Promise</strong>:是编写异步代码的一种方式，它仍然以自顶向下的方式执行，并且由于鼓励使用try / catch样式错误处理而处理更多类型的错误</p>
<p><strong>Promise</strong>解决了回调地狱<strong>嵌套</strong>的问题</p>
</blockquote>
<h3 id="1-一个简单的Promise例子"><a href="#1-一个简单的Promise例子" class="headerlink" title="1.一个简单的Promise例子"></a>1.一个简单的Promise例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            url,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(data)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> url1 = <span class="string">&#x27;/data1.json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> ur12 = <span class="string">&#x27;/data2.json&#x27;</span></span><br><span class="line"><span class="keyword">const</span> url3 = <span class="string">&#x27;/data3.json&#x27;</span></span><br><span class="line"><span class="title function_">getData</span>(url1)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getData</span>(url2)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getData</span>(url3)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data3)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err))</span><br></pre></td></tr></table></figure>
<h3 id="2-手写用Promise加载一张图片"><a href="#2-手写用Promise加载一张图片" class="headerlink" title="2.手写用Promise加载一张图片"></a>2.手写用Promise加载一张图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123; img, <span class="attr">msg</span>: <span class="string">&#x27;图片加载成功&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;img.src&#125;</span>图片加载失败`</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        img.<span class="property">src</span> = url</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadImg</span>(<span class="string">&#x27;./img/2.jpg&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(res.<span class="property">img</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9c18a58b6754e089e07aae1f9fd9091~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708110216819"></p>
<h2 id="15-event-loop（事件循环）"><a href="#15-event-loop（事件循环）" class="headerlink" title="15.event loop（事件循环）"></a>15.event loop（事件循环）</h2><blockquote>
<p>异步和事件循环的关系</p>
</blockquote>
<ul>
<li>JS是单线程运行的</li>
<li>异步要基于回调来实现</li>
<li>event loop就是异步回调的实现原理</li>
</ul>
<blockquote>
<p>JS代码是如何执行的</p>
</blockquote>
<ul>
<li>从前到后,一行一-行执行</li>
<li>如果某一行执行报错，则停止下面代码的执行</li>
<li>先把同步代码执行完，再执行异步</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title class_">Log</span>(<span class="string">&#x27;cb1&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">5000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Bye&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>事件循环过程（还没涉及宏任务/微任务）</p>
</blockquote>
<ol>
<li>同步代码,一行一 行放在<code>Call Stack</code>执行(同步任务在栈里压栈弹栈执行)</li>
<li>遇到异步,会先“记录”下,等待时机(定时、网络请求等)</li>
<li>时机到了,就移动到<code>Callback Queue</code>(回调队列)</li>
<li>如<code>Call Stack</code>为空(即同步代码执行完) <code>Event Loop</code>开始工作</li>
<li>轮询查找<code>Callback Queue</code>(回调队列) , 如有则移动到<code>Call Stack</code>执行</li>
<li>然后继续轮询查找(永动机一样)</li>
</ol>
<blockquote>
<p>自己画的图，不对的地方请多多指教</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aacb9edfd8684117a03660dcd4a7ce01~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708121124506"></p>
<h2 id="16-Promise状态"><a href="#16-Promise状态" class="headerlink" title="16.Promise状态"></a>16.Promise状态</h2><blockquote>
<p>三种状态</p>
</blockquote>
<ul>
<li><code>pending</code> 不会触发then和catch</li>
<li><code>resolved</code> 会触发后续的then回调函数</li>
<li><code>rejected</code> 会触发后续的catch回调函数</li>
</ul>
<blockquote>
<p>状态的表现 和 变化 （<strong>变化是不可逆的</strong>）</p>
</blockquote>
<p><code>pending</code>一> <code>resolved</code> 或 <code>pending</code>一> <code>rejected</code></p>
<blockquote>
<p><code>then</code> 和 <code>catch</code> 对状态的影响(重要)</p>
</blockquote>
<ul>
<li><code>then</code>正常返回<strong>resolved</strong>， 里面有报错则返回<strong>rejected</strong></li>
<li><code>catch</code>正常返回<strong>resolved</strong>，里面有报错则返回<strong>rejected</strong></li>
</ul>
<blockquote>
<p>then和catch的链式调用(常考)</p>
<p>网上的promise习题很多的，我这里就编一个简单点的，最后打印的结果</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;err&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;then error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;200&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;300&#x27;</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;400&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;500&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;600&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最后打印 的是 <code>100 300 500 600</code></p>
<blockquote>
<p>网上扒两个简单的</p>
<p>例题1</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;erro1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>打印的是 <code>1 2 3</code></p>
<blockquote>
<p>例题2</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;erro1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>打印的是 <code>1 2</code></p>
<blockquote>
<p>网上的例题很多哈，大家有点时候可以多练习</p>
</blockquote>
<h2 id="17-async-await"><a href="#17-async-await" class="headerlink" title="17.async / await"></a>17.async / await</h2><blockquote>
<p><code>async</code> / <code>await</code> 和 异步回调<code>callback hell</code></p>
</blockquote>
<ul>
<li><code>Promise</code><strong>then**</strong>catch**链式调用,但也是基于回调函数</li>
<li><code>async</code>/ <code>await</code>是同步语法,<strong>彻底消灭</strong>异步回调的终极武器</li>
<li>但和<code>Promise</code>并不互斥 ,反而,两者相辅相成</li>
</ul>
<blockquote>
<p><code>async</code> / <code>await</code> 和 <code>Promise</code>的关系</p>
</blockquote>
<ul>
<li>执行<code>async</code>函数，返回的是<strong>Promise</strong>对象</li>
<li><code>await</code>相当于<code>Promise</code>的<strong>then</strong></li>
<li><code>try...catch</code>可捕获异常，代替了<code>Promise</code> 的<strong>catch</strong></li>
</ul>
<blockquote>
<p>下面几个例子</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">300</span>)</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> p1</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> datal = <span class="keyword">await</span> <span class="number">400</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;datal&#x27;</span>, datal)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">500</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">fn1</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data2&#x27;</span>, data2)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> p4</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(ex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>异步的本质</p>
</blockquote>
<ul>
<li><code>async</code>/ <code>await</code>是消灭异步回调的终极武器</li>
<li>JS还是单线程,还得是有异步,还得是基于<code>event loop</code></li>
<li><code>async/await</code>只是一个语法糖，但这颗糖真香!</li>
</ul>
<blockquote>
<p>结合事件循环做两个例题</p>
<p>例题一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果打印的是 ：</p>
<p><code>script start</code></p>
<p><code>async1 start</code></p>
<p><code>async2</code></p>
<p><code>script end</code></p>
<p><code>async1 end</code></p>
<blockquote>
<p>例题二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async3</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end 2&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async3&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async1</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>打印的结果如下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2b03b35bddd4755b02c97715c665352~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708141256573"></p>
<h2 id="18-for-…-of"><a href="#18-for-…-of" class="headerlink" title="18.for … of"></a>18.for … of</h2><blockquote>
<p><code>for .. in</code> (以及<code>forEach``for</code> )是常规的同步遍历</p>
<p><code>for .. of</code>常用于异步的遍历</p>
<p>用个例子来说明两个的区别</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(item * item)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = \[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>\]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="title function_">async</span> (i) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">test</span>(i))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上面的例子，使用同步遍历的时候 是在1000ms后全部把结果打印出来了，而不是隔一秒打印</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/862ef534afc741f3a7de6836114d8905~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1"></p>
<blockquote>
<p>使用<code>for ... of</code> 遍历</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(item * item)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = \[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>\]</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">test</span>(item))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>使用<code>for...of</code> 遍历会 1000ms 打印一次</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f87e9d7e03244fe2839ff251a500da39~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="2"></p>
<h2 id="19-宏任务-微任务"><a href="#19-宏任务-微任务" class="headerlink" title="19.宏任务/微任务"></a>19.宏任务/微任务</h2><blockquote>
<p>简单介绍:</p>
<p>微任务和宏任务皆为<strong>异步任务</strong>，它们都属于一个队列，主要区别在于他们的<strong>执行顺序</strong></p>
</blockquote>
<ul>
<li>宏任务: setTimeout，setInterval，Ajax，DOM事件</li>
<li>微任务: Promise async/await</li>
<li>微任务执行时机比宏任务要早</li>
</ul>
<blockquote>
<p>先来个简单的demo</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>结果：<code>1 4 3 2</code></p>
<blockquote>
<p>说下DOM渲染</p>
</blockquote>
<ul>
<li>JS是单线程的，而且和DOM渲染共用一个线程</li>
<li>JS执行的时候，得留一-些时机供DOM渲染</li>
<li>每次Call Stack（执行栈）清空(即每次轮询结束)， 即同步任务执行完</li>
<li>都是DOM重新渲染的机会，DOM结构如有改变则重新渲染</li>
<li>然后再去触发下一次Event Loop（事件循环）</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2ed3e9cb47a43658ca6dabdbe18e295~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708144736486"></p>
<blockquote>
<p>宏任务: DOM渲染后触发,如<code>setTimeout</code></p>
<p>微任务: DOM渲染前触发，如<code>Promise</code></p>
<p>微任务是ES6语法规定的</p>
<p>宏任务是由浏览器规定的</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/429bc6b1d7cc4058abebbfd479169785~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708145221088"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b7801ad56014aec9b9203c5f4443af5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708145248926"></p>
<blockquote>
<p>在<strong>事件循环</strong>中 <code>宏任务</code>/<code>微任务</code> 之间的关系</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b4305b9bab247d988372ccc04788e4f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708151152089"></p>
<blockquote>
<p>写两个例题</p>
<p>例题一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setitmeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>()</span><br></pre></td></tr></table></figure>
<p>结果： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b377eb78ddde4b699f0a649366a7731a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708152230776"></p>
<blockquote>
<p>例题二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ea271c40e3463faf5394a175fdf418~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708152608397"></p>
<h2 id="20-DOM节点"><a href="#20-DOM节点" class="headerlink" title="20.DOM节点"></a>20.DOM节点</h2><blockquote>
<p>DOM 是一种树结构 （DOM树）</p>
<p>节点操作 简单举几个例子，这些基本API不用太多介绍</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;diV1&#x27;</span>) / 元素</span><br><span class="line"><span class="keyword">const</span> divList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divList.<span class="property">length</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divList\[<span class="number">0</span>\])</span><br><span class="line"><span class="keyword">const</span> containerListe = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAlL</span>(<span class="string">&#x27;p&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>DOM</code>节点的<code>property</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pListe = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(p)</span><br><span class="line"><span class="keyword">const</span> p = pList\[<span class="number">0</span>\]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pList\[<span class="number">0</span>\].<span class="property">style</span>.<span class="property">width</span>) / 获取样式</span><br><span class="line">p.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">className</span>)</span><br><span class="line">p.<span class="property">className</span> = <span class="string">&#x27;p1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeName</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeType</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>DOM</code>节点的<code>attribute</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pListe = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(p)</span><br><span class="line"><span class="keyword">const</span> p = pList\[<span class="number">0</span>\]</span><br><span class="line">p.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>, <span class="string">&#x27;./21.pro.jpg&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;color:#ccc;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getAttribute</span>(<span class="string">&#x27;style&#x27;</span>))</span><br><span class="line">p.<span class="title function_">removeAttribute</span>(<span class="string">&quot;style&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>property</code> :修改对象属性,不会体现到html结构中</p>
<p><code>attribute</code> :修改html属性,会改变html结构</p>
<p>两者都<strong>有可能</strong>引起<code>DOM</code><strong>重新渲染</strong></p>
</blockquote>
<h2 id="21-DOM节点操作"><a href="#21-DOM节点操作" class="headerlink" title="21.DOM节点操作"></a>21.DOM节点操作</h2><blockquote>
<p>节点操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">p.<span class="title function_">remove</span>();</span><br><span class="line">p.<span class="title function_">removeChild</span>(clildEle)</span><br><span class="line"><span class="keyword">const</span> p2 = p.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line">box.<span class="title function_">appendChild</span>(p);</span><br><span class="line">box.<span class="title function_">appendChild</span>(p2);</span><br><span class="line">p.<span class="title function_">insertBefore</span>(newele,ele)</span><br><span class="line">box.<span class="title function_">replaceChild</span>(newEle,oldEle)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">nodeType</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>节点之间的联系</p>
</blockquote>
<ul>
<li><p>parentNode 查找父节点</p>
</li>
<li><p>childElementCount 返回子元素的个数<strong>不包括文本节点和注释</strong></p>
</li>
<li><p>firstChild 查找指定节点的第一个字节点</p>
</li>
<li><p>lastChild 查找指定节点的最后一个字节点</p>
</li>
<li><p>previousSibling 查找指定节点的上一个节点</p>
</li>
<li><p>firstElementChild 返回第一个子元素</p>
</li>
<li><p>lastElementChild 返回最后一个子元素</p>
</li>
<li><p>previousElementSibling 返回前一个相邻兄弟元素</p>
</li>
<li><p>nextElementSibling 返回后一个相邻兄弟元素</p>
</li>
<li><p>nextSibling 查找指定节点的下一个节点</p>
</li>
</ul>
<h2 id="22-DOM性能"><a href="#22-DOM性能" class="headerlink" title="22.DOM性能"></a>22.DOM性能</h2><ul>
<li>DOM操作非常”昂贵”， 避免频繁的DOM操作</li>
<li>对DOM查询做缓存</li>
<li>将频繁操作改为一次性操作</li>
</ul>
<blockquote>
<p>DOM 查询做缓存</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>).<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> length = pList.<span class="property">length</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将频繁操作改做一次性操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  img.<span class="property">src</span> = <span class="string">&#x27;./img/2.jpg&#x27;</span></span><br><span class="line">  fragment.<span class="title function_">appendChild</span>(img)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(fragment)</span><br></pre></td></tr></table></figure>
<h2 id="23-BOM-简单的过一遍"><a href="#23-BOM-简单的过一遍" class="headerlink" title="23.BOM 简单的过一遍"></a>23.BOM 简单的过一遍</h2><blockquote>
<p><code>BOM</code> 的核心对象<code>window</code>:</p>
</blockquote>
<ul>
<li><code>window</code>是全局对象</li>
<li>浏览器窗口的<code>JavaScript</code>接口</li>
</ul>
<blockquote>
<p><code>navigator</code></p>
</blockquote>
<p>客服端标识浏览器的标准，主要用来记录和检测浏览器与设备的主要信息</p>
<blockquote>
<p>如何识别浏览器？</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ua = <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span></span><br><span class="line"><span class="keyword">const</span> isChrome = ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;Chrome&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isChrome)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>screen</code></p>
</blockquote>
<p>保存客服端能力的对象 举几个常见的属性</p>
<ul>
<li><code>height</code>: 屏幕像素高度</li>
<li><code>left</code>: 当前屏幕左边的像素距离</li>
<li><code>top</code>: 当前屏幕顶端的像素距离</li>
<li><code>width</code>: 屏幕像素宽度</li>
</ul>
<blockquote>
<p><code>location</code> 可以用<code>location</code>拆解<code>url</code></p>
</blockquote>
<ul>
<li><code>protocol</code>：协议</li>
<li><code>host</code>：域名和端口</li>
<li><code>hostname</code>：服务器名</li>
<li><code>pathname</code>：<code>url</code>路径</li>
<li><code>hash</code>：哈希值</li>
<li><code>href</code>：<code>url</code>字段</li>
<li><code>search</code>：查询字段</li>
</ul>
<blockquote>
<p><code>history</code></p>
</blockquote>
<ul>
<li><code>go()</code>：跳转页面</li>
<li><code>forward</code>：前进</li>
<li><code>back()</code>：后退</li>
</ul>
<h2 id="24-事件"><a href="#24-事件" class="headerlink" title="24.事件"></a>24.事件</h2><blockquote>
<p>事件绑定 简单介绍下，相信大家都会</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = docment.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="title function_">funcition</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简述事件冒泡的流程</p>
</blockquote>
<ul>
<li>基于DOM树形结构</li>
<li>事件会顺着触发元素网上冒泡</li>
<li>应用场景:<strong>事件代理</strong></li>
</ul>
<blockquote>
<p>事件代理的好处</p>
</blockquote>
<ul>
<li>代码简洁</li>
<li>减少浏览器内存占用</li>
<li>但是,不要滥用</li>
<li>对于那些新添加的元素，最好就使用事件代理</li>
</ul>
<blockquote>
<p>例子 ： 无限下拉图片列表,如何监听每个图片的点击</p>
</blockquote>
<ul>
<li>事件代理</li>
<li>用e.target获取触发元素</li>
<li>用matches来判断是否是触发元素</li>
</ul>
<blockquote>
<p>自己封装通用的事件绑定函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bindEvent</span> = <span class="keyword">function</span> (<span class="params">type, selector, fn</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">    fn = selector</span><br><span class="line">    selector = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> target = e.<span class="property">target</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selector) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.<span class="title function_">matches</span>(selector)) &#123;</span><br><span class="line">        fn.<span class="title function_">call</span>(target, e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      fn.<span class="title function_">call</span>(target, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">bindEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">bindEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="25-ajax"><a href="#25-ajax" class="headerlink" title="25.ajax"></a>25.ajax</h2><blockquote>
<p>手写一个简单的ajax</p>
<p>get请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;./test.json&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span> &amp;&amp; xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>post请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;localhost://mytest&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span> &amp;&amp; xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>状态码 <code>xhr.readyState</code></p>
</blockquote>
<ul>
<li>0- (未初始化)还没有调用send(方法</li>
<li>1- (载入)已调用send(方法,正在发送请求</li>
<li>2- (载入完成) send()方法执行完成,已经接收到全部响应内容</li>
<li>3- (交互)正在解析响应内容</li>
<li>4- (完成)响应内容解析完成,可以在客户端调用</li>
</ul>
<blockquote>
<p>响应码 <code>xhr.status</code></p>
</blockquote>
<ul>
<li>2xx -表示成功处理请求,如200</li>
<li>3xx -需要重定向，浏览器直接跳转，如301 302 304</li>
<li>4xx -客户端请求错误,如404 403</li>
<li>5xx -服务器端错误</li>
</ul>
<h2 id="26-跨域"><a href="#26-跨域" class="headerlink" title="26.跨域"></a>26.跨域</h2><blockquote>
<p>什么事跨域</p>
</blockquote>
<p>简单来说：由于同源策略的原因浏览器不能执行其他网站的脚本</p>
<p>所有的跨域,都必须经过server端允许和配合</p>
<p>未经server端允许就实现跨域,说明浏览器有漏洞,危险信号</p>
<blockquote>
<p>同源政策</p>
</blockquote>
<ul>
<li>ajax请求时,浏览器要求当前网页和server必须<strong>同源</strong>(安全)</li>
<li>同源:<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>,三者必须一-致</li>
<li>前端: <a href="https://link.juejin.cn/?target=http%3A%2F%2Fa.com%3A8080%2F" title="http://a.com:8080/">a.com:8080/</a> ; server :<a href="https://link.juejin.cn/?target=https%3A%2F%2Fb.com%2Fapi%2Fxx%25EF%25BC%2588%25E4%25B8%258D%25E5%2590%258C%25E6%25BA%2590%25EF%25BC%2589" title="https://b.com/api/xx%EF%BC%88%E4%B8%8D%E5%90%8C%E6%BA%90%EF%BC%89">b.com/api/xx（不同源）</a></li>
</ul>
<blockquote>
<p>加载图片 、css、 js可<strong>无视</strong>同源策略</p>
</blockquote>
<ul>
<li><code>&lt;img src=跨域的图片地址/&gt;</code>可用于统计打点,可使用第三E方统计服务</li>
<li><code>&lt;link href=跨域的css地址/&gt;</code> 可使用CDN , CDN一般都是外域</li>
<li><code>&lt;script src=跨域的js地址&gt; &lt;/script&gt;</code> 可使用CDN，可实现<strong>JSON</strong></li>
</ul>
<blockquote>
<p><code>jsonp</code></p>
</blockquote>
<p>因为script标签可以发送get请求，比如引用CDN，我们可以动态的创建script标签，再去请求一个带参网址来实现跨域通信</p>
<ul>
<li>script标签可绕过跨域限制</li>
<li>服务器可以任意动态拼接数据返回</li>
<li>所以，<code>&lt;script&gt;</code>就可以获得跨域的数据,只要服务端愿意返回</li>
</ul>
<blockquote>
<p>写个简易jsonp的例子</p>
<p>后台是 <code>node.js</code> + <code>express</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/info&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="string">&#x27;fn(&#123;name : &#x27;</span>张三<span class="string">&#x27;&#125;)&#x27;</span></span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>前端</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/mytest/info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然自己也可以自己封装一个jsonp函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> params = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> options.<span class="property">data</span>) &#123;</span><br><span class="line">    params += <span class="string">&#x27;&amp;&#x27;</span> + attr + <span class="string">&#x27;=&#x27;</span> + options.<span class="property">data</span>\[attr\]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fnName = <span class="string">&#x27;myJsonp&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>\[fnName\] = options.<span class="property">success</span></span><br><span class="line"></span><br><span class="line">  script.<span class="property">src</span> = options.<span class="property">url</span> + <span class="string">&#x27;?callback=&#x27;</span> + fnName + params</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line"></span><br><span class="line">  script.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">jsonp</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;url地址&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>jQuery实现jsonp</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url地址&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">jsonpCallback</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>默认情况下，使用<code>jQuery</code>发起<code>JSONP</code>请求，会自动携带一个 <code>callback=jQueryxxx</code>的参数, <code>jQuery</code> 是随机生成的一个回调函数名称。</p>
<blockquote>
<p><code>CORS</code> -服务器设置<code>http header</code></p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="27-ajax工具"><a href="#27-ajax工具" class="headerlink" title="27.ajax工具"></a>27.ajax工具</h2><blockquote>
<p>jQuery中封装的$.ajax就不多说了</p>
<p>Fetch：简单的例子 默认<strong>GET</strong>请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url地址&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>
<p>Fetch底层是用Promise实现，我们可以直接用async来优化上面的代码，减少回调，使其更加语义化、容易理解</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;url地址&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Fetch的<strong>POST</strong>请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;name=&quot;zhangsan&quot;&amp;age=18&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>带上<strong>cookie</strong>需要设置credentials</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>axios的基本用法应该不必多说了。大家基本天天用吧</p>
</blockquote>
<h2 id="28-存储"><a href="#28-存储" class="headerlink" title="28.存储"></a>28.存储</h2><blockquote>
<p>描述<code>cookie``localStorage``sessionStorage</code>区别</p>
<p>cookie</p>
</blockquote>
<ul>
<li>本身用于浏览器和<code>server</code>通讯</li>
<li>在<code>html5</code>之前 被”借用”到本地存储来</li>
<li>可用<code>document.cookie =</code> 来修改</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a88350ddbced48e19f7f4b5fbfe2dffd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210708221336289"></p>
<blockquote>
<p><code>cookie</code>缺点</p>
</blockquote>
<ul>
<li>存储大小，最大4KB</li>
<li><code>http</code>请求时需要发送到服务端，增加请求数据量</li>
<li>只能用<code>document.cookie =</code> 来修改,太过简陋</li>
</ul>
<blockquote>
<p><code>localStorage</code>和<code>sessionStorage</code></p>
</blockquote>
<ul>
<li><code>HTML5</code>专门为存储而设计，最大可存5M</li>
<li>API简单易用<code>setItem``getItem</code></li>
<li>不会随着<code>http</code>请求被发送出去</li>
<li><code>localStorage</code>数据会永久存储，除非代码或手动删除</li>
<li><code>sessionStorage</code>数据只存在于当前会话,浏览器关闭则清空</li>
<li>一般用<code>localStorage</code>会更多一-些</li>
</ul>
<h2 id="29-HTTP"><a href="#29-HTTP" class="headerlink" title="29.HTTP"></a>29.HTTP</h2><blockquote>
<p>状态码分类</p>
</blockquote>
<ul>
<li>1xx服务器收到请求</li>
<li>2xx请求成功,如200</li>
<li>3xx重定向,如302</li>
<li>4xx客户端错误，如404</li>
<li>5xx服务端错误,如500</li>
</ul>
<blockquote>
<p>常见状态码</p>
</blockquote>
<ul>
<li><code>200</code>成功</li>
<li><code>301</code>永久重定向(配合<code>location</code> ,浏览器自动处理)</li>
<li><code>302</code>临时重定向(配合<code>location</code> ,浏览器自动处理)</li>
<li><code>304</code>资源未被修改</li>
<li><code>404</code>资源未找到</li>
<li><code>403</code>没有权限</li>
<li><code>500</code>服务器错误</li>
<li><code>504</code>网关超时</li>
</ul>
<blockquote>
<p>关于协议和规范</p>
</blockquote>
<ul>
<li>就是一个约定</li>
<li>要求大家都跟着执行</li>
<li>不要违反规范,例如IE浏览器</li>
</ul>
<blockquote>
<p><code>http headers</code></p>
<p><code>Request Headers</code></p>
</blockquote>
<ul>
<li>Accept浏览器可接收的数据格式</li>
<li>Accept-Encoding浏览器可接收的压缩算法,如gzip</li>
<li>Accept-Languange浏览器可接收的语言,如zh-CN</li>
<li>Connection: keep-alive - -次TCP连接重复使用</li>
<li>cookie</li>
<li>Host</li>
<li>User-Agent (简称UA )浏览器信息</li>
<li>Content-type发送数据的格式,如application/json</li>
</ul>
<blockquote>
<p><code>Response Headers</code></p>
</blockquote>
<ul>
<li>Content-type返回数据的格式，如application/json</li>
<li>Content-length返回数据的大小，多少字节</li>
<li>Content-Encoding返回数据的压缩算法，如gzip</li>
<li>Set-Cookie</li>
</ul>
<blockquote>
<p>自定义<code>header</code>了解下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">header : &#123;</span><br><span class="line">    <span class="string">&#x27;X-Requested-with&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="30-HTTP缓存"><a href="#30-HTTP缓存" class="headerlink" title="30.HTTP缓存"></a>30.HTTP缓存</h2><blockquote>
<p>关于缓存</p>
</blockquote>
<ul>
<li>减少带宽，减少请求数量，减轻服务器压力，提升性能</li>
<li>浏览器缓存一般都是针对静态资源，比如 js、css、图片 等</li>
</ul>
<h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c691ebaeffde4c9584fd9384734d432f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709155528877"></p>
<p>如果过期了 再次请求 ，返回<code>Cache-Control</code></p>
<blockquote>
<p><code>Cache-Control</code></p>
<p><code>Response Headers</code>中 控制强制缓存的逻辑</p>
<p>例如<code>Cache-Control</code>: <code>max-age=31536000</code> ( 单位是秒)</p>
</blockquote>
<ul>
<li>public：资源客户端和服务器都可以缓存。</li>
<li>privite：资源只有客户端可以缓存。</li>
<li>no-cache：客户端缓存资源，但是是否缓存需要经过协商缓存来验证。</li>
<li>no-store：不使用缓存。</li>
<li>max-age：缓存保质期。</li>
</ul>
<blockquote>
<p>关于<code>Expires</code></p>
</blockquote>
<ul>
<li>同在<code>Response Headers</code>中</li>
<li>同为控制缓存过期</li>
<li>已被<code>Cache-Control</code>代替</li>
</ul>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><blockquote>
<ul>
<li>服务器端缓存策略</li>
<li>服务器判断客户端资源，是否和服务端资源一样</li>
<li>致则返回304 , 否则返回200和最新的资源</li>
</ul>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f7a1307d76143cd86cb890a6035e409~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709155459528"></p>
<blockquote>
<p>资源标识</p>
</blockquote>
<ul>
<li>在<code>Response Headers</code>中，有两种</li>
<li><code>Last-Modified</code>资源的最后修改时间</li>
<li><code>Etag</code>资源的唯一标识( -一个字符串，类似人类的指纹)</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f65e646917a84409a11794d02d1d2e68~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709160347279"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3aa9e7f06b0c44a28a2d0455abaa021c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709160501440"></p>
<blockquote>
<p>下面是一个<code>Headers</code>实例</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c86392599cf74fe6ba8c094c44bfdeaf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709160613179"></p>
<blockquote>
<p><code>Last-Modified</code>和<code>Etag</code></p>
</blockquote>
<ul>
<li>会优先使用<code>Etag</code></li>
<li><code>Last-Modified</code>只能精确到<strong>秒级</strong></li>
<li>如果资源被重复生成，而内容不变，则<code>Etag</code>更精确</li>
</ul>
<h3 id="缓存流程图"><a href="#缓存流程图" class="headerlink" title="缓存流程图"></a>缓存流程图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccf8a70a39de458b91946ba9def58ac4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210709161010069"></p>
<blockquote>
<p>三种刷新操作对缓存的影响</p>
</blockquote>
<p>正常操作:地址栏输入<code>url</code> ,跳转链接,前进后退等</p>
<p>手动刷新: <code>F5</code>，点击刷新按钮,右击菜单刷新</p>
<p>强制刷新: <code>ctrl + F5</code></p>
<ul>
<li>正常操作:强制缓存有效,协商缓存有效</li>
<li>手动刷新:强制缓存失效,协商缓存有效</li>
<li>强制刷新:强制缓存失效,协商缓存失效</li>
</ul>
<h1 id="关于开发环境"><a href="#关于开发环境" class="headerlink" title="关于开发环境"></a>关于开发环境</h1><h2 id="1-git"><a href="#1-git" class="headerlink" title="1.git"></a>1.git</h2><blockquote>
<p>最常用的代码版本管理工具</p>
<p>大型项目需要多人协作开发,必须熟用git</p>
<p>如果你不知道或者之前不用git ,不会通过面试</p>
</blockquote>
<ul>
<li>Mac OS自带git命令，windows可去官网下载安装</li>
<li>git服务端常见的有github coding.net等</li>
<li>大公司会搭建自己的内网git服务</li>
</ul>
<p>我这里就不用多多介绍了，我就说下我们经常用的操作</p>
<blockquote>
<p>第一次使用git，配置用户信息</p>
</blockquote>
<ul>
<li>用户名：<code>git config --global user.name &quot;用户名&quot;</code></li>
<li>户邮箱：<code>git config --global user.email &quot;邮箱地址&quot;</code></li>
</ul>
<blockquote>
<p>初始化仓库</p>
</blockquote>
<ul>
<li>创建一个新的本地仓库：<code>git init</code></li>
<li>或者从远程git仓库复制项目：<code>git clone &lt;远程git仓库url地址&gt;</code></li>
</ul>
<blockquote>
<p>添加到暂存区</p>
</blockquote>
<ul>
<li>添加指定文件：<code>git add 文件1 文件2 ...</code></li>
<li>添加文件夹：<code>git add \[文件夹\]</code></li>
<li>添加所有文件：<code>git add .</code></li>
</ul>
<blockquote>
<p>撤销</p>
</blockquote>
<ul>
<li>取消暂存区已经暂存的文件：<code>git reset HEAD 文件1 ...</code></li>
<li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li>
<li>如果代码写错到了分支先 <code>git stash</code> 切换分支后 就<code>git stash pop</code> 释放刚才的内容</li>
</ul>
<blockquote>
<p>重命名文件</p>
</blockquote>
<ul>
<li>并提交到暂存区：<code>git mv \[old\] \[new\]</code></li>
</ul>
<blockquote>
<p>查看信息</p>
</blockquote>
<ul>
<li>查询当前工作区所有文件的状态：<code>git status</code></li>
<li>比较当前修改的文件 和 暂存区的 差异：<code>git diff 文件</code></li>
<li>直接比较有修改的所有的文件：<code>git diff</code></li>
</ul>
<blockquote>
<p>提交</p>
</blockquote>
<p>提交到本地仓库：<code>git commit -m &quot;提交信息&quot;</code></p>
<p>撤销上次提交：<code>git commit --amend</code></p>
<p>跳过暂存区直接提交，自己不用<code>add .</code>：<code>git commit -a -m &quot;提交信息&quot;</code></p>
<blockquote>
<p>分支管理</p>
</blockquote>
<ul>
<li>显示所有分支：<code>git branch</code></li>
<li>创建分支：<code>git branch &lt;新分支名称&gt;</code></li>
<li>新建子分支：<code>git checkout -b &lt;子分支名称&gt;</code></li>
<li>切换到其他分支：<code>git checkout &lt;分支名称&gt;</code></li>
<li>当前分支与其他分支合并：<code>git merge &lt;分支名称&gt;</code></li>
<li>把远程分支合并到当前分支：<code>git merge &lt;远程分支&gt;/&lt;本地分支&gt;</code></li>
<li>删除分支：<code>git branch -d &lt;分支名称&gt;</code></li>
<li>添加远程仓库：<code>git remote add \[remote-name\] \[url\]</code>比如github这个例子<code>git remote add origin url</code></li>
<li>将本地仓库某分支推送到远程仓库上：<code>git push \[远程仓库\] \[分支名字\]</code> 这里举个例子<code>git push origin master</code></li>
</ul>
<h2 id="2-抓包"><a href="#2-抓包" class="headerlink" title="2.抓包"></a>2.抓包</h2><blockquote>
<p>移动端h5页，查看网络请求,需要用工具抓包</p>
<p><code>windows</code>一般用<code>fiddler</code></p>
<p><code>Mac OS</code> - -般用<code>charles</code></p>
<p>抓包+调试的工具<code>spy-debugger</code></p>
</blockquote>
<ol>
<li>手机和电脑连同-一个局域网</li>
<li>将手机代理到电脑上</li>
<li>手机浏览网页,即可抓包</li>
</ol>
<p>具体使用方法大家可以去看看其他大佬的帖子，他们讲的非常的好</p>
<p>推荐使用 <code>spy-debugger</code> 支持<code>HTTP/HTTPS</code>，无需USB连接设备</p>
<h2 id="3-Webpack-和-babel-简单使用"><a href="#3-Webpack-和-babel-简单使用" class="headerlink" title="3.Webpack 和 babel 简单使用"></a>3.Webpack 和 babel 简单使用</h2><h3 id="为啥使用Webpack"><a href="#为啥使用Webpack" class="headerlink" title="为啥使用Webpack"></a>为啥使用Webpack</h3><ul>
<li><p>ES6模块化,浏览器暂不支持</p>
</li>
<li><p>ES6语法,浏览器并不完全支持</p>
</li>
<li><p>压缩代码,整合代码,以让网页加载更快</p>
</li>
</ul>
<h3 id="安装配置Webpack"><a href="#安装配置Webpack" class="headerlink" title="安装配置Webpack"></a>安装配置Webpack</h3><blockquote>
<p>安装 <code>npm i -D webpack webpack-cli</code></p>
<p>安装本地项目模块 <code>npm install webpack webpack-cli -D</code></p>
<p>配置<code>webpack.config.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置<code>package.json</code>中<code>script</code> 之后就可以使用<code>npm run build</code>来运行该脚本命令</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置本地服务器"><a href="#配置本地服务器" class="headerlink" title="配置本地服务器"></a>配置本地服务器</h3><p>安装本地服务器 <code>npm install webpack-dev-server -D</code></p>
<blockquote>
<p>配置<code>webpack.config.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;8080&#x27;</span>,</span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">overlay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>inline</strong>：文件改变时会自动刷新</li>
<li><strong>open</strong>：第一次自动打开网页。</li>
<li><strong>compress</strong>：启用 gzip 压缩，boolean 类型，默认为 false</li>
<li><strong>overlay</strong>：页面上报错信息是否显示，默认为false</li>
<li><strong>port</strong>: 端口</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><blockquote>
<p>配置<code>package.json</code>中<code>script</code> 终端输入<code>npm run dev</code> 运行服务器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">                <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>添加个html的压缩 安装 <code>npm install html-webpack-plugin -D</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;8080&#x27;</span>,</span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">overlay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugin</span>: &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"></span><br><span class="line">      	<span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;src&quot;</span>,<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">  	  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能打包html了</p>
<h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h3><p><code>loaders</code> 配置<code>css-loader</code></p>
<blockquote>
<p>安装 <code>npm install style-loader css-loader -D</code></p>
<p>再去 <code>webpack.config.js</code> 设置 这样就能打包<code>css</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: \[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: \[<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>\]</span><br><span class="line">      &#125;</span><br><span class="line">    \]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>安装：<code>npm install @babel/core @babel/preset -env babel -loader -D</code></p>
<p>项目的目录添加一个.babeirc文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> \<span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span>\<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>再去 <code>webpack.config.js</code> 设置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: \[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\\.js$/</span>,</span><br><span class="line">            <span class="attr">use</span>: \[<span class="string">&#x27;babel-loader&#x27;</span>\],</span><br><span class="line">            <span class="attr">include</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line"></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">          &#125;</span><br><span class="line">        \]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置生产环境"><a href="#配置生产环境" class="headerlink" title="配置生产环境"></a>配置生产环境</h3><p>项目根目录创建一个 <code>webpack.prod.js</code></p>
<p>把开发环境的内容复制过来改改</p>
<p>更改<code>mode</code>为<code>production</code></p>
<p>输出文件加上<code>bundle.\[contenthash\].js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/src&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.\[contenthash\].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugin</span>: &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"></span><br><span class="line">      	<span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;src&quot;</span>,<span class="string">&quot;index.html&quot;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">  	  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更改<code>package.json</code>中<code>script</code> 中的<code>build</code> 为刚才新建的生产环境 <code>webpack.prod.js</code></p>
<p>使用<code>npm run build</code>运行打包</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span> : &#123;</span><br><span class="line">		<span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.prod.js&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-ES6模块化规范"><a href="#4-ES6模块化规范" class="headerlink" title="4.ES6模块化规范"></a>4.ES6模块化规范</h2><p>ES6的模块化之前有三种规范：CommonJS、AMD、CMD 这几个其他大佬都有详细介绍</p>
<blockquote>
<p>ES6 模块的设计思想是尽量的静态化，使得<strong>编译时</strong>就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在<strong>运行时</strong>确定这些东西。</p>
<p>我这里就是简单的简述下ES6中的模块化规范</p>
<p>ES6中的模块自动采用<strong>严格模式</strong></p>
<p>ES6模块中的顶层<code>this</code>指向<code>undefined</code></p>
</blockquote>
<h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p><code>exprot</code>一定要写在<strong>最顶层</strong> 导出的值是动态绑定的，不是缓存</p>
<p>下面演示的导出皆在 <code>index.js</code>中</p>
<blockquote>
<p>分别导出：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">c</span> = (<span class="params"></span>)=&gt;&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一次全部导出</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">c</span> = (<span class="params"></span>)=&gt;&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; a, b, c &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在导出的时候通过 as 取别名</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">c</span> = (<span class="params"></span>)=&gt;&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; a <span class="keyword">as</span> lang1, b <span class="keyword">as</span> lang2, c <span class="keyword">as</span> lang3 &#125;</span><br></pre></td></tr></table></figure>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><blockquote>
<p>通过结构赋值 获取 导出的元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a, b, c&#125; <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然导入的时候也可以取别名</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a <span class="keyword">as</span> lang &#125; <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>导入所有的元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lang <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">a</span>)</span><br></pre></td></tr></table></figure>
<h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><p>可以指定模块默认输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>import导入的元素可以为任意名称</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lang <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>输出单个值，使用<code>export default</code></li>
<li>输出多个值，使用<code>export</code></li>
<li><code>export default</code>与普通的<code>export</code>不要同时使用</li>
</ul>
<h2 id="5-Linux命令"><a href="#5-Linux命令" class="headerlink" title="5.Linux命令"></a>5.Linux命令</h2><p>这里我就摆几个常用的，因为这个是我的总结，自己翻出来看看，所以更全Linux请到其他大佬那里查看</p>
<p><code>cp</code> 拷贝文件 ：<code>cp -rvf a/ /tmp/</code></p>
<p><code>mkdir</code> 创建目录：<code>mkdir dir</code></p>
<p><code>ls</code> 当前目录的所有内容。</p>
<p><code>ls -l</code>目录下详细信息</p>
<p><code>pwd</code> 当前所在的目录</p>
<p><code>cd</code> 打开目录</p>
<p><code>find</code> 查找文件</p>
<p><code>cat</code> 查看文件内容</p>
<p><code>grep</code>对内容进行过滤</p>
<p><code>diff</code>命令用来比较两个文件是否的差异</p>
<p><code>.tar``gz</code> 使用tar ,gzip命令操作</p>
<p><code>ps</code>命令能够看到进程/线程状态</p>
<p><code>ifconfig</code>查看ip地址</p>
<p><code>ping</code>测试网络</p>
<h1 id="关于运行环境"><a href="#关于运行环境" class="headerlink" title="关于运行环境"></a>关于运行环境</h1><blockquote>
<p>运行环境即浏览器( <code>server</code>端有<code>node.js</code> )</p>
<p>下载网页代码,渲染出页面,期间会执行若干JS</p>
<p>要保证代码在浏览器中: <strong>稳定</strong>且<strong>高效</strong></p>
</blockquote>
<h2 id="1-页面加载的过程"><a href="#1-页面加载的过程" class="headerlink" title="1.页面加载的过程"></a>1.页面加载的过程</h2><h3 id="1-从输入url到渲染出页面的整个过程"><a href="#1-从输入url到渲染出页面的整个过程" class="headerlink" title="1.从输入url到渲染出页面的整个过程"></a>1.从输入url到渲染出页面的整个过程</h3><blockquote>
<p>大致的流程</p>
</blockquote>
<ol>
<li><code>DNS</code>解析:域名-&gt;<code>IP</code>地址</li>
<li>浏览器根据<code>IP</code>地址向服务器发起<code>http</code>请求</li>
<li>服务器处理<code>http</code>请求,并返回给浏览器</li>
<li>浏览器解析渲染页面</li>
<li>连接结束</li>
</ol>
<blockquote>
<p>​ 渲染过程</p>
</blockquote>
<ul>
<li>根据<code>HTML</code>代码生成<code>DOM Tree</code></li>
<li>根据<code>CSS</code>代码生成<code>CSSOM</code></li>
<li>将<code>DOM Tree</code>和<code>CSSOM</code>整合行程<code>Render Tree</code></li>
<li>根据<code>Render Tree</code>渲染页面</li>
<li>遇到<code>&lt;script&gt;</code>则暂停渲染,优先加载并执行<code>JS</code>代码，完成再继续</li>
<li>直至把<code>Render Tree</code>渲染完成</li>
</ul>
<h3 id="2-window-onload和DOMContentLoaded的区别"><a href="#2-window-onload和DOMContentLoaded的区别" class="headerlink" title="2.window.onload和DOMContentLoaded的区别"></a>2.window.onload和DOMContentLoaded的区别</h3><ul>
<li><code>window.onload</code>资源全部加载完才能执行，包括图片</li>
<li><code>DOMContentLoaded``DOM</code>渲染完成即可,图片可能尚未下载</li>
</ul>
<h2 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2.性能优化"></a>2.性能优化</h2><blockquote>
<p>是一个综合性问题，没有标准答案,但要求尽量全面</p>
<p>某些细节问题可能会单独提问:手写防抖、节流</p>
<p>只关注核心点,针对面试</p>
</blockquote>
<h3 id="性能优化原则"><a href="#性能优化原则" class="headerlink" title="性能优化原则"></a>性能优化原则</h3><ul>
<li>多使用内存、缓存或其他方法</li>
<li>减少<code>CPU</code>计算量，减少网络加载耗时</li>
<li>(适用于所有编程的性能优化一空间换时间 )</li>
</ul>
<h3 id="让加载更快"><a href="#让加载更快" class="headerlink" title="让加载更快"></a>让加载更快</h3><ul>
<li>减少资源体积:压缩代码</li>
<li>减少访问次数:合并代码(多个js文件合并到一个文件然后加载), <code>SSR</code>服务器端渲染,缓存</li>
<li>使用更快的网络: <code>CDN</code></li>
<li><code>CSS</code>放在<code>head</code>，<code>JS</code>放在<code>body</code>最下面</li>
<li>尽早开始执行<code>JS</code>，用<code>DOMContentLoaded</code>触发</li>
<li>懒加载(图片懒加载,上滑加载更多)</li>
</ul>
<h3 id="让渲染更快"><a href="#让渲染更快" class="headerlink" title="让渲染更快"></a>让渲染更快</h3><ul>
<li>对DOM查询进行缓存</li>
<li>减少频繁DOM操作，合并到一起插入DOM结构</li>
<li>节流<code>throttle</code>防抖<code>debounce</code></li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul>
<li>静态资源加<code>hash</code>后缀，根据文件内容计算<code>hash</code></li>
<li>文件内容不变,则<code>hash</code>不变，则<code>url</code>不变</li>
<li><code>url</code>和文件不变,则会自动触发<code>http</code>缓存机制，返回<code>304</code></li>
</ul>
<h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><ul>
<li>服务器端渲染:将网页和数据一起加载，一起渲染</li>
<li>非<code>SSR</code> (前后端分离) :先加载网页，再加载数据,再渲染数据</li>
<li>早先的<code>JSP ASP PHP</code>，现在的vue React SSR</li>
</ul>
<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><blockquote>
<p>监听一个输入框的，文字变化后触发change事件</p>
<p>直接用keyup事件,则会频发触发change事件</p>
<p>防抖:用户输入结束或暂停时,才会触发change事件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">500</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">        <span class="title function_">cleartTimout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="title function_">seTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">    &#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="title function_">debounce</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>)</span><br><span class="line">&#125;,<span class="number">600</span>),<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><blockquote>
<p>拖拽一个元素时,要随时拿到该元素被拖拽的位置</p>
<p>直接用<code>drag</code>事件，则会频发触发，很容易导致卡顿</p>
<p>节流:无论拖拽速度多快，都会每隔<code>100ms</code>触发一次</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">500</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="title function_">seTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">    &#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;drag&#x27;</span>,<span class="title function_">throttle</span>( <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>,e.<span class="property">offsetY</span>)</span><br><span class="line">&#125;,<span class="number">600</span>),<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-安全"><a href="#3-安全" class="headerlink" title="3.安全"></a>3.安全</h2><blockquote>
<p><code>XSRF</code>攻击 这里简单的 介绍下</p>
</blockquote>
<ul>
<li>你正在购物,看中了某个商品，商品id是100</li>
<li>付费接口是xxx.com/pay?id=100 , 但没有任何验证</li>
<li>我是攻击者,我看中了一一个商品，id是200</li>
<li>我向你发送一封电子邮件 ,邮件标题很吸引人</li>
<li>但邮件正文隐藏着<img src=xxx.com/pay?id=200 /></li>
<li>你一查看邮件,就帮我购买了id是200的商品</li>
</ul>
<blockquote>
<p><code>XSRF</code>预防</p>
</blockquote>
<ul>
<li>使用post接口</li>
<li>增加验证，例如密码、短信验证码、指纹等</li>
</ul>
<h1 id="关于一些真题"><a href="#关于一些真题" class="headerlink" title="关于一些真题"></a>关于一些真题</h1><h2 id="号"><a href="#号" class="headerlink" title="+ 号"></a>+ 号</h2><ul>
<li>两个操作数如果是<code>number</code> 则直接相加出结果</li>
<li>如果其中有一个操作数为<code>string</code>， 则将另一个操作数隐式的转换为<code>string</code>,然后进行字符串拼接得出结果</li>
<li>如果操作数为对象或者是数组这种复杂的数据类型，那么就将两个操作数都转换为字符串，进行拼接</li>
<li>如果操作数是像<code>boolean</code>这种的简单数据类型，那么就将操作数转换为<code>number</code>相加得出结果</li>
<li><code>\[\]+&#123;&#125;</code> 因为会被强制转换为”,然后+运算符链接- 个<code>&#123;&#125;</code>, <code>&#123; &#125;</code>强制转换为字符串就是<code>&quot;\[Object Object\]&quot;</code></li>
<li><code>&#123;&#125;</code>当作一个空代码块，<code>+0</code>是强制将[]转换为<code>number</code>,转换的过程是<code>+\[0\] =&gt; +&quot;&quot; =&gt;0</code>最终的结果就是<code>0</code></li>
</ul>
<h2 id="var和let-const的区别"><a href="#var和let-const的区别" class="headerlink" title="var和let const的区别"></a>var和let const的区别</h2><ul>
<li><code>var</code>是<strong>ES5</strong>语法,<code>let``const</code>是<strong>ES6</strong>语法;<code>var</code>有变量提升</li>
<li><code>var</code>和<code>let</code>是变量，可修改;const是常量,不可修改;</li>
<li><code>let``const</code>有块级作用域,<code>var</code>没有</li>
</ul>
<h2 id="typeof返回哪些类型"><a href="#typeof返回哪些类型" class="headerlink" title="typeof返回哪些类型"></a>typeof返回哪些类型</h2><blockquote>
<p>一共是7种 值得注意的一点就是 typeof <strong>null</strong> //<strong>object</strong> 前面JS基础有提到</p>
</blockquote>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>object</li>
<li>function</li>
<li>undefined</li>
<li>symbol(ES6)</li>
</ul>
<h2 id="列举强制类型转换和隐式类型转换"><a href="#列举强制类型转换和隐式类型转换" class="headerlink" title="列举强制类型转换和隐式类型转换"></a>列举强制类型转换和隐式类型转换</h2><ul>
<li>强制: <code>parseInt``parseFloat``toString</code>等</li>
<li>隐式:<code>if</code>、<code>逻辑运算</code>、<code>==</code>、<code>+拼接字符串</code></li>
</ul>
<h2 id="手写深度比较-模拟lodash-isEqual"><a href="#手写深度比较-模拟lodash-isEqual" class="headerlink" title="手写深度比较,模拟lodash isEqual"></a>手写深度比较,模拟lodash isEqual</h2><blockquote>
<p>这里没考虑<code>function</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">obj1, obj2</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj1) || !<span class="title function_">isObject</span>(obj2)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj1Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1)</span><br><span class="line">  <span class="keyword">const</span> obj2Keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj1Keys.<span class="property">length</span> !== obj2Keys.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">isEqual</span>(obj1\[key\], obj2\[key\])</span><br><span class="line">    <span class="keyword">if</span> (!result) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(obj1, obj1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">s</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">s</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(obj1, obj2))</span><br></pre></td></tr></table></figure>
<h2 id="split-和join-的区别"><a href="#split-和join-的区别" class="headerlink" title="split()和join()的区别"></a>split()和join()的区别</h2><blockquote>
<p>他们是一个相反的操做</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>\].<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;1-2-3&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="数组的pop-push-unshift-shift分别做什么"><a href="#数组的pop-push-unshift-shift分别做什么" class="headerlink" title="数组的pop push unshift shift分别做什么"></a>数组的pop push unshift shift分别做什么</h2><h3 id="一般从这三个角度回答"><a href="#一般从这三个角度回答" class="headerlink" title="一般从这三个角度回答"></a>一般从这三个角度回答</h3><blockquote>
<p>功能是什么?</p>
<p>返回值是什么?</p>
<p>是否会对原数组造成影响?</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = \[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> popRes = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(popRes, arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pushRes = arr.<span class="title function_">push</span>(<span class="number">50</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pushRes, arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unshiftRes = arr.<span class="title function_">unshift</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unshiftRes, arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shiftRes = arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shiftRes, arr)</span><br></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><blockquote>
<p>纯函数</p>
<ol>
<li>不改变源数组( 没有副作用)</li>
<li>返回一个数组</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = \[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">concat</span>(\[<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>\])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">25</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.<span class="title function_">slice</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr4)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>非纯函数</p>
<p><code>push``pop``shift``unshift</code></p>
<p><code>forEach</code></p>
<p><code>some``every</code></p>
<p><code>reduce</code></p>
</blockquote>
<h2 id="数组slice和splice的区别"><a href="#数组slice和splice的区别" class="headerlink" title="数组slice和splice的区别"></a>数组slice和splice的区别</h2><ul>
<li>功能区别( <code>slice</code>-切片, <code>splice</code>-剪接)</li>
<li>参数和返回值</li>
<li>是否纯函数?</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = \[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>\]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">slice</span>()</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">const</span> arr3 = arr.<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> arr4 = arr.<span class="title function_">slice</span>(-<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spliceRes = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spliceRes, arr)</span><br></pre></td></tr></table></figure>
<h2 id="10-20-30-map-parseInt-返回结果是什么"><a href="#10-20-30-map-parseInt-返回结果是什么" class="headerlink" title="[10, 20, 30].map(parseInt)返回结果是什么?"></a>[10, 20, 30].map(parseInt)返回结果是什么?</h2><ul>
<li><code>map</code>的参数和返回值</li>
<li><code>parseInt</code>参数和返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = \[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>\].<span class="title function_">map</span>(<span class="built_in">parseInt</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>\].<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item,index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="ajax请求get和post的区别"><a href="#ajax请求get和post的区别" class="headerlink" title="ajax请求get和post的区别?"></a>ajax请求get和post的区别?</h2><ul>
<li><code>get</code>一般用于查询操作, <code>post</code>一般用户提交操作</li>
<li><code>get</code>参数拼接在url上, <code>post</code>放在请求体内(数据体积可更大)</li>
<li>安全性: <code>post</code>易于防止<code>CSRF</code></li>
</ul>
<h2 id="函数bind-call和apply的区别"><a href="#函数bind-call和apply的区别" class="headerlink" title="函数bind,call和apply的区别"></a>函数bind,call和apply的区别</h2><p><code>bind</code>创建一个新的函数, 当被调用时 ,第一参数this值，在调用新函数时，接受的是若干个参数列表</p>
<p><code>call</code>方法调用一个函数, 第一参数this值，接受的是若干个参数列表</p>
<p><code>apply</code>方法调用一个函数, 第一参数this值，第二个参数是一个数组（或类似数组的对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newFn = fn.<span class="title function_">bind</span>(<span class="variable language_">this</span>,p1,p2,p3)</span><br><span class="line"><span class="title function_">newFn</span>()</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="variable language_">this</span>,p1,p2,p3)</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br></pre></td></tr></table></figure>
<h2 id="事件代理-委托-是什么"><a href="#事件代理-委托-是什么" class="headerlink" title="事件代理(委托)是什么?"></a>事件代理(委托)是什么?</h2><blockquote>
<p>事件代理就是利用事件冒泡或事件捕获的机制把一系列的内层元素事件绑定到外层元素。</p>
<p>在上面JS基础24有写</p>
</blockquote>
<h2 id="闭包是什么-有什么特性-有什么负面影响"><a href="#闭包是什么-有什么特性-有什么负面影响" class="headerlink" title="闭包是什么,有什么特性?有什么负面影响?"></a>闭包是什么,有什么特性?有什么负面影响?</h2><ul>
<li>能够访问其他函数内部变量的函数，被称为 <strong>闭包</strong></li>
<li>回顾作用域和自由变量</li>
<li>回顾闭包应用场景:作为参数被传入,作为返回值被返回</li>
<li>回顾:自由变量的查找,要在函数<strong>定义</strong>的地方(而非执行的地方)</li>
<li>影响:变量会常驻内存,得不到释放。闭包不要乱用</li>
</ul>
<h2 id="如何阻止事件冒泡和默认行为"><a href="#如何阻止事件冒泡和默认行为" class="headerlink" title="如何阻止事件冒泡和默认行为?"></a>如何阻止事件冒泡和默认行为?</h2><ul>
<li>event.stopPropagation()</li>
<li>event.preventDefault(）</li>
</ul>
<h2 id="查找、添加、删除、移动DOM节点的方法"><a href="#查找、添加、删除、移动DOM节点的方法" class="headerlink" title="查找、添加、删除、移动DOM节点的方法?"></a>查找、添加、删除、移动DOM节点的方法?</h2><blockquote>
<p>在上面 JS基础 20.DOM节点 21.DOM节点操作 有介绍</p>
</blockquote>
<h2 id="如何减少DOM操作"><a href="#如何减少DOM操作" class="headerlink" title="如何减少DOM操作?"></a>如何减少DOM操作?</h2><ul>
<li>缓存<code>DOM</code>查询结果</li>
<li>多次<code>DOM</code>操作,合并到一-次插入</li>
</ul>
<h2 id="解释jsonp的原理-为何它不是真正的ajax"><a href="#解释jsonp的原理-为何它不是真正的ajax" class="headerlink" title="解释jsonp的原理,为何它不是真正的ajax ?"></a>解释jsonp的原理,为何它不是真正的ajax ?</h2><ul>
<li><code>jsonp</code>不是官方的，<code>script</code>标签实现的请求。</li>
<li><code>jsonp</code>是一个同步请求，只支持<code>get</code>请求</li>
<li><code>ajax</code>通过<code>xhr</code>对象去实现，支持<code>get post</code> ,跨域请求需要后端配合解决跨域响应头</li>
</ul>
<h2 id="document-load和ready的区别"><a href="#document-load和ready的区别" class="headerlink" title="document load和ready的区别"></a>document load和ready的区别</h2><ul>
<li><code>ready</code>，表示文档结构已经加载完成（不包含图片等非文字媒体文件）</li>
<li><code>onload</code>，指示页面包含图片等文件在内的所有元素都加载完成</li>
</ul>
<h2 id="和-的不同"><a href="#和-的不同" class="headerlink" title="==和===的不同"></a><code>==</code>和<code>===</code>的不同</h2><ul>
<li>双等：判断值相等，会自动转换数据类型</li>
<li>三等：不会自动转换数据类型；全等是先判断左右两边的数据类型，如果数据类型不一致，则直接返回false，之后才会进行两边值的判断</li>
</ul>
<h2 id="函数声明和函数表达式的区别"><a href="#函数声明和函数表达式的区别" class="headerlink" title="函数声明和函数表达式的区别"></a>函数声明和函数表达式的区别</h2><ul>
<li>函数声明<code>function fn() &#123;...&#125;</code></li>
<li>函数表达式<code>const fn = function() &#123;..&#125;</code></li>
<li>函数声明会在代码执行前预加载,而函数表达式不会</li>
</ul>
<h2 id="new-Object-和Object-create-的区别"><a href="#new-Object-和Object-create-的区别" class="headerlink" title="new Object(和Object.create()的区别"></a>new Object(和Object.create()的区别</h2><ul>
<li><code>&#123;&#125;</code>等同于<code>new Object()</code>， 原型Object.prototype</li>
<li><code>Object.create(nul)</code>没有原型</li>
<li><code>Object.create(..)</code>可指定原型</li>
</ul>
<h2 id="关于this的场景题"><a href="#关于this的场景题" class="headerlink" title="关于this的场景题"></a>关于this的场景题</h2><blockquote>
<p>这是一个简单的例子 this 是在执行的时候确定的</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    count : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">getCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">User</span>.<span class="title function_">getCount</span>())</span><br><span class="line"><span class="keyword">const</span> func = <span class="title class_">User</span>.<span class="property">getCount</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">func</span>() )</span><br></pre></td></tr></table></figure>
<p>第一个打印的是 <code>1</code></p>
<p>第二个打印的是 <code>undefined</code> 因为这个时候 <code>this</code> 指向是<code>window</code></p>
<h2 id="关于作用域和自由变量的场景题"><a href="#关于作用域和自由变量的场景题" class="headerlink" title="关于作用域和自由变量的场景题"></a>关于作用域和自由变量的场景题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里打印的是 4 4 4</p>
<h2 id="判断字符串以字母开头-后面字母数字下划线-长度6-30"><a href="#判断字符串以字母开头-后面字母数字下划线-长度6-30" class="headerlink" title="判断字符串以字母开头,后面字母数字下划线,长度6-30"></a>判断字符串以字母开头,后面字母数字下划线,长度6-30</h2><p>这里是考察正则</p>
<p><code>var reg=/^\[a-zA-Z\]\\w&#123;5,29&#125;$/</code></p>
<p><code>str.test(reg)</code></p>
<h2 id="手写字符串trim方法-保证浏览器兼容性"><a href="#手写字符串trim方法-保证浏览器兼容性" class="headerlink" title="手写字符串trim方法,保证浏览器兼容性"></a>手写字符串trim方法,保证浏览器兼容性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">trim</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/^\\s+/</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\\s+$/</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原型, this, 正则表达式 把空白变为空字符串</p>
</blockquote>
<h2 id="如何获取多个数字中的最大值"><a href="#如何获取多个数字中的最大值" class="headerlink" title="如何获取多个数字中的最大值"></a>如何获取多个数字中的最大值</h2><blockquote>
<p>自己封装max</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> nums = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    nums.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(item &gt; max) &#123;</span><br><span class="line">            max = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用Math.max</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<h2 id="如何用JS实现继承"><a href="#如何用JS实现继承" class="headerlink" title="如何用JS实现继承?"></a>如何用JS实现继承?</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a849f76b6cc45c3968a2f674f003081~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210710155504269"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lang&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">People</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点：</p>
</blockquote>
<p>多个实例对引用类型的操作会被篡改</p>
<h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><blockquote>
<p>使用call直接 把子类的this 传到父类</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">People</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">name</span>,lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>可以传递参数</li>
<li>name，age的这些属性是添加在 实例自身上的不是共享</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>使用不了 父类引用的变量 比如上面的<code>dd</code></li>
<li>使用不了<code>prototype</code>里面的 变量比如<code>eat</code></li>
</ul>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><blockquote>
<p>把 原型链继承 + 借用构造函数继承 组合起来</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">People</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">People</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;能看见千里之外的景物&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">sex</span>, lang.<span class="property">name</span>, lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更改过了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="keyword">let</span> jie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jie&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">dd</span>()</span><br><span class="line">jie.<span class="title function_">see</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>可以传递参数</li>
<li>父类引用的属性不被共享</li>
<li>可以使用父类 <code>prototype</code>的属性</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68f6063fcab344eaa4a49160bfcf6e57~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210710161425100.png"></p>
<ul>
<li>第一次的继承原型链的时候添加了 <code>name</code> 和 <code>age</code> 属性</li>
<li>第二次new 子类的实例的时候又添加 <code>name</code> 和 <code>age</code> 属性</li>
<li>根据原型链的查找规则 第二次会把第一次的覆盖</li>
</ul>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><blockquote>
<p>这个是真的用的少 <strong>ES5</strong>中的 <code>Object.create()</code>可以实现下面的 <code>object</code>函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> = obj</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fun</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobbys</span>: \[<span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;learn&#x27;</span>\],</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="title function_">object</span>(people)</span><br><span class="line">lang.<span class="property">name</span> = <span class="string">&#x27;lang&#x27;</span></span><br><span class="line">lang.<span class="property">hobbys</span>.<span class="title function_">push</span>(<span class="string">&#x27;sing&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jie = <span class="title function_">object</span>(people)</span><br><span class="line">jie.<span class="property">name</span> = <span class="string">&#x27;jie&#x27;</span></span><br><span class="line">jie.<span class="property">hobbys</span>.<span class="title function_">push</span>(<span class="string">&#x27;play&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">hobbys</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能传参</li>
<li>因为是浅复制，引用变量被共享了</li>
</ul>
<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><blockquote>
<p>创建一个函数，在内部做了一些加强浅复制就是 新增属性和方法，以<strong>增强函数</strong>，最后返回构造</p>
<p>这里直接用 Object.create() 来实现了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"></span><br><span class="line">    clone.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;see&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clone.<span class="property">haha</span> = <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobbys</span>: \[<span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;learn&#x27;</span>\],</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="title function_">createObj</span>(people)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点（同原型式继承）</p>
</blockquote>
<ul>
<li>不能传参</li>
<li>因为是浅复制，引用变量被共享了</li>
</ul>
<h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><blockquote>
<p>之前组合继承 调用了两次 构造参数</p>
<p><code>Student.prototype = new People();</code></p>
<p><code>let lang = new Student(&#39;lang&#39;, 21, &#39;男&#39;)</code></p>
</blockquote>
<ul>
<li>第一次的继承原型链的时候<code>Student.prototype</code> 添加了 <code>name</code> 和 <code>age</code> 属性</li>
<li>第二次new 子类的实例的时候又添加 <code>name</code> 和 <code>age</code> 属性</li>
</ul>
<p>避免重复添加， 我们让 <code>Student.prototype</code> 访问 <code>People.prototype</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">child, parent</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">  prototype.<span class="property">constructor</span> = child</span><br><span class="line"></span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">People</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Student</span>, <span class="title class_">People</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;能看见千里之外的景物&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">sex</span>, lang.<span class="property">name</span>, lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更改过了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="keyword">let</span> jie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jie&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">dd</span>()</span><br><span class="line">jie.<span class="title function_">see</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>父类方法可以复用</li>
<li>可以传递参数到父类</li>
<li>父类的引用属性不会被共享</li>
<li>只调用一次父类构造函数</li>
</ul>
<h3 id="extends-继承"><a href="#extends-继承" class="headerlink" title="extends 继承"></a>extends 继承</h3><blockquote>
<p><strong>ES6</strong>提供了<code>calss``extends``super</code>来实现继承</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">dd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;打车&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">see</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;能看见千里之外的景物&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">lang.<span class="title function_">eat</span>()</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang.<span class="property">sex</span>, lang.<span class="property">name</span>, lang.<span class="property">age</span>)</span><br><span class="line">lang.<span class="property">dd</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更改过了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">lang.<span class="title function_">dd</span>()</span><br><span class="line"><span class="keyword">let</span> jie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jie&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">jie.<span class="title function_">dd</span>()</span><br><span class="line">jie.<span class="title function_">see</span>()</span><br></pre></td></tr></table></figure>
<h2 id="如何捕获JS程序中的异常"><a href="#如何捕获JS程序中的异常" class="headerlink" title="如何捕获JS程序中的异常?"></a>如何捕获JS程序中的异常?</h2><blockquote>
<p>通过<code>try...catch...</code>捕获</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>, ex.<span class="property">message</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>window.onerror</code> 自动捕获</p>
<p>第一，对跨域的js,如CDN的，不会有详细的报错信息 第二，对于压缩的js,还要配合sourceMap 反查到未压缩代码的行、列</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">message, source, linenom, colnom, error</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>message</code>：错误信息（字符串）</li>
<li><code>source</code>：发生错误的脚本URL（字符串）</li>
<li><code>linenom</code>：发生错误的行号（数字）</li>
<li><code>colno</code>m：发生错误的列号（数字）</li>
<li><code>error</code>：Error对象（对象）</li>
</ul>
<blockquote>
<p><code>window.addEventListener(&#39;error&#39;)</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123; ... &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON ?"></a>什么是JSON ?</h2><ul>
<li><code>json</code>是一种数据格式,本质是一-段字符串</li>
<li><code>json</code>格式和<code>JS</code>对象结构一致,对<code>JS</code>语言更友好</li>
</ul>
<h2 id="获取当前页面url参数"><a href="#获取当前页面url参数" class="headerlink" title="获取当前页面url参数"></a>获取当前页面url参数</h2><p>传统方式,查找<code>location.search</code></p>
<p>新<code>API``URL SearchParams</code></p>
<blockquote>
<p>传统方式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(^|&amp;)<span class="subst">$&#123;name&#125;</span>=(\[^&amp;\]*)(&amp;|$)`</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> res = search.<span class="title function_">match</span>(reg)</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res\[<span class="number">2</span>\]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">query</span>(<span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>URL SearchParams</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> search = location.<span class="property">search</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(search)</span><br><span class="line">  <span class="keyword">return</span> p.<span class="title function_">get</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">query</span>(<span class="string">&#x27;b&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="将url参数解析为JS对象"><a href="#将url参数解析为JS对象" class="headerlink" title="将url参数解析为JS对象"></a>将<code>url</code>参数解析为<code>JS</code>对象</h2><blockquote>
<p>传统方式， 分析 srarch</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">queyrToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> search = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>)</span><br><span class="line">    search.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">paramStr</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> arr = paramStr.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> key = arr\[<span class="number">0</span>\]</span><br><span class="line">        <span class="keyword">const</span> val = arr\[<span class="number">1</span>\]</span><br><span class="line">        res\[key\] = val</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 URLSearchParams</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">queryToObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> pList = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(location.<span class="property">search</span>)</span><br><span class="line">    pList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val,key</span>) =&gt;</span> &#123;</span><br><span class="line">        res\[key\] = val</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扁平化数组和手写数组flatern考虑多层级"><a href="#扁平化数组和手写数组flatern考虑多层级" class="headerlink" title="扁平化数组和手写数组flatern考虑多层级"></a>扁平化数组和手写数组<code>flatern</code>考虑多层级</h2><p>比如 有这么一个数组 <code>\[1, 2, \[3, 4, \[10, 20, \[100, 200\]\]\], 5\]</code></p>
<p>输出：<code>\[1, 2, 3, 4, 10, 20, 100, 200, 5\]</code></p>
<blockquote>
<p>使用 concat</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="keyword">while</span>(arr.<span class="title function_">some</span>( <span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)))&#123;</span><br><span class="line">    arr = \[\].<span class="title function_">concat</span>(...arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>stringify</code> 把数组变成字符串 然后正则去除 所有<code>\[``\]</code>，根据<code>,</code>分割为数组，然后把每一项转为<code>number</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr).<span class="title function_">replace</span>(<span class="string">&#x27;/\\\[|\\\]/&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Number</span>(item))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用toString 和 上面差不多</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Number</span>(item))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用ES6 中flat就行</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自己手写<code>flatern</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFlat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> isDeep = arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br><span class="line">        <span class="keyword">if</span> (!isDeep) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>(\[\], arr)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">flat</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = \[<span class="number">1</span>, <span class="number">2</span>, \[<span class="number">3</span>, <span class="number">4</span>, \[<span class="number">10</span>, <span class="number">20</span>, \[<span class="number">100</span>, <span class="number">200</span>\]\]\], <span class="number">5</span>\].<span class="title function_">myFlat</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul>
<li>传统方式,遍历元素挨个比较、去重</li>
<li>使用<code>Set</code></li>
<li>考虑计算效率</li>
</ul>
<blockquote>
<p>传统方式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = \[\]</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(item) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>Set</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> \[...set\]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, obj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> item = obj\[key\];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            newObj\[key\] = &#123;&#125;;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj\[key\], item);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            newObj\[key\] = \[\];</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj\[key\], item);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newObj\[key\] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现一个不可改变的对象"><a href="#实现一个不可改变的对象" class="headerlink" title="实现一个不可改变的对象"></a>实现一个不可改变的对象</h2><ul>
<li><p>Object.isExtensible()方法判断一个对象是否是可扩展的(是否可以在它上面添加新的属性)。</p>
</li>
<li><p>Object.preventExtensions()方法让一个对象变的不可扩展，也就是永远不能再添加新的属性，并且返回原对象。</p>
</li>
<li><p>Object.isSealed()方法判断一个对象是否是密封的。</p>
</li>
<li><p>Object.seal()方法可以让一个对象密封，并返回被密封后的对象。</p>
</li>
<li><p>Object.isFrozen()方法判断一个对象是否被冻结。</p>
</li>
<li><p>Object.freeze()方法可以冻结一个对象。</p>
</li>
</ul>
<blockquote>
<p>1.不可扩展： 不可以增加新的属性，老的属性可以删除，也可以改值 2.密封： 不可以增加新的属性，老的属性不可以删除，但可以改值 3.冻结：不可以增加新的属性，老的属性不可以删除，不可以改值</p>
</blockquote>
<h2 id="介绍一下RAF-requestAnimateFrame"><a href="#介绍一下RAF-requestAnimateFrame" class="headerlink" title="介绍一下RAF requestAnimateFrame"></a>介绍一下<code>RAF requestAnimateFrame</code></h2><ul>
<li>要想动画流畅,更新频率要60帧/s , 即<code>16.67ms</code>更新- -次视图</li>
<li><code>setTimeout</code>要手动控制频率，而RAF浏览器会自动控制</li>
<li>后台标签或隐藏<code>iframe</code>中, <code>RAF</code>会暂停,而<code>setTimeout</code>依然执行</li>
<li><p>这里使用了<code>jQuery</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $div1 = $(<span class="string">&#x27;#div1&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> curWidth = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> maxWidth = <span class="number">640</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    curWidth = curWidth + <span class="number">3</span></span><br><span class="line">    $div1.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>, curWidth)</span><br><span class="line">    <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(animate, <span class="number">16.7</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animate</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    curWidth = curWidth + <span class="number">3</span></span><br><span class="line">    $div1.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>, curWidth)</span><br><span class="line">    <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="前端性能如何优化-一般从哪几个方面考虑"><a href="#前端性能如何优化-一般从哪几个方面考虑" class="headerlink" title="前端性能如何优化? 一般从哪几个方面考虑?"></a>前端性能如何优化? 一般从哪几个方面考虑?</h2><ul>
<li>原则:多使用内存、缓存，减少计算、减少网路请求</li>
<li>方向:加载页面,页面渲染，页面操作流畅度</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
